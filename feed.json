{
	"version": "https://jsonfeed.org/version/1",
	"title": "Jeff Triplett's Micro.blog",
	"icon": "https://micro.blog/webology/avatar.jpg",
	"home_page_url": "https://micro.webology.dev/",
	"feed_url": "https://micro.webology.dev/feed.json",
	"items": [
		
			{
				"id": "http://webology.micro.blog/2024/05/25/universal-principles-of.html",
				"title": "üìö Universal Principles of Typography book review",
				"content_html": "<p>Based on a few recommendations, I recently picked up the <a href=\"https://elliotjaystocks.com/book\">Universal Principles of Typography</a> book. The author noticed a few of us talking on Mastodon, which prompted me to write a review on Amazon. They seem nice and here is my review:</p>\n<p>tl;dr The book is excellent.¬†</p>\n<p>Each of the 100 key concepts has two side pages in a show-and-tell format that leads to the &ldquo;tell.&rdquo;¬†</p>\n<p>The first page explains the typography concept in conversational form, making the concept feel approachable and easier to understand. The second page shows practical examples and diagrams showing the concept applied. This format works well.¬†</p>\n<p>Each concept stands independently, making picking and choosing what to learn easier without the pressure of understanding everything before advancing.¬†</p>\n<p>If you want to learn more about Typography¬†or have bought other Typography books and struggled, this is an excellent book to add to your collection.</p>\n",
				"content_text": "Based on a few recommendations, I recently picked up the [Universal Principles of Typography](https://elliotjaystocks.com/book) book. The author noticed a few of us talking on Mastodon, which prompted me to write a review on Amazon. They seem nice and here is my review: \n\ntl;dr The book is excellent.¬†\n\nEach of the 100 key concepts has two side pages in a show-and-tell format that leads to the \"tell.\"¬†\n\nThe first page explains the typography concept in conversational form, making the concept feel approachable and easier to understand. The second page shows practical examples and diagrams showing the concept applied. This format works well.¬†\n\nEach concept stands independently, making picking and choosing what to learn easier without the pressure of understanding everything before advancing.¬†\n\nIf you want to learn more about Typography¬†or have bought other Typography books and struggled, this is an excellent book to add to your collection.\n",
				"date_published": "2024-05-25T23:31:07-05:00",
				"url": "https://micro.webology.dev/2024/05/25/universal-principles-of.html",
				"tags": ["Books"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/24/my-writing-workflow.html",
				"title": "‚å®Ô∏è My writing workflow or what works for me",
				"content_html": "<p>Reading about other people&rsquo;s writing process is fascinating and entertaining. There are no one-size-fits-all life hacks that all writers do other than write and publish. The only correct way to write is to just write.</p>\n<p>I&rsquo;m sharing what has been working for me. There&rsquo;s no magic in the app, tools, or theme, but I have embraced a bit of new tool energy with <a href=\"https://obsidian.md\">Obsidian</a> and the ease of <a href=\"https://micro.blog\">Micro.blog</a> without the pressure that every post must be a long-form thought piece.</p>\n<p>For me, my daily workflow and my  process has been:</p>\n<ul>\n<li>Write a draft using <a href=\"https://obsidian.md\">Obsidian</a>. I prefer the <a href=\"https://draculatheme.com/obsidian\">Dracula theme</a>.</li>\n<li>Copy the draft into <a href=\"https://www.grammarly.com\">Grammarly</a> and check for red squiggly lines.</li>\n<li>Copy the changes back into Obsidian.</li>\n<li>Add the date and update the title.</li>\n<li>Copy back into <a href=\"https://micro.blog\">Micro.blog</a>.</li>\n<li>Check for red squiggly lines with <a href=\"https://languagetool.org\">LanguageTool</a>.</li>\n<li>Update the title and fix the dates.</li>\n<li>If anything changes (this is common), I copy everything back into Obsidian.</li>\n<li>Publish on Micro.blog.</li>\n<li>Back in Obsidian, I move the article from my Drafts folder to my Published folder.</li>\n</ul>\n<p>I copy and paste a lot. Possibly too much, but Grammarly works better in their app than on the web, and I still find red squiggly lines no matter how much I nitpick, edit, and accept changes. LanguageTool finds things that Grammarly does not and vice versa.</p>\n<p>So that&rsquo;s it. That&rsquo;s what works for me.</p>\n",
				"content_text": "Reading about other people's writing process is fascinating and entertaining. There are no one-size-fits-all life hacks that all writers do other than write and publish. The only correct way to write is to just write. \r\n\r\nI'm sharing what has been working for me. There's no magic in the app, tools, or theme, but I have embraced a bit of new tool energy with [Obsidian](https://obsidian.md) and the ease of [Micro.blog](https://micro.blog) without the pressure that every post must be a long-form thought piece. \r\n\r\nFor me, my daily workflow and my  process has been:\r\n\r\n- Write a draft using [Obsidian](https://obsidian.md). I prefer the [Dracula theme](https://draculatheme.com/obsidian).\r\n- Copy the draft into [Grammarly](https://www.grammarly.com) and check for red squiggly lines.\r\n- Copy the changes back into Obsidian.\r\n- Add the date and update the title.\r\n- Copy back into [Micro.blog](https://micro.blog).\r\n- Check for red squiggly lines with [LanguageTool](https://languagetool.org).\r\n- Update the title and fix the dates.\r\n- If anything changes (this is common), I copy everything back into Obsidian.\r\n- Publish on Micro.blog.\r\n- Back in Obsidian, I move the article from my Drafts folder to my Published folder.\r\n\r\nI copy and paste a lot. Possibly too much, but Grammarly works better in their app than on the web, and I still find red squiggly lines no matter how much I nitpick, edit, and accept changes. LanguageTool finds things that Grammarly does not and vice versa. \r\n\r\nSo that's it. That's what works for me. \n",
				"date_published": "2024-05-24T23:01:59-05:00",
				"url": "https://micro.webology.dev/2024/05/24/my-writing-workflow.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/23/retroarch-on-iphone.html",
				"title": "üéÆ RetroArch on iPhone and iPad",
				"content_html": "<p>My favorite emulator, <a href=\"https://www.retroarch.com\">RetroArch</a>, is now available on iOS, so I can play my favorite retro console games on my iPhone or iPad. The current release is not optimized for the iPad, but like all/most iOS, it will run on the iPad in an upscaled mode. While this could be better, it&rsquo;s good enough for now.¬†</p>\n<p>Setting up RetroArch to handle a wide range of consoles is overwhelming. Thankfully, some good guides like this <a href=\"https://retrogamecorps.com/2022/02/28/retroarch-starter-guide/\">RetroArch Starter Guide</a>. If you prefer a video walkthrough, I prefer this <a href=\"https://www.youtube.com/watch?v=DHlJ3zANcjo\">RetroArch on iPhone &amp; iPad (Starter Guide)</a>. Both are great resources by Russ at <a href=\"https://retrogamecorps.com\">Retro Game Corps</a>, which is one of my favorite resources for emulation software and hardware.¬†</p>\n<p>If you are looking for a great controller, I own way too many <a href=\"https://www.8bitdo.com/\">8BitDo</a> controllers. They are my favorite gamepads and arcade sticks and a family favorite in my household for our Nintendo Switch, too.</p>\n",
				"content_text": "My favorite emulator, [RetroArch](https://www.retroarch.com), is now available on iOS, so I can play my favorite retro console games on my iPhone or iPad. The current release is not optimized for the iPad, but like all/most iOS, it will run on the iPad in an upscaled mode. While this could be better, it's good enough for now.¬†\r\n\r\nSetting up RetroArch to handle a wide range of consoles is overwhelming. Thankfully, some good guides like this [RetroArch Starter Guide](https://retrogamecorps.com/2022/02/28/retroarch-starter-guide/). If you prefer a video walkthrough, I prefer this [RetroArch on iPhone & iPad (Starter Guide)](https://www.youtube.com/watch?v=DHlJ3zANcjo). Both are great resources by Russ at [Retro Game Corps](https://retrogamecorps.com), which is one of my favorite resources for emulation software and hardware.¬†\r\n\r\nIf you are looking for a great controller, I own way too many [8BitDo](https://www.8bitdo.com/) controllers. They are my favorite gamepads and arcade sticks and a family favorite in my household for our Nintendo Switch, too.\n",
				"date_published": "2024-05-23T23:10:33-05:00",
				"url": "https://micro.webology.dev/2024/05/23/retroarch-on-iphone.html",
				"tags": ["Gaming"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/23/dave-the-diver.html",
				
				"content_html": "<p>üéÆ Dave the Diver: Godzilla is out! ü¶ñ</p>\n<p><a href=\"https://www.backloggd.com/games/dave-the-diver-godzilla/\">www.backloggd.com/games/dav&hellip;</a></p>\n",
				"content_text": "üéÆ Dave the Diver: Godzilla is out! ü¶ñ \r\n\r\n[www.backloggd.com/games/dav...](https://www.backloggd.com/games/dave-the-diver-godzilla/)\n",
				"date_published": "2024-05-23T17:44:07-05:00",
				"url": "https://micro.webology.dev/2024/05/23/dave-the-diver.html",
				"tags": ["Gaming"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/22/whats-new-in.html",
				"title": "‚ú® What's new in Django 5.1",
				"content_html": "<p>With today&rsquo;s <a href=\"https://www.djangoproject.com/weblog/2024/may/22/django-51-alpha-1-released/\">Django 5.1 alpha 1</a> release, picking just one favorite feature is hard. Django 5.1 is scheduled for release this August.</p>\n<p>I highly recommend reading the <a href=\"https://docs.djangoproject.com/en/dev/releases/5.1/\">release notes</a> on everything included in the next release.</p>\n<p>Here are a few of my favorite features that are solid quality-of-life improvements.</p>\n<h2 id=\"modeladminlist_display\"><code>ModelAdmin.list_display</code></h2>\n<blockquote>\n<p><code>django.contrib.admin</code></p>\n<p><code>ModelAdmin.list_display</code> now supports using <code>__</code> lookups to list fields from related models.</p>\n</blockquote>\n<p>Many times a year, I forget that <code>list_display</code> does not support the dunder <code>__</code> lookup, which leads to adding a property on <code>ModelAdmin</code> instead. FINALLY, Django supports this and I&rsquo;m thrilled.</p>\n<h2 id=\"the-query_string-template-tag\">The <code>query_string</code> template tag</h2>\n<blockquote>\n<p><code>{%¬†query_string¬†%}</code>¬†template tag</p>\n<p>Django 5.1 introduces the¬†<a href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std-templatetag-query_string\"><code>{%¬†query_string¬†%}</code></a>¬†template tag, simplifying the modification of query parameters in URLs, making it easier to generate links that maintain existing query parameters while adding or changing specific ones.</p>\n</blockquote>\n<p>This is one of those template tags that I routinely add to my projects because it&rsquo;s so helpful. I&rsquo;m thrilled to no longer need it.</p>\n<h2 id=\"views-require-authentication-by-default\">Views require authentication by default</h2>\n<blockquote>\n<p>Middleware to require authentication by default</p>\n<p>The new <code>LoginRequiredMiddleware</code> redirects all unauthenticated requests to a login page. Views can allow unauthenticated requests by using the new `login_not_required() decorator.</p>\n</blockquote>\n<p>Django now ships with a <code>LoginRequiredMiddleware</code> middleware, which adds authentication to all pages by default.</p>\n<p>I&rsquo;m happy to see this because &gt;90% of the apps I build require authentication by default, and it&rsquo;d be easier/less code to mark views that do not need required auth. Plus, it feels more secure to have a way to default all views to using auth than to forget to decorate a view that should not be visible.</p>\n<p>I&rsquo;m not sure how this impacts using third-party apps with views yet, but I suspect there will be a reasonable solution.</p>\n<h2 id=\"one-more-thing\">One more thing&hellip;</h2>\n<p>There are dozens and dozens of new features in the <a href=\"https://docs.djangoproject.com/en/dev/releases/5.1/\">Django 5.1 release notes</a>. If you spot any gems or have any favorite features, please let me know.</p>\n",
				"content_text": "With today's [Django 5.1 alpha 1](https://www.djangoproject.com/weblog/2024/may/22/django-51-alpha-1-released/) release, picking just one favorite feature is hard. Django 5.1 is scheduled for release this August. \r\n\r\nI highly recommend reading the [release notes](https://docs.djangoproject.com/en/dev/releases/5.1/) on everything included in the next release. \r\n\r\nHere are a few of my favorite features that are solid quality-of-life improvements. \r\n\r\n## `ModelAdmin.list_display` \r\n\r\n> `django.contrib.admin`\r\n> \r\n> `ModelAdmin.list_display` now supports using `__` lookups to list fields from related models.\r\n\r\nMany times a year, I forget that `list_display` does not support the dunder `__` lookup, which leads to adding a property on `ModelAdmin` instead. FINALLY, Django supports this and I'm thrilled. \r\n\r\n## The `query_string` template tag\r\n\r\n> `{%¬†query_string¬†%}`¬†template tag\r\n> \r\n> Django 5.1 introduces the¬†[`{%¬†query_string¬†%}`](https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std-templatetag-query_string)¬†template tag, simplifying the modification of query parameters in URLs, making it easier to generate links that maintain existing query parameters while adding or changing specific ones.\r\n\r\nThis is one of those template tags that I routinely add to my projects because it's so helpful. I'm thrilled to no longer need it. \r\n\r\n## Views require authentication by default\r\n\r\n> Middleware to require authentication by default\r\n> \r\n> The new `LoginRequiredMiddleware` redirects all unauthenticated requests to a login page. Views can allow unauthenticated requests by using the new `login_not_required() decorator.\r\n\r\nDjango now ships with a `LoginRequiredMiddleware` middleware, which adds authentication to all pages by default. \r\n\r\nI'm happy to see this because >90% of the apps I build require authentication by default, and it'd be easier/less code to mark views that do not need required auth. Plus, it feels more secure to have a way to default all views to using auth than to forget to decorate a view that should not be visible. \r\n\r\nI'm not sure how this impacts using third-party apps with views yet, but I suspect there will be a reasonable solution. \r\n\r\n## One more thing... \r\n\r\nThere are dozens and dozens of new features in the [Django 5.1 release notes](https://docs.djangoproject.com/en/dev/releases/5.1/). If you spot any gems or have any favorite features, please let me know. \r\n",
				"date_published": "2024-05-22T17:21:37-05:00",
				"url": "https://micro.webology.dev/2024/05/22/whats-new-in.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/21/office-hours-returns.html",
				"title": "üìÜ Office Hours Returns",
				"content_html": "<p>üìÖ Office Hours returns this <a href=\"https://time.is/0200PM_24_May_2024_in_CT?Jeff%27s_Office_Hours\">Friday, May 24th, 2024, from 2 PM to 4 PM</a> Central Time (US and Canada).</p>\n<p>‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note. Some of us are freshly back from PyCon US, so there will probably be quite a bit of banter from it, too.</p>\n<p>üôè As always, everyone is welcome to join, whether you‚Äôre a regular attendee or joining for the first time.</p>\n<p>‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you‚Äôll find the Zoom link ‚ö†Ô∏è</p>\n<p>I look forward to seeing everyone.</p>\n",
				"content_text": "üìÖ Office Hours returns this [Friday, May 24th, 2024, from 2 PM to 4 PM](https://time.is/0200PM_24_May_2024_in_CT?Jeff%27s_Office_Hours) Central Time (US and Canada). \n\n‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note. Some of us are freshly back from PyCon US, so there will probably be quite a bit of banter from it, too. \n\nüôè As always, everyone is welcome to join, whether you‚Äôre a regular attendee or joining for the first time.\n\n‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you‚Äôll find the Zoom link ‚ö†Ô∏è\n\nI look forward to seeing everyone.\n",
				"date_published": "2024-05-21T22:29:55-05:00",
				"url": "https://micro.webology.dev/2024/05/21/office-hours-returns.html",
				"tags": ["Office Hours"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/20/packing-and-unpacking.html",
				"title": "üíº Packing and unpacking",
				"content_html": "<p>I&rsquo;m exhausted after an excellent PyCon US, but I had packing and unpacking on my mind. I usually pack too many clothes in a suitcase that is too small and regretting it on my way back.</p>\n<p>I like to use packing cubes, and I still pack way too much into slightly too small of a suitcase, and then I regret it after bringing home too much swap home with me.</p>\n<p>This year, I challenged myself to pack less and to bring my more giant suitcase. I could even see the bottom of my luggage around my packing cubes.</p>\n<p>Overall, my take-home booth/vendor swag was very modest this year. I only brought home one T-shirt, a hat, and a bunch of stickers. I meant to buy a t-shirt to support <a href=\"https://blackpythondevs.com\">Black Python Devs</a>, but y&rsquo;all bought them all before I could make it back with cash.</p>\n<p>I also want to thank my friends who brought gifts for my kids and myself, which I didn&rsquo;t see coming. I am humbled and amazed that my community work and friendship sparked that response. I am humbled, and everything fits perfectly in my suitcase.</p>\n<p>My only misses during this trip were bringing too many USB-C cables, one book I never opened, and a smaller satchel to carry my laptop. I even left my computer in my hotel for a few days. Next year, I will bring fewer cables with me.</p>\n<p>The only device I wish I had brought was a small power strip. I have a GHome Smart Power Strip, which has a few USB charger ports, and it would have been nicer than fighting some of the hotel&rsquo;s loose, built-in chargers. With a power strip, I would have had more space to plug it into a wall jack.</p>\n<p>Someday, I will write up a proper gear post since I picked up a few new items I enjoyed having this year, but tonight, I will start recovering from my sleep debt.</p>\n",
				"content_text": "I'm exhausted after an excellent PyCon US, but I had packing and unpacking on my mind. I usually pack too many clothes in a suitcase that is too small and regretting it on my way back. \r\n\r\nI like to use packing cubes, and I still pack way too much into slightly too small of a suitcase, and then I regret it after bringing home too much swap home with me. \r\n\r\nThis year, I challenged myself to pack less and to bring my more giant suitcase. I could even see the bottom of my luggage around my packing cubes. \r\n\r\nOverall, my take-home booth/vendor swag was very modest this year. I only brought home one T-shirt, a hat, and a bunch of stickers. I meant to buy a t-shirt to support [Black Python Devs](https://blackpythondevs.com), but y'all bought them all before I could make it back with cash. \r\n\r\nI also want to thank my friends who brought gifts for my kids and myself, which I didn't see coming. I am humbled and amazed that my community work and friendship sparked that response. I am humbled, and everything fits perfectly in my suitcase.  \r\n\r\nMy only misses during this trip were bringing too many USB-C cables, one book I never opened, and a smaller satchel to carry my laptop. I even left my computer in my hotel for a few days. Next year, I will bring fewer cables with me. \r\n\r\nThe only device I wish I had brought was a small power strip. I have a GHome Smart Power Strip, which has a few USB charger ports, and it would have been nicer than fighting some of the hotel's loose, built-in chargers. With a power strip, I would have had more space to plug it into a wall jack. \r\n\r\nSomeday, I will write up a proper gear post since I picked up a few new items I enjoyed having this year, but tonight, I will start recovering from my sleep debt. \r\n",
				"date_published": "2024-05-20T21:06:16-05:00",
				"url": "https://micro.webology.dev/2024/05/20/packing-and-unpacking.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/19/lets-meet-at.html",
				"title": "üëã Let's meet at #PyConUS",
				"content_html": "<p>Good morning, #PyConUS friends.¬†I leave early Monday morning, and if you are attending this year and we¬†haven&rsquo;t met yet¬†or run into each other, <strong>please</strong> reach out, and let&rsquo;s say hello in person.¬†</p>\n<p>I met someone last night after midnight whom I have known online for over a decade for the first time because my keycard didn&rsquo;t work in the haunted hotel I&rsquo;m staying at. I took this as a sign to say hello to the group of people in the lobby because I was back downstairs anyway. Who am I to argue with ghosts?¬†</p>\n<p>My last PyCon US was five years ago, and I don&rsquo;t want to assume we can catch up next year. One pandemic, two virtual conferences, and two family emergencies later, and it took me five years to make it back.¬†So, I no longer take meeting people at conferences for granted because it took five years for me to get back here.¬†¬†</p>\n<p>Whether we are old friends, online friends, or haven&rsquo;t met to become friends, I&rsquo;d love to meet today at PyCon US, even if you are shy.</p>\n",
				"content_text": "Good morning, #PyConUS friends.¬†I leave early Monday morning, and if you are attending this year and we¬†haven't met yet¬†or run into each other, **please** reach out, and let's say hello in person.¬†\r\n\r\nI met someone last night after midnight whom I have known online for over a decade for the first time because my keycard didn't work in the haunted hotel I'm staying at. I took this as a sign to say hello to the group of people in the lobby because I was back downstairs anyway. Who am I to argue with ghosts?¬†\r\n\r\nMy last PyCon US was five years ago, and I don't want to assume we can catch up next year. One pandemic, two virtual conferences, and two family emergencies later, and it took me five years to make it back.¬†So, I no longer take meeting people at conferences for granted because it took five years for me to get back here.¬†¬†\r\n\r\nWhether we are old friends, online friends, or haven't met to become friends, I'd love to meet today at PyCon US, even if you are shy.\n",
				"date_published": "2024-05-19T07:21:21-05:00",
				"url": "https://micro.webology.dev/2024/05/19/lets-meet-at.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/19/waking-up-to.html",
				"title": "üì± Waking up to a blank iPhone 14 screen",
				"content_html": "<p>I am in Pittsburgh for PyCon US, and three of my last four mornings have begun with a blank iPhone 14 screen that refuses to come back on.</p>\n<p>I never charge my phone overnight, so I&rsquo;d like to know if it&rsquo;s the routine change or my Book Book phone case I purchased last week. Either way, waking up to a dead screen after charging all night is stressful.</p>\n<p>If you find yourself stuck in this situation, thankfully, there is an Apple <a href=\"https://discussions.apple.com/thread/254226002?answerId=258002087022#258002087022\">discussion thread</a> that helped me get to the iPhone logo.</p>\n<blockquote>\n<p>&hellip;press the up volume button once then the down volume once and hold the power button on the right side until you see the Apple logo. This resets the iPhone.</p>\n</blockquote>\n<p>This is apparently a firmware bug, but hopefully, it helps someone who might also wake up to a blank iPhone screen.</p>\n",
				"content_text": "I am in Pittsburgh for PyCon US, and three of my last four mornings have begun with a blank iPhone 14 screen that refuses to come back on. \r\n\r\nI never charge my phone overnight, so I'd like to know if it's the routine change or my Book Book phone case I purchased last week. Either way, waking up to a dead screen after charging all night is stressful. \r\n\r\nIf you find yourself stuck in this situation, thankfully, there is an Apple [discussion thread](https://discussions.apple.com/thread/254226002?answerId=258002087022#258002087022) that helped me get to the iPhone logo. \r\n\r\n> ...press the up volume button once then the down volume once and hold the power button on the right side until you see the Apple logo. This resets the iPhone.\r\n\r\nThis is apparently a firmware bug, but hopefully, it helps someone who might also wake up to a blank iPhone screen. \n",
				"date_published": "2024-05-19T06:57:15-05:00",
				"url": "https://micro.webology.dev/2024/05/19/waking-up-to.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/18/pierogicon-was-a.html",
				
				"content_html": "<p>ü•ü PierogiCon was a success.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "ü•ü PierogiCon was a success. \n\n<img src=\"uploads/2024/3d42ceee76.jpg\" width=\"600\" height=\"450\" alt=\"\">\n",
				"date_published": "2024-05-18T22:43:56-05:00",
				"url": "https://micro.webology.dev/2024/05/18/pierogicon-was-a.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/17/two-django-developers.html",
				
				"content_html": "<p>Two Django developers, the Flask lead maintainer, and the Pydantic author walk into a bar‚Ä¶ #PyConUS</p>\n",
				"content_text": "Two Django developers, the Flask lead maintainer, and the Pydantic author walk into a bar‚Ä¶ #PyConUS \n",
				"date_published": "2024-05-17T22:34:50-05:00",
				"url": "https://micro.webology.dev/2024/05/17/two-django-developers.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/16/pycon-us-have.html",
				"title": "üçî PyCon US, have it your way (you rule!)",
				"content_html": "<p>Here is my PyCon US advice based on Trey Hunner&rsquo;s Mastodon post:</p>\n<blockquote>\n<p>What are some of your favorite @pycon tips? üí°</p>\n<p>Reply and tag #PyConUS. üíñ</p>\n<p><a href=\"https://mastodon.social/@treyhunner/112448459788776426\">mastodon.social/@treyhunn&hellip;</a></p>\n</blockquote>\n<h2 id=\"talks-are-recorded\">Talks are recorded</h2>\n<p>Keep in mind that talks are recorded.</p>\n<p>Seeing every talk at PyCon US while you are attending is impossible. There are five tracks with three days of talks. There will be times when the two or three talks you most want to attend will all be given during the same block. Or you aren&rsquo;t used to talking to people all day and need extra sleep.</p>\n<p>It&rsquo;s fine. The talks are recorded.</p>\n<h2 id=\"ignore-pycon-us-advice-anti-patterns\">Ignore PyCon US advice anti-patterns</h2>\n<p>Python developers often have firm opinions. Every year, there are several blog posts about why you should &ldquo;only go to talks&rdquo; or &ldquo;only hallway track&rdquo;  when the rest of us will do both.</p>\n<h2 id=\"dont-sleep-on-the-first-two-days-of-the-expo-hall\">Don&rsquo;t sleep on the first two days of the Expo Hall</h2>\n<p>The Expo Hall has sponsor booths for one reception evening and the first two days of talks. On the third day of talks, the Expo hall gets converted into a Job Fair with other events running, and it takes a lot of work to bump into people.</p>\n<p>There have been some years where I never made it out of the Expo Hall for either day, even though I wasn&rsquo;t working a booth. I have even watched lunch get carted in and carted out while talking with people because it&rsquo;s a great location to meet new people and run into everyone you know online or from other conferences over the years. Don&rsquo;t do that. Stop and eat lunch.</p>\n<p>Take advantage of the first two days of the Expo Hall, even if you can&rsquo;t make it to the opening reception. Say hi to sponsors, too.</p>\n<h2 id=\"embrace-jomo-joy-of-missing-out\">Embrace JOMO (Joy Of Missing Out)</h2>\n<p>At my first PyCon US attendance as a board director, I didn&rsquo;t know I was supposed to attend a dinner for PyCon US organizers. My plane arrived late, and I got pinged if I knew about it about 30 minutes after the dinner started. I did a quick check. It was a 20-minute walk in a city I just landed in, so I thanked them and told them I couldn&rsquo;t make it.</p>\n<p>Instead, I went to the hotel bar to get dinner at the bar. I wasn&rsquo;t even staying in the main conference hotel. I made small talk with one of the other patrons, and they were not only attendees, but they just happened to be maintainers of a few of my favorite Python packages.</p>\n<p>You&rsquo;d be amazed at how many people you&rsquo;d otherwise never have met, even when you feel like not saying anything on the beaten path.</p>\n<h2 id=\"remember-burger-kings-golden-rule-have-it-your-way\">Remember Burger King&rsquo;s golden rule, &ldquo;have it your way&rdquo;</h2>\n<p>My six-year-old loves the Burger King &ldquo;You Rule&rdquo; commercials because of their TV jingle. Even though he&rsquo;s never had their food, that doesn&rsquo;t stop him from singing the ending chorus, &ldquo;At BK, have it your way,&rdquo; and then shouting, &ldquo;(You rule!).&rdquo;</p>\n<blockquote>\n<p>You rule\nYou&rsquo;re seizing the day\nAt BK, have it your way\n(You rule!)\n<a href=\"https://genius.com/Burger-king-you-rule-lyrics\">genius.com/Burger-ki&hellip;</a></p>\n</blockquote>\n<p>While I can&rsquo;t speak for their food, it&rsquo;s good advice.</p>\n<blockquote>\n<p>You rule</p>\n</blockquote>\n<p>First, everyone likes a compliment and &ldquo;you rule.&rdquo; You probably don&rsquo;t deflect a compliment when a TV jingle gives you one, so carry this into life the next time someone compliments you. Don&rsquo;t deflect it.</p>\n<blockquote>\n<p>You&rsquo;re seizing the day</p>\n</blockquote>\n<p>While PyCon US feels like a lot of days, it goes quickly. Take time to enjoy it. I have been to enough PyCons to know that jobs, careers, families, budgets, and health change.</p>\n<blockquote>\n<p>At BK, have it your way</p>\n</blockquote>\n<p>The only proper way to PyCon US is to &ldquo;have it your way.&rdquo; Go to the talks you want to see and talk to the people you want to talk to, but I encourage you to put yourself out there and meet new people.</p>\n<blockquote>\n<p>(You rule!)</p>\n</blockquote>\n<p>You rule!</p>\n<p>(take the damn compliment)</p>\n",
				"content_text": "Here is my PyCon US advice based on Trey Hunner's Mastodon post:\r\n\r\n> What are some of your favorite @pycon tips? üí°\r\n> \r\n> Reply and tag #PyConUS. üíñ\r\n> \r\n> [mastodon.social/@treyhunn...](https://mastodon.social/@treyhunner/112448459788776426)\r\n\r\n## Talks are recorded\r\n\r\nKeep in mind that talks are recorded. \r\n\r\nSeeing every talk at PyCon US while you are attending is impossible. There are five tracks with three days of talks. There will be times when the two or three talks you most want to attend will all be given during the same block. Or you aren't used to talking to people all day and need extra sleep.\r\n\r\nIt's fine. The talks are recorded. \r\n\r\n## Ignore PyCon US advice anti-patterns\r\n\r\nPython developers often have firm opinions. Every year, there are several blog posts about why you should \"only go to talks\" or \"only hallway track\"  when the rest of us will do both. \r\n\r\n## Don't sleep on the first two days of the Expo Hall\r\n\r\nThe Expo Hall has sponsor booths for one reception evening and the first two days of talks. On the third day of talks, the Expo hall gets converted into a Job Fair with other events running, and it takes a lot of work to bump into people. \r\n\r\nThere have been some years where I never made it out of the Expo Hall for either day, even though I wasn't working a booth. I have even watched lunch get carted in and carted out while talking with people because it's a great location to meet new people and run into everyone you know online or from other conferences over the years. Don't do that. Stop and eat lunch. \r\n\r\nTake advantage of the first two days of the Expo Hall, even if you can't make it to the opening reception. Say hi to sponsors, too. \r\n\r\n## Embrace JOMO (Joy Of Missing Out)\r\n\r\nAt my first PyCon US attendance as a board director, I didn't know I was supposed to attend a dinner for PyCon US organizers. My plane arrived late, and I got pinged if I knew about it about 30 minutes after the dinner started. I did a quick check. It was a 20-minute walk in a city I just landed in, so I thanked them and told them I couldn't make it.\r\n\r\nInstead, I went to the hotel bar to get dinner at the bar. I wasn't even staying in the main conference hotel. I made small talk with one of the other patrons, and they were not only attendees, but they just happened to be maintainers of a few of my favorite Python packages. \r\n\r\nYou'd be amazed at how many people you'd otherwise never have met, even when you feel like not saying anything on the beaten path. \r\n\r\n## Remember Burger King's golden rule, \"have it your way\"\r\n\r\nMy six-year-old loves the Burger King \"You Rule\" commercials because of their TV jingle. Even though he's never had their food, that doesn't stop him from singing the ending chorus, \"At BK, have it your way,\" and then shouting, \"(You rule!).\"\r\n\r\n> You rule\r\n> You're seizing the day\r\n> At BK, have it your way\r\n> (You rule!)\r\n> [genius.com/Burger-ki...](https://genius.com/Burger-king-you-rule-lyrics)\r\n\r\nWhile I can't speak for their food, it's good advice. \r\n\r\n> You rule\r\n\r\nFirst, everyone likes a compliment and \"you rule.\" You probably don't deflect a compliment when a TV jingle gives you one, so carry this into life the next time someone compliments you. Don't deflect it. \r\n\r\n> You're seizing the day\r\n\r\nWhile PyCon US feels like a lot of days, it goes quickly. Take time to enjoy it. I have been to enough PyCons to know that jobs, careers, families, budgets, and health change. \r\n\r\n> At BK, have it your way\r\n\r\nThe only proper way to PyCon US is to \"have it your way.\" Go to the talks you want to see and talk to the people you want to talk to, but I encourage you to put yourself out there and meet new people. \r\n\r\n> (You rule!)\r\n\r\nYou rule! \r\n\r\n(take the damn compliment)\r\n",
				"date_published": "2024-05-16T09:40:06-05:00",
				"url": "https://micro.webology.dev/2024/05/16/pycon-us-have.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/15/pycon-us-bound.html",
				"title": "PyCon US Bound",
				"content_html": "<p>üè° LFK üöó MCI üõ´ MDW üõ¨ PIT üè®¬†</p>\n<p>Two years in a row, in 2022 and 2023, I had to cancel my plans to attend PyCon US at the last minute, which means this is my first year back since 2019.</p>\n<p>I&rsquo;m excited to see old faces, new faces, people¬†who¬†I only know online¬†faces, and everyone who joins my weekly(ish) Office Hours faces.¬†</p>\n<p>If you are at PyCon¬†US, please say hi and don&rsquo;t hesitate to reach out. I like meeting people matching up social media avatars to their offline bodies.¬†</p>\n<p>I arrive Wednesday afternoon, and I have no formal plans on Thursday except to hang out around in the hallway track at the convention center. If I have any downtime, I&rsquo;ll finish this week&rsquo;s Django News Newsletter and work on some random projects, but I&rsquo;m mostly here to meet and chat with people before the opening reception.¬†</p>\n<p>Friend, whether or not we have met before IRL, I miss your faces. Come say hi!</p>\n<p>Since I haven&rsquo;t seen an official conference Slack/Discord/whatever, my Mastodon is probably the best/easiest way to reach me: <a href=\"https://mastodon.social/@webology\">mastodon.social/@webology</a></p>\n",
				"content_text": "üè° LFK üöó MCI üõ´ MDW üõ¨ PIT üè®¬†\r\n\r\nTwo years in a row, in 2022 and 2023, I had to cancel my plans to attend PyCon US at the last minute, which means this is my first year back since 2019. \r\n\r\nI'm excited to see old faces, new faces, people¬†who¬†I only know online¬†faces, and everyone who joins my weekly(ish) Office Hours faces.¬†\r\n\r\nIf you are at PyCon¬†US, please say hi and don't hesitate to reach out. I like meeting people matching up social media avatars to their offline bodies.¬†\r\n\r\nI arrive Wednesday afternoon, and I have no formal plans on Thursday except to hang out around in the hallway track at the convention center. If I have any downtime, I'll finish this week's Django News Newsletter and work on some random projects, but I'm mostly here to meet and chat with people before the opening reception.¬†\r\n\r\nFriend, whether or not we have met before IRL, I miss your faces. Come say hi!\r\n\r\nSince I haven't seen an official conference Slack/Discord/whatever, my Mastodon is probably the best/easiest way to reach me: [mastodon.social/@webology](https://mastodon.social/@webology)\r\n\r\n",
				"date_published": "2024-05-15T07:46:11-05:00",
				"url": "https://micro.webology.dev/2024/05/15/pycon-us-bound.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/14/on-hashtag-accessibility.html",
				"title": "üìù On Hashtag Accessibility",
				"content_html": "<p><em>I&rsquo;m calling myself out for this</em> because until about a month ago, <em>I used hashtags all wrong on my social media posts.</em></p>\n<p>You can make your posts easier with screen readers with a tiny change:</p>\n<blockquote>\n<p>Capitalize the first letter of each word in your hashtag</p>\n</blockquote>\n<p>Plus some benefits:</p>\n<blockquote>\n<ul>\n<li>\n<p>Friendlier for screen readers</p>\n</li>\n<li>\n<p>Friendlier for people with dyslexia or cognitive disabilities</p>\n</li>\n</ul>\n</blockquote>\n<p>Via <a href=\"https://www.boia.org/blog/make-your-hashtags-accessible\">Make Your Hashtags Accessible</a>, which I shared again this morning, and it prompted me to write this up.</p>\n<p>Technically, this is <a href=\"https://en.wikipedia.org/wiki/Camel_case\">Pascal&rsquo;s case vs. Camel&rsquo;s case</a>, but either one is better than the lowercase.</p>\n<p>As someone with dyslexia, I understand that it&rsquo;s more of a spectrum than a blanket, &lsquo;Jeff is bad with numbers,&rsquo; so it varies. I do find it easier to read something like DjangoConUS vs. djangoconus, which reads like &ldquo;django conus&rdquo; to me instead of &ldquo;django con us.&rdquo; So maybe that is my dyslexic brain, but I suspect it&rsquo;s easier for people who have no clue what a DjangoCon is, either.</p>\n<p>One more resource worth reading is <a href=\"https://scribe.rip/@markwyner/hashtag-accessibility-by-everyone-for-everyone-298667b2d891\">Hashtag Accessibility, by Everyone for Everyone</a>, which has a nice tl;dr heading of <em>&ldquo;Just Be Kind: Use Accessible Hashtags.&quot;</em></p>\n",
				"content_text": "*I'm calling myself out for this* because until about a month ago, *I used hashtags all wrong on my social media posts.* \n\nYou can make your posts easier with screen readers with a tiny change: \n\n> Capitalize the first letter of each word in your hashtag\n\nPlus some benefits:\n\n> - Friendlier for screen readers\n>\n> - Friendlier for people with dyslexia or cognitive disabilities\n\nVia [Make Your Hashtags Accessible](https://www.boia.org/blog/make-your-hashtags-accessible), which I shared again this morning, and it prompted me to write this up. \n\nTechnically, this is [Pascal's case vs. Camel's case](https://en.wikipedia.org/wiki/Camel_case), but either one is better than the lowercase. \n\nAs someone with dyslexia, I understand that it's more of a spectrum than a blanket, 'Jeff is bad with numbers,' so it varies. I do find it easier to read something like DjangoConUS vs. djangoconus, which reads like \"django conus\" to me instead of \"django con us.\" So maybe that is my dyslexic brain, but I suspect it's easier for people who have no clue what a DjangoCon is, either. \n\nOne more resource worth reading is [Hashtag Accessibility, by Everyone for Everyone](https://scribe.rip/@markwyner/hashtag-accessibility-by-everyone-for-everyone-298667b2d891), which has a nice tl;dr heading of *\"Just Be Kind: Use Accessible Hashtags.\"*\n",
				"date_published": "2024-05-14T08:38:41-05:00",
				"url": "https://micro.webology.dev/2024/05/14/on-hashtag-accessibility.html",
				"tags": ["Accessibility"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/13/how-to-rearrange.html",
				"title": "‚ú® How to rearrange #Vivaldi extensions in the the extension panel. ",
				"content_html": "<p>‚ú® One #Vivaldi gripe is that I can never remember how to rearrange the icons in my extension panel. They rarely change order, but every once in a while, I need to re-install an extension, and all ordering hell breaks loose.</p>\n<p>Turns out, you have to hold down the ‚åò key, then click and drag on the extension icon before letting go of the ‚åò key and <em>then</em> your mouse button.</p>\n<p><a href=\"https://forum.vivaldi.net/topic/76242/how-to-change-display-order-rearrange-panel-and-extension-icons\">forum.vivaldi.net/topic/762&hellip;</a></p>\n",
				"content_text": "‚ú® One #Vivaldi gripe is that I can never remember how to rearrange the icons in my extension panel. They rarely change order, but every once in a while, I need to re-install an extension, and all ordering hell breaks loose. \r\n\r\nTurns out, you have to hold down the ‚åò key, then click and drag on the extension icon before letting go of the ‚åò key and *then* your mouse button. \r\n\r\n[forum.vivaldi.net/topic/762...](https://forum.vivaldi.net/topic/76242/how-to-change-display-order-rearrange-panel-and-extension-icons) \n",
				"date_published": "2024-05-13T11:48:43-05:00",
				"url": "https://micro.webology.dev/2024/05/13/how-to-rearrange.html",
				"tags": ["Vivaldi"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/13/til-that-vivaldi.html",
				
				"content_html": "<p>üí° TIL that Vivaldi supported Philips Hue lights while I was adding a new profile.</p>\n<blockquote>\n<p>Hue lamp will change color based on the active tab‚Äôs webpage color. When disabled, your theme‚Äôs accent color will be used.</p>\n</blockquote>\n<p>I ‚ù§Ô∏è weird browsers.</p>\n<p><a href=\"https://help.vivaldi.com/desktop/miscellaneous/philips-hue/\">help.vivaldi.com/desktop/m&hellip;</a></p>\n",
				"content_text": "üí° TIL that Vivaldi supported Philips Hue lights while I was adding a new profile. \r\n\r\n> Hue lamp will change color based on the active tab‚Äôs webpage color. When disabled, your theme‚Äôs accent color will be used.\r\n\r\nI ‚ù§Ô∏è weird browsers. \r\n\r\n[help.vivaldi.com/desktop/m...](https://help.vivaldi.com/desktop/miscellaneous/philips-hue/)\n",
				"date_published": "2024-05-13T11:47:04-05:00",
				"url": "https://micro.webology.dev/2024/05/13/til-that-vivaldi.html",
				"tags": ["Vivaldi"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/12/weeknotes-for-week.html",
				"title": "üìì Weeknotes for Week 19: May 6 to May 12",
				"content_html": "<p>What a week.</p>\n<h2 id=\"family\">Family</h2>\n<p>My youngest was home most of the week with a virus, which changed everything about my week.</p>\n<p>We had a rare night out to see <a href=\"https://micro.webology.dev/2024/05/07/223140.html\">Jason Isbell and the 400 Unit at Liberty Hall</a></p>\n<p>My family also had a birthday on Friday, my son&rsquo;s friend&rsquo;s birthday party on Saturday, and Mother&rsquo;s Day today, so it was a busier than usual week for us and a sick kid all week.</p>\n<h2 id=\"work\">Work</h2>\n<p>With my daughter sick, everything changed this week. I mostly worked on an e-commerce app on a rare Saturday to get my bearings.</p>\n<h2 id=\"community\">Community</h2>\n<p><a href=\"https://www.conferencechats.org\">Conference Chats</a>: We had our monthly Wednesday night meetup.</p>\n<p><strong>Office Hours:</strong> I hosted Friday Office Hours.</p>\n<h2 id=\"side-projects\">Side projects</h2>\n<p><strong><a href=\"https://django-news.com\">Django News Newsletter</a>:</strong> We shipped issue <a href=\"https://django-news.com/issues/232#start\">#232</a>.</p>\n<p><a href=\"https://djangopackages.org\">Django Packages</a>: I mostly worked on some notes and task ideas for Djangonaut Space.</p>\n<p><a href=\"https://upgradedjango.com\">Upgrade Django</a>: We had four updates this week, which is rare.</p>\n<h2 id=\"writing\">Writing</h2>\n<p>I wrote and published every day. I started writing and publishing on my <a href=\"https://micro.webology.dev\">https://micro.webology.dev</a> every day since February 1st, and this week marked my 100th day in a row of writing.</p>\n<p><a href=\"https://micro.webology.dev/2024/05/11/on-vacation-autoresponders.html\">2024-05-11</a>: <strong>üì≠ On vacation autoresponders and deleting email</strong></p>\n<p><a href=\"https://micro.webology.dev/2024/05/10/til-buildandinspectpythonpackage-github.html\">2024-05-10</a>: <strong>üêç TIL build-and-inspect-python-package GitHub Action workflow plus some bonus Nox + Tox</strong></p>\n<p><a href=\"https://micro.webology.dev/2024/05/09/african-tech-book.html\">2024-05-09</a>: <strong>üìö African tech book drive at PyCon US</strong></p>\n<p><a href=\"https://micro.webology.dev/2024/05/08/office-hours-on.html\">2024-05-08</a>: <strong>üë• Office Hours on May 10th</strong></p>\n<p><a href=\"https://micro.webology.dev/2024/05/07/223140.html\">2024-05-07</a>: <strong>üé∏ Jason Isbell and the 400 Unit at Liberty Hall</strong></p>\n<p><a href=\"https://micro.webology.dev/2024/05/06/205515.html\">2024-05-06</a>: <strong>üå™Ô∏è Tornado Watch tonight</strong></p>\n<h2 id=\"me-time\">&ldquo;Me&rdquo; time</h2>\n<p>Early Saturday morning, I wrote a podcast downloader script to make downloading podcast episodes easier. I like to run some of my favorite podcast episodes through <a href=\"https://goodsnooze.gumroad.com/l/macwhisper\">MacWhisper</a> to generate a transcript to take better notes.</p>\n<p>Saturday evening, I wired up <a href=\"https://www.fabfile.org\">Fabric</a> to connect to my Macs to update them and run various <code>Just</code> recipes to keep everything updated. I ran into a few issues with my <code>.bashrc</code> file, but it was a good enough MVP.</p>\n<h2 id=\"entertainment\">Entertainment</h2>\n<p>üì∫ <a href=\"https://trakt.tv/movies/space-jam-a-new-legacy-2021\">Space Jam: A New Legacy</a>: My oldest has gotten into basketball and this was a fun family movie.</p>\n<p>üì∫ <a href=\"https://trakt.tv/shows/dead-boy-detectives\">Dead Boy Detectives</a>: I didn&rsquo;t have high expectations for this series, but watching two ghosts solve mysteries was fun.</p>\n<p>üéÆ <a href=\"https://www.backloggd.com/games/teenage-mutant-ninja-turtles-shredders-revenge/\">Teenage Mutant Ninja Turtles: Shredder&rsquo;s Revenge</a>: We hadn&rsquo;t played this one in a while, so we primarily focused on leveling up the two new characters from the expansion.</p>\n<h2 id=\"next-week\">Next week</h2>\n<p>I leave for PyCon US on Wednesday and have a small mountain of things to finish between now and then. I finished my laundry tonight, so I can leisurely pack over the next few days.</p>\n",
				"content_text": "What a week. \r\n\r\n## Family\r\n\r\nMy youngest was home most of the week with a virus, which changed everything about my week. \r\n\r\nWe had a rare night out to see [Jason Isbell and the 400 Unit at Liberty Hall](https://micro.webology.dev/2024/05/07/223140.html)\r\n\r\nMy family also had a birthday on Friday, my son's friend's birthday party on Saturday, and Mother's Day today, so it was a busier than usual week for us and a sick kid all week. \r\n\r\n## Work\r\n\r\nWith my daughter sick, everything changed this week. I mostly worked on an e-commerce app on a rare Saturday to get my bearings. \r\n\r\n## Community\r\n\r\n[Conference Chats](https://www.conferencechats.org): We had our monthly Wednesday night meetup. \r\n\r\n**Office Hours:** I hosted Friday Office Hours.\r\n\r\n## Side projects\r\n\r\n**[Django News Newsletter](https://django-news.com):** We shipped issue [#232](https://django-news.com/issues/232#start).\r\n\r\n[Django Packages](https://djangopackages.org): I mostly worked on some notes and task ideas for Djangonaut Space. \r\n\r\n[Upgrade Django](https://upgradedjango.com): We had four updates this week, which is rare.\r\n\r\n## Writing\r\n\r\nI wrote and published every day. I started writing and publishing on my [https://micro.webology.dev](https://micro.webology.dev) every day since February 1st, and this week marked my 100th day in a row of writing.\r\n\r\n[2024-05-11](https://micro.webology.dev/2024/05/11/on-vacation-autoresponders.html): **üì≠ On vacation autoresponders and deleting email** \r\n\r\n[2024-05-10](https://micro.webology.dev/2024/05/10/til-buildandinspectpythonpackage-github.html): **üêç TIL build-and-inspect-python-package GitHub Action workflow plus some bonus Nox + Tox** \r\n\r\n[2024-05-09](https://micro.webology.dev/2024/05/09/african-tech-book.html): **üìö African tech book drive at PyCon US** \r\n\r\n[2024-05-08](https://micro.webology.dev/2024/05/08/office-hours-on.html): **üë• Office Hours on May 10th** \r\n\r\n[2024-05-07](https://micro.webology.dev/2024/05/07/223140.html): **üé∏ Jason Isbell and the 400 Unit at Liberty Hall** \r\n\r\n[2024-05-06](https://micro.webology.dev/2024/05/06/205515.html): **üå™Ô∏è Tornado Watch tonight** \r\n\r\n## \"Me\" time\r\n\r\nEarly Saturday morning, I wrote a podcast downloader script to make downloading podcast episodes easier. I like to run some of my favorite podcast episodes through [MacWhisper](https://goodsnooze.gumroad.com/l/macwhisper) to generate a transcript to take better notes.\r\n\r\nSaturday evening, I wired up [Fabric](https://www.fabfile.org) to connect to my Macs to update them and run various `Just` recipes to keep everything updated. I ran into a few issues with my `.bashrc` file, but it was a good enough MVP. \r\n\r\n## Entertainment\r\n\r\nüì∫ [Space Jam: A New Legacy](https://trakt.tv/movies/space-jam-a-new-legacy-2021): My oldest has gotten into basketball and this was a fun family movie.\r\n\r\nüì∫ [Dead Boy Detectives](https://trakt.tv/shows/dead-boy-detectives): I didn't have high expectations for this series, but watching two ghosts solve mysteries was fun. \r\n\r\nüéÆ [Teenage Mutant Ninja Turtles: Shredder's Revenge](https://www.backloggd.com/games/teenage-mutant-ninja-turtles-shredders-revenge/): We hadn't played this one in a while, so we primarily focused on leveling up the two new characters from the expansion. \r\n\r\n## Next week\r\n\r\nI leave for PyCon US on Wednesday and have a small mountain of things to finish between now and then. I finished my laundry tonight, so I can leisurely pack over the next few days. \r\n",
				"date_published": "2024-05-12T20:21:09-05:00",
				"url": "https://micro.webology.dev/2024/05/12/weeknotes-for-week.html",
				"tags": ["Weeknotes"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/11/on-vacation-autoresponders.html",
				"title": "üì≠ On vacation autoresponders and deleting email",
				"content_html": "<p>I‚Äôve activated my email vacation autoresponder ahead of PyCon US next week to inform anyone who emails me that I‚Äôm out of the office and when I‚Äôll return. In my autoresponder message, I let everyone know when I will return, an alternative contact in an emergency, and that all incoming emails will be auto-archived or deleted.</p>\n<p>This approach ensures I won‚Äôt have an email backlog to work through upon my return. It also sets an upfront expectation for anyone needing something to contact me after I return to the office.</p>\n<p>I first got this idea and shared it with colleagues before I left for paternity leave before my son was born. I didn‚Äôt want to email guilt weighing over my head or to be tempted to check my email instead of bonding with my son and being present with my family. I also didn‚Äôt want to spend my first week at work reading old emails and wasting everyone‚Äôs time replying to irrelevant emails.</p>\n<p>While researching to see if my idea was absurd, I stumbled upon this <a href=\"https://qz.com/1061410/arianna-huffington-deletes-every-email-her-employees-receive-while-theyre-on-vacation\">Quartz article with advice by Arianna Huffington</a> which validated my idea. I never thought I‚Äôd quote Arianna Huffington, but here we are.</p>\n<blockquote>\n<p>‚ÄúThe way it works is simple: While you‚Äôre away on vacation, people who email you get a message, letting them know when you‚Äôll be back. And then ‚Äî the most important part ‚Äî the tool deletes the email. If the email is important, the sender can always send it again. If it‚Äôs not, then it‚Äôs not waiting for you when you get back, or, even worse, tempting you to read it while you‚Äôre away. So the key is not just that the tool is creating a wall between you and your email; it‚Äôs that it frees you from the mounting anxiety of having a mounting pile of emails waiting for you on your return ‚Äî the stress of which mitigates the benefits of disconnecting in the first place.‚Äù &ndash; Arianna Huffington</p>\n</blockquote>\n<p>Once I returned, I had a guilt-free, empty inbox. That first week back, I had dozens of congratulatory emails trickling in. I even had several compliments from people who planned on stealing this idea for their future vacations and leaves. This practice worked so well that I used it when my daughter was born and for several trips where I would be gone for a week or more.</p>\n<p>Your job and company vary by their policies, so I would discuss this more and double-check who a good alternative contact is while you are gone. If deleting messages is against the company‚Äôs policy, or you aren‚Äôt ready for it, start arching your email so you have it to reference should you need it.</p>\n",
				"content_text": "I‚Äôve activated my email vacation autoresponder ahead of PyCon US next week to inform anyone who emails me that I‚Äôm out of the office and when I‚Äôll return. In my autoresponder message, I let everyone know when I will return, an alternative contact in an emergency, and that all incoming emails will be auto-archived or deleted. \n\nThis approach ensures I won‚Äôt have an email backlog to work through upon my return. It also sets an upfront expectation for anyone needing something to contact me after I return to the office.\n\nI first got this idea and shared it with colleagues before I left for paternity leave before my son was born. I didn‚Äôt want to email guilt weighing over my head or to be tempted to check my email instead of bonding with my son and being present with my family. I also didn‚Äôt want to spend my first week at work reading old emails and wasting everyone‚Äôs time replying to irrelevant emails. \n\nWhile researching to see if my idea was absurd, I stumbled upon this [Quartz article with advice by Arianna Huffington](https://qz.com/1061410/arianna-huffington-deletes-every-email-her-employees-receive-while-theyre-on-vacation) which validated my idea. I never thought I‚Äôd quote Arianna Huffington, but here we are.\n\n> ‚ÄúThe way it works is simple: While you‚Äôre away on vacation, people who email you get a message, letting them know when you‚Äôll be back. And then ‚Äî the most important part ‚Äî the tool deletes the email. If the email is important, the sender can always send it again. If it‚Äôs not, then it‚Äôs not waiting for you when you get back, or, even worse, tempting you to read it while you‚Äôre away. So the key is not just that the tool is creating a wall between you and your email; it‚Äôs that it frees you from the mounting anxiety of having a mounting pile of emails waiting for you on your return ‚Äî the stress of which mitigates the benefits of disconnecting in the first place.‚Äù -- Arianna Huffington\n\nOnce I returned, I had a guilt-free, empty inbox. That first week back, I had dozens of congratulatory emails trickling in. I even had several compliments from people who planned on stealing this idea for their future vacations and leaves. This practice worked so well that I used it when my daughter was born and for several trips where I would be gone for a week or more. \n\nYour job and company vary by their policies, so I would discuss this more and double-check who a good alternative contact is while you are gone. If deleting messages is against the company‚Äôs policy, or you aren‚Äôt ready for it, start arching your email so you have it to reference should you need it. \n",
				"date_published": "2024-05-11T23:50:21-05:00",
				"url": "https://micro.webology.dev/2024/05/11/on-vacation-autoresponders.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/10/til-buildandinspectpythonpackage-github.html",
				"title": "üêç TIL build-and-inspect-python-package GitHub Action workflow plus some bonus Nox + Tox",
				"content_html": "<p>TIL: via <a href=\"https://mastodon.social/@josh@joshthomas.dev/112419234883043196\">@joshthomas</a> via <a href=\"https://mastodon.social/@treyhunner/112419178337248517\">@treyhunner</a> via <a href=\"https://mastodon.social/@hynek/112418278282018728\">@hynek</a> about the <a href=\"https://github.com/hynek/build-and-inspect-python-package\">hynek/build-and-inspect-python-package</a> GitHub Action.¬†</p>\n<p>This workflow makes it possible for GitHub Actions to read your Python version classifiers to build a matrix or, as Trey put it, &ldquo;<a href=\"https://github.com/treyhunner/countdown-cli/pull/208/commits/d33716b471a028ee1c56e35672e94e896dc5f360\">Remove so much junk</a>&rdquo; which is a pretty good example.¬†</p>\n<p>As a bonus, check out Hynek&rsquo;s video on <a href=\"https://www.youtube.com/watch?v=ImBvrDvK-1U\">NOX¬†vs¬†TOX ‚Äì WHAT are they for &amp; HOW do you CHOOSE? üêç</a>¬†</p>\n<p><a href=\"https://www.youtube.com/watch?v=ImBvrDvK-1U\">https://www.youtube.com/watch?v=ImBvrDvK-1U</a></p>\n<p>Both <a href=\"https://nox.thea.codes\">Nox</a> and <a href=\"https://tox.wiki\">Tox</a> are great tools that automate testing in multiple Python environments.¬†</p>\n<p>I prefer Nox because it uses Python to write configs, which fits my brain better. I used Tox for over a decade, and there are some tox.ini files that I dread updating because I can only remember how I got here after a few hours of tinkering. That&rsquo;s not Tox&rsquo;s fault. I think that&rsquo;s just a limitation of <code>ini</code> files and the frustration that comes from being unable to use Python when you have a complex matrix to try and sort out.¬†</p>\n<p>I recommend trying¬†them out and¬†using¬†the best tool for your brain.¬†There is¬†no¬†wrong¬†path here.</p>\n<p>PS: Thank you, Josh, for bringing this to my attention.</p>\n",
				"content_text": "TIL: via [@joshthomas](https://mastodon.social/@josh@joshthomas.dev/112419234883043196) via [@treyhunner](https://mastodon.social/@treyhunner/112419178337248517) via [@hynek](https://mastodon.social/@hynek/112418278282018728) about the [hynek/build-and-inspect-python-package](https://github.com/hynek/build-and-inspect-python-package) GitHub Action.¬†\r\n\r\nThis workflow makes it possible for GitHub Actions to read your Python version classifiers to build a matrix or, as Trey put it, \"[Remove so much junk](https://github.com/treyhunner/countdown-cli/pull/208/commits/d33716b471a028ee1c56e35672e94e896dc5f360)\" which is a pretty good example.¬†\r\n\r\nAs a bonus, check out Hynek's video on [NOX¬†vs¬†TOX ‚Äì WHAT are they for & HOW do you CHOOSE? üêç](https://www.youtube.com/watch?v=ImBvrDvK-1U)¬†\r\n\r\nhttps://www.youtube.com/watch?v=ImBvrDvK-1U\r\n\r\nBoth [Nox](https://nox.thea.codes) and [Tox](https://tox.wiki) are great tools that automate testing in multiple Python environments.¬†\r\n\r\nI prefer Nox because it uses Python to write configs, which fits my brain better. I used Tox for over a decade, and there are some tox.ini files that I dread updating because I can only remember how I got here after a few hours of tinkering. That's not Tox's fault. I think that's just a limitation of `ini` files and the frustration that comes from being unable to use Python when you have a complex matrix to try and sort out.¬†\r\n\r\nI recommend trying¬†them out and¬†using¬†the best tool for your brain.¬†There is¬†no¬†wrong¬†path here.\r\n\r\nPS: Thank you, Josh, for bringing this to my attention. \r\n\r\n",
				"date_published": "2024-05-10T20:59:21-05:00",
				"url": "https://micro.webology.dev/2024/05/10/til-buildandinspectpythonpackage-github.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/09/african-tech-book.html",
				"title": "üìö African tech book drive at PyCon US",
				"content_html": "<p>My friend <a href=\"https://twitter.com/MesrenyameDogbe\">Abigail</a>, is organizing a tech book drive for developers in Africa and is collecting them at <a href=\"https://us.pycon.org/2024/\">PyCon US</a> next week. These books will be given to high schoolers, university students, and early career folks.</p>\n<p>If you want to donate any used or new tech books, please bring them to PyCon US, and let&rsquo;s make plans to get them to Abigail.</p>\n<p>For more details, please check out Abigail&rsquo;s <a href=\"https://twitter.com/MesrenyameDogbe/status/1788633911171383672\">tweet</a>, or feel free to reach out to me, and I can connect you via email.</p>\n<p>#PyConUS #BookDrive</p>\n",
				"content_text": "My friend [Abigail](https://twitter.com/MesrenyameDogbe), is organizing a tech book drive for developers in Africa and is collecting them at [PyCon US](https://us.pycon.org/2024/) next week. These books will be given to high schoolers, university students, and early career folks.\r\n\r\nIf you want to donate any used or new tech books, please bring them to PyCon US, and let's make plans to get them to Abigail.\r\n\r\nFor more details, please check out Abigail's [tweet](https://twitter.com/MesrenyameDogbe/status/1788633911171383672), or feel free to reach out to me, and I can connect you via email. \r\n\r\n#PyConUS #BookDrive\n",
				"date_published": "2024-05-09T14:54:29-05:00",
				"url": "https://micro.webology.dev/2024/05/09/african-tech-book.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/08/office-hours-on.html",
				"title": "üë• Office Hours on May 10th",
				"content_html": "<p>üìÖ I&rsquo;m hosting Office Hours this Friday, May 10th, 2024, from <em>2 PM to 4 PM Central Time</em> (US and Canada). If you need to convert it to your local time zone, use this <a href=\"https://time.is/0200PM_10_May_2024_in_CT?Jeff%27s_Office_Hours\">handy link</a>.¬†</p>\n<p>‚ÑπÔ∏è This will be our last session for a few weeks due to <a href=\"https://us.pycon.org/2024/\">PyCon US</a> next week.</p>\n<p>‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.</p>\n<p>üôè As always, everyone is welcome to join, whether you&rsquo;re a regular attendee or joining for the first time.</p>\n<p>‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you&rsquo;ll find the Zoom link ‚ö†Ô∏è</p>\n<p>I look forward to seeing everyone.</p>\n",
				"content_text": "üìÖ I'm hosting Office Hours this Friday, May 10th, 2024, from *2 PM to 4 PM Central Time* (US and Canada). If you need to convert it to your local time zone, use this [handy link](https://time.is/0200PM_10_May_2024_in_CT?Jeff%27s_Office_Hours).¬†\r\n\r\n‚ÑπÔ∏è This will be our last session for a few weeks due to [PyCon US](https://us.pycon.org/2024/) next week.\r\n\r\n‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.\r\n\r\nüôè As always, everyone is welcome to join, whether you're a regular attendee or joining for the first time.\r\n\r\n‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you'll find the Zoom link ‚ö†Ô∏è\r\n\r\nI look forward to seeing everyone.\n",
				"date_published": "2024-05-08T19:31:16-05:00",
				"url": "https://micro.webology.dev/2024/05/08/office-hours-on.html",
				"tags": ["Office Hours"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/07/223140.html",
				"title": "üé∏ Jason Isbell and the 400 Unit at Liberty Hall",
				"content_html": "<p>We had a rare outing tonight to see Jason Isbell and the 400 Unit play at Liberty Hall.¬†</p>\n<p>You are missing out if Liberty Hall is not on your bucket list of live music venues. We are spoiled here in Lawrence, Kansas, and this venue is one of the many reasons. This was a makeup show from when Jason had a virus and lost his voice a few months back.¬†</p>\n<p>I was lucky to meet half of the 400 Unit, the road manager, and several people who worked behind the scenes when their last show was called off. They were super friendly, and it was nice to see people who genuinely liked each other smiling and playing together on stage.¬†</p>\n<p>I&rsquo;m thankful they allowed us to see them perform tonight.¬†</p>\n<!-- raw HTML omitted -->\n<p>Seeing a band&rsquo;s name on the Liberty Hall Marquee still gives me chills after they perform.¬†</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "We had a rare outing tonight to see Jason Isbell and the 400 Unit play at Liberty Hall.¬†\n\nYou are missing out if Liberty Hall is not on your bucket list of live music venues. We are spoiled here in Lawrence, Kansas, and this venue is one of the many reasons. This was a makeup show from when Jason had a virus and lost his voice a few months back.¬†\n\nI was lucky to meet half of the 400 Unit, the road manager, and several people who worked behind the scenes when their last show was called off. They were super friendly, and it was nice to see people who genuinely liked each other smiling and playing together on stage.¬†\n\nI'm thankful they allowed us to see them perform tonight.¬†\n\n<img src=\"uploads/2024/1102170060.jpg\" width=\"600\" height=\"450\" alt=\"Jason Isbell's name on the Liberty Hall Marquee\">\n\nSeeing a band's name on the Liberty Hall Marquee still gives me chills after they perform.¬†\n\n<img src=\"uploads/2024/cd5eba802d.jpg\" width=\"600\" height=\"450\" alt=\"Jason Isbell and the 400 Unit play at Liberty Hall\">\n\n<img src=\"uploads/2024/a57a98b9ea.jpg\" width=\"600\" height=\"450\" alt=\"Jason Isbell and the 400 Unit play at Liberty Hall\">\n\n<img src=\"uploads/2024/28b139b39b.jpg\" width=\"600\" height=\"450\" alt=\"A close up photo of Jason Isbell singing and playing the guitar\">\n",
				"date_published": "2024-05-07T22:47:53-05:00",
				"url": "https://micro.webology.dev/2024/05/07/223140.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/06/205515.html",
				"title": "üå™Ô∏è Tornado Watch tonight",
				"content_html": "<p>We have been under a Tornado Watch since I left work today until about 11 PM tonight. My youngest isn&rsquo;t feeling well, so I&rsquo;m not in the mood for a long post tonight. A Tornado Watch means the conditions are favorable for a Tornado. A Tornado Warning means taking shelter because they have confirmed the spotting of a Tornado.¬†</p>\n<p>Last Tuesday, I was stuck downtown for 90 minutes while the sirens were going off because we had a Tornado Warning North of Lawrence, KS, while my family was safe in our basement. Luckily, everyone was safe and sound.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "We have been under a Tornado Watch since I left work today until about 11 PM tonight. My youngest isn't feeling well, so I'm not in the mood for a long post tonight. A Tornado Watch means the conditions are favorable for a Tornado. A Tornado Warning means taking shelter because they have confirmed the spotting of a Tornado.¬†\n\nLast Tuesday, I was stuck downtown for 90 minutes while the sirens were going off because we had a Tornado Warning North of Lawrence, KS, while my family was safe in our basement. Luckily, everyone was safe and sound.\n\n<img src=\"uploads/2024/image.png\" width=\"276\" height=\"600\" alt=\"iPhone Weather app screen showing its 68F with a Thunderstorm with a Tornado Watch\">\n",
				"date_published": "2024-05-06T21:06:41-05:00",
				"url": "https://micro.webology.dev/2024/05/06/205515.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/05/randy-travis-and.html",
				"title": "üéôÔ∏è Randy Travis and Ethical AI",
				"content_html": "<p>Eleven years ago, country music legend Randy Travis lost his voice to a stroke despite keeping 100% of his cognitive skills.¬†Randy used AI to regain his singing voice and released a new single utilizing a mix of AI voice cloning blended with a surrogate voice.</p>\n<p>Check out both of these articles for more details: <a href=\"https://www.cbsnews.com/news/randy-travis-sings-again-courtesy-of-ai-where-that-came-from/\">More than a decade after a stroke, Randy Travis sings again, courtesy of AI</a> and <a href=\"https://www.savingcountrymusic.com/on-the-beauty-and-dilemma-of-the-new-ai-randy-travis-song/\">On The Beauty and Dilemma of the New A.I. Randy Travis Song</a>.</p>\n<blockquote>\n<p>It is¬†important¬†to note that even though Randy is non-verbal, those close to Travis assure that he is still 100% cognitive, aware, understanding, and even communicative¬†both¬†through simple visual affirmations, as well as¬†writing or typing out things he wishes to communicate.</p>\n</blockquote>\n<p>I see more unethical and ethical questionable stories about exploitive behavior with AI. It&rsquo;s refreshing to see a story about a living artist literally regaining their voice, which was otherwise lost from a life-altering stroke.</p>\n",
				"content_text": "Eleven years ago, country music legend Randy Travis lost his voice to a stroke despite keeping 100% of his cognitive skills.¬†Randy used AI to regain his singing voice and released a new single utilizing a mix of AI voice cloning blended with a surrogate voice. \r\n\r\nCheck out both of these articles for more details: [More than a decade after a stroke, Randy Travis sings again, courtesy of AI](https://www.cbsnews.com/news/randy-travis-sings-again-courtesy-of-ai-where-that-came-from/) and [On The Beauty and Dilemma of the New A.I. Randy Travis Song](https://www.savingcountrymusic.com/on-the-beauty-and-dilemma-of-the-new-ai-randy-travis-song/). \r\n\r\n> It is¬†important¬†to note that even though Randy is non-verbal, those close to Travis assure that he is still 100% cognitive, aware, understanding, and even communicative¬†both¬†through simple visual affirmations, as well as¬†writing or typing out things he wishes to communicate.\r\n\r\nI see more unethical and ethical questionable stories about exploitive behavior with AI. It's refreshing to see a story about a living artist literally regaining their voice, which was otherwise lost from a life-altering stroke.\r\n",
				"date_published": "2024-05-05T11:13:52-05:00",
				"url": "https://micro.webology.dev/2024/05/05/randy-travis-and.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/04/on-pearl-jams.html",
				"title": "üé∏ On Pearl Jam's Dark Matter interviews",
				"content_html": "<p>My favorite band, Pearl Jam, recently released a new album called Dark Matter, which has led to a series of new interviews.</p>\n<p>In the same way, people geeked out over The Beatles: Get Back series, I enjoyed both these videos (despite being YouTube) and seeing behind the scenes of their warehouse/studio/clubhouse. It&rsquo;s a golden era to be a music fan these days.</p>\n<p>If you are a music nerd, I highly recommend the first video for a piece of music history. There&rsquo;s a lot of music history packed in there.</p>\n<h2 id=\"despite-youtube\">Despite YouTube</h2>\n<p><a href=\"https://www.youtube.com/watch?v=ZpuuIpsgaPQ\">Pearl Jam: The ‚ÄòDark Matter‚Äô Interview | Apple Music</a></p>\n<!-- raw HTML omitted -->\n<h2 id=\"despite-bill-simmons\">Despite Bill Simmons</h2>\n<p>Be sure to listen to them talk about Torpedo typewriters and avocados.</p>\n<p><a href=\"https://www.youtube.com/watch?v=84bhhu32PII\">Eddie Vedder and Jeff Ament sit down with Bill Simmons | The Bill Simmons Podcast</a></p>\n<!-- raw HTML omitted -->\n<p>#PearlJam #DarkMatter</p>\n",
				"content_text": "My favorite band, Pearl Jam, recently released a new album called Dark Matter, which has led to a series of new interviews. \r\n\r\nIn the same way, people geeked out over The Beatles: Get Back series, I enjoyed both these videos (despite being YouTube) and seeing behind the scenes of their warehouse/studio/clubhouse. It's a golden era to be a music fan these days. \r\n\r\nIf you are a music nerd, I highly recommend the first video for a piece of music history. There's a lot of music history packed in there. \r\n\r\n## Despite YouTube\r\n\r\n[Pearl Jam: The ‚ÄòDark Matter‚Äô Interview | Apple Music](https://www.youtube.com/watch?v=ZpuuIpsgaPQ)\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZpuuIpsgaPQ?si=1O0IYMVbDk6RKa6N\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n\r\n## Despite Bill Simmons\r\n\r\nBe sure to listen to them talk about Torpedo typewriters and avocados. \r\n\r\n[Eddie Vedder and Jeff Ament sit down with Bill Simmons | The Bill Simmons Podcast](https://www.youtube.com/watch?v=84bhhu32PII)\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/84bhhu32PII?si=qO0v9mKZV_lu0277\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n\r\n#PearlJam #DarkMatter\n",
				"date_published": "2024-05-04T20:14:15-05:00",
				"url": "https://micro.webology.dev/2024/05/04/on-pearl-jams.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/03/degoogling-update.html",
				"title": "üöú De-googling update üìâ",
				"content_html": "<p>After my <a href=\"https://micro.webology.dev/2024/04/27/drop-google-chrome.html\">üî• Drop Google Chrome and try out Vivaldi for a week, I dare you</a>article, I have heard from a bunch of people, and it sounds like many of us have had similar thoughts about the need to de-googling our lives.</p>\n<p>This article, <a href=\"https://www.chilli.ai/how-i-de-googled-as-much-as-possible/\">how I de-googled (as much as possible)</a>, was also worth reading. I&rsquo;m not as sold on picking services for their LLM savings value, but there is some solid advice with some good alternatives here.</p>\n<p>Since I had a <a href=\"https://www.fastmail.com\">Fastmail</a> account set up for a while, I started transitioning some of my main accounts to it. This will take a LONG time, but it&rsquo;s no longer something I plan to do. Once everything is moved over, moving to a different email provider is much easier than when my email account is tied to an address I have little to no control over.</p>\n<p>#enshittification</p>\n",
				"content_text": "After my [üî• Drop Google Chrome and try out Vivaldi for a week, I dare you](https://micro.webology.dev/2024/04/27/drop-google-chrome.html)article, I have heard from a bunch of people, and it sounds like many of us have had similar thoughts about the need to de-googling our lives. \r\n\r\nThis article, [how I de-googled (as much as possible)](https://www.chilli.ai/how-i-de-googled-as-much-as-possible/), was also worth reading. I'm not as sold on picking services for their LLM savings value, but there is some solid advice with some good alternatives here. \r\n\r\nSince I had a [Fastmail](https://www.fastmail.com) account set up for a while, I started transitioning some of my main accounts to it. This will take a LONG time, but it's no longer something I plan to do. Once everything is moved over, moving to a different email provider is much easier than when my email account is tied to an address I have little to no control over. \r\n\r\n#enshittification \n",
				"date_published": "2024-05-03T20:55:08-05:00",
				"url": "https://micro.webology.dev/2024/05/03/degoogling-update.html",
				"tags": ["Enshittification"]
			},
			{
				"id": "http://webology.micro.blog/2024/05/02/this-week-was.html",
				"title": "üò¨ This week was a grind",
				"content_html": "<p>This week, and especially today, has felt like a grind.¬†</p>\n<p>Code ebbs and flows better and worse. Some weeks and days have either been hyperproductive or a suffered a hundred paper cuts to make progress.¬†</p>\n<p>Today, I dropped my kids off at their respective schools and hopped into a bi-monthly workgroup meeting as soon as I walked into the office. They needed me to make a quorum, and it&rsquo;s one of those rotating meetings that conflicts with my kid&rsquo;s drop-off schedules every other meeting.¬†</p>\n<p>The meeting ended early, and I uploaded grant applications to our conference grant system before I uploaded them again because I forgot to add the extra questions. Two more uploads because of a missing Timestamp field that was a bug. I didn&rsquo;t trust myself, so I uploaded it again.¬†</p>\n<p>I went into client-work mode for the next few hours until a friend pinged me, and 20 minutes later, we posted a blog post announcement.¬†</p>\n<p>I did more client work and ordered a quick lunch. Over lunch, I had a ping about our conference website, which was ready to go live, but we still needed to discuss the plan to launch it. I renamed one repository, created a new repository, and pushed changes from a third repository with some liberal GitHub Pages changes, and thankfully, everything just worked.¬†</p>\n<p>One of my parents had a procedure today, so I got a call from my other parent telling me everything went well. That was a good weight off my shoulders.</p>\n<p>I have a weekly writing group meeting on Thursdays that I forgot we weren&rsquo;t meeting today (I think), so I got an extra hour of client work worked in more than my typical Thursday.¬†</p>\n<p>Towards the end of the day, we have a weekly company banter/social hour that I joined late for.¬†</p>\n<p>It ended early, and a few more conference website issues popped up.¬†</p>\n<p>I stayed a little late and came home to see the family, eat dinner, and¬†clean up afterward. The kids' grandfather from Chicago is in town for the weekend.¬†</p>\n<p>After dinner, I worked on the newsletter, and every time I thought I was done, I would find one more thing that needed to be done off and on for the next 90 minutes.¬†</p>\n<p>I remembered that I had rolled out a new release of the Job website this morning before work, and I thought to double-check it, which made me realize we had two new jobs to post to the newsletter.¬†</p>\n<p>I rarely check Slack at night, but I had posted a message about rolling a new feature for one of our more popular libraries, so I merged three pull requests and created a fourth pull request to help clean things up. We&rsquo;ll release it tomorrow.¬†</p>\n<p>While checking GitHub notifications, I decided to check another project and realized I had missed a bug report about GitHub Auth needing to be fixed for the last day. I don&rsquo;t know why they call it &ldquo;depend&quot;abot¬†because it&rsquo;s not. One third-party library rollback later, I pin to a previous version, deploy, test, and everything works again.¬†</p>\n<p>Tonight, I realized that I still wanted to keep my writing streak up, so here we are.¬†</p>\n<p>I&rsquo;m not a fan of being busy, looking busy, or needing to feel busy, but every day has¬†felt like this.¬†</p>\n<p>Thankfully, tomorrow is Friday, and there are only two things on my calendar, including Office Hours, which I look forward to.¬†</p>\n<p>We made friends, but it was quite a week.</p>\n",
				"content_text": "This week, and especially today, has felt like a grind.¬†\r\n\r\nCode ebbs and flows better and worse. Some weeks and days have either been hyperproductive or a suffered a hundred paper cuts to make progress.¬†\r\n\r\nToday, I dropped my kids off at their respective schools and hopped into a bi-monthly workgroup meeting as soon as I walked into the office. They needed me to make a quorum, and it's one of those rotating meetings that conflicts with my kid's drop-off schedules every other meeting.¬†\r\n\r\nThe meeting ended early, and I uploaded grant applications to our conference grant system before I uploaded them again because I forgot to add the extra questions. Two more uploads because of a missing Timestamp field that was a bug. I didn't trust myself, so I uploaded it again.¬†\r\n\r\nI went into client-work mode for the next few hours until a friend pinged me, and 20 minutes later, we posted a blog post announcement.¬†\r\n\r\nI did more client work and ordered a quick lunch. Over lunch, I had a ping about our conference website, which was ready to go live, but we still needed to discuss the plan to launch it. I renamed one repository, created a new repository, and pushed changes from a third repository with some liberal GitHub Pages changes, and thankfully, everything just worked.¬†\r\n\r\nOne of my parents had a procedure today, so I got a call from my other parent telling me everything went well. That was a good weight off my shoulders. \r\n\r\nI have a weekly writing group meeting on Thursdays that I forgot we weren't meeting today (I think), so I got an extra hour of client work worked in more than my typical Thursday.¬†\r\n\r\nTowards the end of the day, we have a weekly company banter/social hour that I joined late for.¬†\r\n\r\nIt ended early, and a few more conference website issues popped up.¬†\r\n\r\nI stayed a little late and came home to see the family, eat dinner, and¬†clean up afterward. The kids' grandfather from Chicago is in town for the weekend.¬†\r\n\r\nAfter dinner, I worked on the newsletter, and every time I thought I was done, I would find one more thing that needed to be done off and on for the next 90 minutes.¬†\r\n\r\nI remembered that I had rolled out a new release of the Job website this morning before work, and I thought to double-check it, which made me realize we had two new jobs to post to the newsletter.¬†\r\n\r\nI rarely check Slack at night, but I had posted a message about rolling a new feature for one of our more popular libraries, so I merged three pull requests and created a fourth pull request to help clean things up. We'll release it tomorrow.¬†\r\n\r\nWhile checking GitHub notifications, I decided to check another project and realized I had missed a bug report about GitHub Auth needing to be fixed for the last day. I don't know why they call it \"depend\"abot¬†because it's not. One third-party library rollback later, I pin to a previous version, deploy, test, and everything works again.¬†\r\n\r\nTonight, I realized that I still wanted to keep my writing streak up, so here we are.¬†\r\n\r\nI'm not a fan of being busy, looking busy, or needing to feel busy, but every day has¬†felt like this.¬†\r\n\r\nThankfully, tomorrow is Friday, and there are only two things on my calendar, including Office Hours, which I look forward to.¬†\r\n\r\nWe made friends, but it was quite a week.\n",
				"date_published": "2024-05-02T22:39:34-05:00",
				"url": "https://micro.webology.dev/2024/05/02/this-week-was.html"
			},
			{
				"id": "http://webology.micro.blog/2024/05/01/office-hours-on.html",
				"title": "üìÖ Office Hours on May 3rd",
				"content_html": "<p>üìÖ I&rsquo;m hosting Office Hours this Friday, May 3rd, 2024, from <em>2:00 PM to 4:30 PM Central Time</em> (US and Canada). If you need to convert it to your local time zone, use this <a href=\"https://time.is/0200PM_03_May_2024_in_CT?Jeff%27s_Office_Hours\">handy link</a>.¬†</p>\n<p>‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.</p>\n<p>üôè As always, everyone is welcome to join, whether you&rsquo;re a regular attendee or joining for the first time.</p>\n<p>‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you&rsquo;ll find the Zoom link ‚ö†Ô∏è</p>\n<p>I look forward to seeing everyone.</p>\n",
				"content_text": "üìÖ I'm hosting Office Hours this Friday, May 3rd, 2024, from *2:00 PM to 4:30 PM Central Time* (US and Canada). If you need to convert it to your local time zone, use this [handy link](https://time.is/0200PM_03_May_2024_in_CT?Jeff%27s_Office_Hours).¬†\r\n\r\n‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.\r\n\r\nüôè As always, everyone is welcome to join, whether you're a regular attendee or joining for the first time.\r\n\r\n‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you'll find the Zoom link ‚ö†Ô∏è\r\n\r\nI look forward to seeing everyone.\n",
				"date_published": "2024-05-01T20:30:58-05:00",
				"url": "https://micro.webology.dev/2024/05/01/office-hours-on.html",
				"tags": ["Office Hours"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/30/everyone-struggles-with.html",
				"title": "üéí Everyone struggles with Django's static files",
				"content_html": "<p>Josh Thomas did a great job documenting and walking us through how he prefers to set up static files in his Django projects last week in his <a href=\"https://joshthomas.dev/blog/2024/how-i-organize-staticfiles-in-my-django-projects/\">How I organize <code>staticfiles</code> in my Django projects</a> article.</p>\n<p>Josh recommends the following config and naming convention:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># settings.py</span>\n\n<span style=\"color:#75715e\"># django.contrib.staticfiles</span>\nSTATIC_ROOT <span style=\"color:#f92672\">=</span> BASE_DIR <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;staticfiles&#34;</span>\n\nSTATIC_URL <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;/static/&#34;</span>\n\nSTATICFILES_DIRS <span style=\"color:#f92672\">=</span> [\n    BASE_DIR <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;static&#34;</span> <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;dist&#34;</span>,\n    BASE_DIR <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;static&#34;</span> <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;public&#34;</span>,\n]\n</code></pre></div><p>Overall, this is very similar to what I do, but I settled into calling my <code>STATICFILES_DIRS</code> folder <code>assets</code> or <code>frontend</code>. After seeing Josh&rsquo;s example, I changed this value to <code>staticfiles</code> to match the setting variable more closely.</p>\n<h2 id=\"updated-config\">Updated config</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># settings.py</span>\n\n<span style=\"color:#75715e\"># django.contrib.staticfiles</span>\n\n<span style=\"color:#75715e\"># INPUT: Where to look for static files</span>\nSTATICFILES_DIRS <span style=\"color:#f92672\">=</span> [\n    BASE_DIR <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;staticfiles&#34;</span> <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;dist&#34;</span>,\n    BASE_DIR <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;staticfiles&#34;</span> <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;public&#34;</span>,\n]\n\n<span style=\"color:#75715e\"># OUTPUT: Where to put and look for static files to serve</span>\nSTATIC_ROOT <span style=\"color:#f92672\">=</span> BASE_DIR <span style=\"color:#f92672\">/</span> <span style=\"color:#e6db74\">&#34;static&#34;</span>\n\n<span style=\"color:#75715e\"># SERVE: Where to serve static files</span>\nSTATIC_URL <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;/static/&#34;</span>\n</code></pre></div><p>This also changes our <code>.gitignore</code> to match our new settings. Since all of our files will be collected by Django and placed into the <code>static</code> folder, we can tell git to ignore this folder.</p>\n<p>We can also ignore the <code>staticfiles/dist/</code> folder if we have an asset building pipeline and need a place to store the intermediate files.</p>\n<pre tabindex=\"0\"><code class=\"language-unixconfig\" data-lang=\"unixconfig\">#.gitignore\r\nstatic/\r\nstaticfiles/dist/\r\n# Optionally, to universally ignore all 'dist' directories:\r\n# dist\r\n</code></pre>",
				"content_text": "Josh Thomas did a great job documenting and walking us through how he prefers to set up static files in his Django projects last week in his [How I organize `staticfiles` in my Django projects](https://joshthomas.dev/blog/2024/how-i-organize-staticfiles-in-my-django-projects/) article.\r\n\r\nJosh recommends the following config and naming convention: \r\n\r\n```python\r\n# settings.py\r\n\r\n# django.contrib.staticfiles\r\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\r\n\r\nSTATIC_URL = \"/static/\"\r\n\r\nSTATICFILES_DIRS = [\r\n    BASE_DIR / \"static\" / \"dist\",\r\n    BASE_DIR / \"static\" / \"public\",\r\n]\r\n```\r\n\r\nOverall, this is very similar to what I do, but I settled into calling my `STATICFILES_DIRS` folder `assets` or `frontend`. After seeing Josh's example, I changed this value to `staticfiles` to match the setting variable more closely. \r\n\r\n## Updated config\r\n\r\n```python\r\n# settings.py\r\n\r\n# django.contrib.staticfiles\r\n\r\n# INPUT: Where to look for static files\r\nSTATICFILES_DIRS = [\r\n    BASE_DIR / \"staticfiles\" / \"dist\",\r\n    BASE_DIR / \"staticfiles\" / \"public\",\r\n]\r\n\r\n# OUTPUT: Where to put and look for static files to serve\r\nSTATIC_ROOT = BASE_DIR / \"static\"\r\n\r\n# SERVE: Where to serve static files\r\nSTATIC_URL = \"/static/\"\r\n```\r\n\r\nThis also changes our `.gitignore` to match our new settings. Since all of our files will be collected by Django and placed into the `static` folder, we can tell git to ignore this folder. \r\n\r\nWe can also ignore the `staticfiles/dist/` folder if we have an asset building pipeline and need a place to store the intermediate files. \r\n\r\n```unixconfig\r\n#.gitignore\r\nstatic/\r\nstaticfiles/dist/\r\n# Optionally, to universally ignore all 'dist' directories:\r\n# dist\r\n```\r\n",
				"date_published": "2024-04-30T22:07:44-05:00",
				"url": "https://micro.webology.dev/2024/04/30/everyone-struggles-with.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/29/alphabet-has-never.html",
				"title": "üí∏ Alphabet has never been more profitable",
				"content_html": "<p>This <a href=\"https://news.ycombinator.com/item?id=40176338\">Hacker News comment</a> is quite the deep cut about <a href=\"https://in.mashable.com/tech/74212/sundar-pichai-led-google-layoffs-entire-python-team-and-offshores-work-to-munich-programmers-are-wor\">Google&rsquo;s recent layoff/firing of the entire Python Foundation team</a>.¬†</p>\n<p>This happened the same day Alphabet reported <a href=\"https://www.cnbc.com/2024/04/25/alphabet-set-to-report-first-quarter-results-after-market-close.html\">$80.54 billion in revenue</a>.¬† ¬†</p>\n<blockquote>\n<p>¬†in¬†addition to contributing to upstream¬†python, we</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>maintained a stable version of¬†python¬†within¬†google,¬†and¬†made sure that¬†everything in the monorepo worked with it.¬†in¬†my time on the¬†team¬†we moved from 2.7 to 3.6, then incrementally to 3.11, each update taking months to over a year because the rule at¬†google¬†is if you check any code in, you are responsible for every single breakage it causes</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>maintained tools to keep thousands of¬†third party¬†packages constantly updated from their¬†open source¬†versions, with patch queues for the ones that needed¬†google-specific¬†changes</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>had highly customised versions of tools like¬†pylint¬†and black, targeted to¬†google&rsquo;s¬†style guide and overall codebase</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>contributed to pybind11, and maintained tools for c++ integration</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>developed and maintained build system rules for¬†python, including¬†a large¬†effort to move¬†python¬†rules to pure¬†starlark¬†code rather than having them entangled in the blaze/bazel core engine</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>developed and maintained a¬†typechecker¬†(pytype) that would do inference on code without type¬†annotations,¬†and work over¬†very large¬†projects with a one-file-at-a-time architecture (this was my primary job at¬†google, ama)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>performed automated refactorings across hundreds of millions of lines of code</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<p>¬†and¬†that¬†was just the dev portion of our jobs.¬†we¬†also acted as a help desk¬†of sorts¬†for¬†python¬†users at¬†google, helping troubleshoot tricky¬†issues,¬†and point newcomers in the right direction.¬†plus¬†we¬†worked with a lot of other teams, including the machine learning and AI teams, the colaboratory and IDE teams, teams like¬†protobuf¬†that integrated with and generated¬†python¬†bindings, teams like¬†google cloud¬†who wanted to offer¬†python¬†runtimes to their customers, teams like youtube who had¬†an unusually large¬†system built in python and needed to do extraordinary things to keep it performant and maintainable.</p>\n</blockquote>\n<blockquote>\n<p>¬†</p>\n</blockquote>\n<blockquote>\n<p>¬†and¬†we¬†did all this for years with fewer than 10 people, most of whom loved the work and the team so much that we¬†just¬†stayed on it for years.¬†also, despite the understaffing, we had managers who were extremely good about maintaining work/life balance and the &ldquo;marathon, not sprint&rdquo; approach to work. as¬†i¬†said in another comment, it&rsquo;s the best job¬†i&rsquo;ve¬†ever had, and¬†i&rsquo;ll¬†miss it deeply.</p>\n</blockquote>\n<p>They have never been more profitable, made more money, or cared less about their employees and giving back to the communities that got them there.¬†If I had worked at Google, I would not have been comfortable continuing to work there.¬†</p>\n<p>I plan to keep de-Googling, which is going to hurt. Several friends shared why they can&rsquo;t cut ties with their products. I get it, but that is a sign of an unhealthy monopoly.¬†</p>\n<p>I pay for YouTube TV and YouTube Premium as everyone else does, but I&rsquo;m starting with the business tools. I&rsquo;d rather pay Zoom than use Google Video. I stopped using Chrome.¬†</p>\n<p>Gmail is the¬†hardest¬†service to separate from because it&rsquo;s also an identity service. I&rsquo;m using it less and less until it&rsquo;s only an identity service. I have &gt;2k websites registered with my Gmail address, which could take years to clean up. I don&rsquo;t need to pay for extra storage space, and I&rsquo;m wondering if Google Docs is doing anything for me to pay for.¬†</p>\n<p>So, while it will be harder to stop using Google Products than it should be, the first step is admitting the problem and then working on it. Friends, we all have work to do.</p>\n",
				"content_text": "This [Hacker News comment](https://news.ycombinator.com/item?id=40176338) is quite the deep cut about [Google's recent layoff/firing of the entire Python Foundation team](https://in.mashable.com/tech/74212/sundar-pichai-led-google-layoffs-entire-python-team-and-offshores-work-to-munich-programmers-are-wor).¬†\n\nThis happened the same day Alphabet reported [$80.54 billion in revenue](https://www.cnbc.com/2024/04/25/alphabet-set-to-report-first-quarter-results-after-market-close.html).¬† ¬†\n\n>¬†in¬†addition to contributing to upstream¬†python, we\n\n> * maintained a stable version of¬†python¬†within¬†google,¬†and¬†made sure that¬†everything in the monorepo worked with it.¬†in¬†my time on the¬†team¬†we moved from 2.7 to 3.6, then incrementally to 3.11, each update taking months to over a year because the rule at¬†google¬†is if you check any code in, you are responsible for every single breakage it causes\n\n>¬†\n\n> * maintained tools to keep thousands of¬†third party¬†packages constantly updated from their¬†open source¬†versions, with patch queues for the ones that needed¬†google-specific¬†changes\n\n>¬†\n\n> * had highly customised versions of tools like¬†pylint¬†and black, targeted to¬†google's¬†style guide and overall codebase\n\n>¬†\n\n> * contributed to pybind11, and maintained tools for c++ integration\n\n>¬†\n\n> * developed and maintained build system rules for¬†python, including¬†a large¬†effort to move¬†python¬†rules to pure¬†starlark¬†code rather than having them entangled in the blaze/bazel core engine\n\n>¬†\n\n> * developed and maintained a¬†typechecker¬†(pytype) that would do inference on code without type¬†annotations,¬†and work over¬†very large¬†projects with a one-file-at-a-time architecture (this was my primary job at¬†google, ama)\n\n>¬†\n\n> * performed automated refactorings across hundreds of millions of lines of code\n\n>¬†\n\n>¬†and¬†that¬†was just the dev portion of our jobs.¬†we¬†also acted as a help desk¬†of sorts¬†for¬†python¬†users at¬†google, helping troubleshoot tricky¬†issues,¬†and point newcomers in the right direction.¬†plus¬†we¬†worked with a lot of other teams, including the machine learning and AI teams, the colaboratory and IDE teams, teams like¬†protobuf¬†that integrated with and generated¬†python¬†bindings, teams like¬†google cloud¬†who wanted to offer¬†python¬†runtimes to their customers, teams like youtube who had¬†an unusually large¬†system built in python and needed to do extraordinary things to keep it performant and maintainable.\n\n>¬†\n\n>¬†and¬†we¬†did all this for years with fewer than 10 people, most of whom loved the work and the team so much that we¬†just¬†stayed on it for years.¬†also, despite the understaffing, we had managers who were extremely good about maintaining work/life balance and the \"marathon, not sprint\" approach to work. as¬†i¬†said in another comment, it's the best job¬†i've¬†ever had, and¬†i'll¬†miss it deeply.\n\nThey have never been more profitable, made more money, or cared less about their employees and giving back to the communities that got them there.¬†If I had worked at Google, I would not have been comfortable continuing to work there.¬†\n\nI plan to keep de-Googling, which is going to hurt. Several friends shared why they can't cut ties with their products. I get it, but that is a sign of an unhealthy monopoly.¬†\n\nI pay for YouTube TV and YouTube Premium as everyone else does, but I'm starting with the business tools. I'd rather pay Zoom than use Google Video. I stopped using Chrome.¬†\n\nGmail is the¬†hardest¬†service to separate from because it's also an identity service. I'm using it less and less until it's only an identity service. I have >2k websites registered with my Gmail address, which could take years to clean up. I don't need to pay for extra storage space, and I'm wondering if Google Docs is doing anything for me to pay for.¬†\n\nSo, while it will be harder to stop using Google Products than it should be, the first step is admitting the problem and then working on it. Friends, we all have work to do.\n",
				"date_published": "2024-04-29T12:48:27-05:00",
				"url": "https://micro.webology.dev/2024/04/29/alphabet-has-never.html",
				"tags": ["Enshittification"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/28/djangocon-us-talks.html",
				"title": "üíö DjangoCon US Talks I'd Like to See 2024 Edition",
				"content_html": "<p>Continuing in my tradition of <a href=\"https://jefftriplett.com/2023/djangocon-us-talks-i-d-like-to-see-2023-edition/\">2023</a>, <a href=\"https://jefftriplett.com/2022/djangocon-us-talks-i-d-like-to-see-2022-edition/\">2022</a>, <a href=\"https://jefftriplett.com/2018/djangocon-us-talks-i-d-like-to-see-2018-edition/\">2018</a>, <a href=\"https://jefftriplett.com/2017/django-talks-id-like-to-see/\">2017</a>, and <a href=\"https://jefftriplett.com/2016/djangocon-us-talks-id-like-to-see/\">2016</a> &ldquo;DjangoCon US Talks I&rsquo;d like to see&rdquo; annual posts, here is my update for 2024.</p>\n<p>This year&rsquo;s <em>updated</em> talk and tutorial deadline is <a href=\"https://time.is/1200PM_29_Apr_2024_in_New_York?DjangoCon_US_2024_CFP_closes\">April 29, 2024, at 12 PM EDT</a>, but check the official <a href=\"https://2024.djangocon.us/speaking/\">speaking page</a> for updates and <a href=\"https://pretalx.com/djangocon-us-2024/cfp\">submit your proposal.</a></p>\n<p>Before you read mine, I suggest you check out <a href=\"https://katherinemichel.github.io/portfolio/djangocon-us-2024-topics-inspiration-list.html\">Kati Michel&rsquo;s</a> and <a href=\"https://winstel.dev/2024/03/01/talk-ideas-for-dcus-24/\">Drew Winstel&rsquo;s</a> list of talk ideas too.</p>\n<h2 id=\"modern-django\">Modern Django</h2>\n<p>Three or four years ago, our Django stack was optimized to leverage the Django ORM to tie together a mix of authentication and REST API using the Django REST Framework. The front end was entirely buried by JavaScript, which printed HTML into your browser, and the HTML was entirely hidden away. What used to take a developer hours and days now took weeks because there were so many layers and abstractions to wade through.</p>\n<p>Then it all started to change a few years ago, and we learned that we don&rsquo;t need the additional weeks of development time to use JS/JSON layers for which we may never build that iOS/Android app. We don&rsquo;t need React for contact us forms, and 90% of our web tasks could be built in a day.</p>\n<p>The theme I&rsquo;d like to see more of this year is doing more with HTML instead of hiding it behind layers of JavaScript.</p>\n<p>I want to see lots of talks about technologies like HTMx and frameworks like Tailwind CSS, which are firmly centered inside HTML, instead of trying to avoid using HTML.</p>\n<h2 id=\"the-two-non-python-languages-we-are-starting-to-talk-about\">The two non-Python languages we are starting to talk about</h2>\n<p>Rust and WASM are starting to change everything. How do they fit in with Django and Python?</p>\n<h2 id=\"theme-rust\">Theme: Rust</h2>\n<p>The Rust language is shaping the landscape of Python productivity in ways that none of us could have predicted. Tools written in Rust are significantly faster and are gaining steam.</p>\n<ul>\n<li>What can a Django developer take from Rust?</li>\n<li>How do I develop a package for Django and Python that uses Rust?</li>\n<li>How libraries like PyDantic are speeding up development (Django Ninja uses it)</li>\n</ul>\n<h2 id=\"always-nice-to-have-talks\">Always nice to have talks</h2>\n<ul>\n<li>What&rsquo;s new in Django 5.x?</li>\n<li>What&rsquo;s new in Python 3.13?</li>\n<li>What&rsquo;s new in Wagtail CMS and Django CMS?</li>\n<li>Where do we want the DSF to go?</li>\n<li>How to contribute to Django or third party projects</li>\n</ul>\n<h2 id=\"embracing-html-and-lightweight-front-end-frameworks\">Embracing HTML and lightweight front-end frameworks</h2>\n<p>Last year, I predicted it would be the year of &ldquo;you probably don&rsquo;t need JavaScript,&rdquo; and I still feel good about that. We saw <a href=\"https://htmx.org\">HTMx</a> take off, but I think Django is still underserved and could benefit from more talks:</p>\n<ul>\n<li>Django 5 added more granular template/form styling , and we could use a talk that deep dives</li>\n<li>Using Django forms with htmx</li>\n<li>Using search with htmx</li>\n<li>Whatever cool things you are doing that I didn&rsquo;t mention here</li>\n</ul>\n<h2 id=\"panel-ideas\">Panel ideas</h2>\n<ul>\n<li>Django Fellows panel</li>\n<li>Django content creators' panel</li>\n<li>Django apps and community - It would be nice to hear from the more significant apps and community projects.</li>\n</ul>\n<h2 id=\"wagtail-cms\">Wagtail CMS</h2>\n<ul>\n<li>How do I migrate from WordPress to Wagtail CMS?</li>\n<li>How to properly test with Wagtail CMS for me, because I struggle with it</li>\n</ul>\n<h2 id=\"talks-i-dont-want-to-see\">Talks I don&rsquo;t want to see</h2>\n<p>I find myself at a weird crossroads because I have never discouraged certain topics, but we need to talk more openly about what is bad for our industry and the world instead of avoiding it. Otherwise, we are left with dead air, and people assume we are all on the same page.</p>\n<p>To kick us off, there are talks and topics that I do not want to see:</p>\n<ul>\n<li>BAD AI talks and ones that spread more FUD into the community</li>\n<li>crypto talks</li>\n<li>why technology sucks</li>\n<li>proposing a talk because you dislike or even hate something</li>\n<li>bashing other communities</li>\n<li>bashing our communities</li>\n<li>lightning talks disguised as questions (not so much a talk idea, but this has been on my mind for a while)</li>\n</ul>\n<p>So please, <strong>none</strong> of these:</p>\n<ul>\n<li>The future of Django depends on AI</li>\n<li>Why tech needs AI</li>\n<li>Crypto talks</li>\n<li>Your product unless you are sponsoring.</li>\n</ul>\n<h2 id=\"good-luck\">Good luck</h2>\n<p>You have less than a day, but between my list, <a href=\"https://katherinemichel.github.io/portfolio/djangocon-us-2024-topics-inspiration-list.html\">Kati&rsquo;s list</a>, and <a href=\"https://winstel.dev/2024/03/01/talk-ideas-for-dcus-24/\">Drew&rsquo;s list</a> you have no excuses for saying you didn&rsquo;t know what to talk about at DjangoCon US this year.</p>\n<p>Good luck!</p>\n",
				"content_text": "Continuing in my tradition of [2023](https://jefftriplett.com/2023/djangocon-us-talks-i-d-like-to-see-2023-edition/), [2022](https://jefftriplett.com/2022/djangocon-us-talks-i-d-like-to-see-2022-edition/), [2018](https://jefftriplett.com/2018/djangocon-us-talks-i-d-like-to-see-2018-edition/), [2017](https://jefftriplett.com/2017/django-talks-id-like-to-see/), and [2016](https://jefftriplett.com/2016/djangocon-us-talks-id-like-to-see/) \"DjangoCon US Talks I'd like to see\" annual posts, here is my update for 2024.\n\nThis year's *updated* talk and tutorial deadline is [April 29, 2024, at 12 PM EDT](https://time.is/1200PM_29_Apr_2024_in_New_York?DjangoCon_US_2024_CFP_closes), but check the official [speaking page](https://2024.djangocon.us/speaking/) for updates and [submit your proposal.](https://pretalx.com/djangocon-us-2024/cfp) \n\nBefore you read mine, I suggest you check out [Kati Michel's](https://katherinemichel.github.io/portfolio/djangocon-us-2024-topics-inspiration-list.html) and [Drew Winstel's](https://winstel.dev/2024/03/01/talk-ideas-for-dcus-24/) list of talk ideas too.\n\n## Modern Django\n\nThree or four years ago, our Django stack was optimized to leverage the Django ORM to tie together a mix of authentication and REST API using the Django REST Framework. The front end was entirely buried by JavaScript, which printed HTML into your browser, and the HTML was entirely hidden away. What used to take a developer hours and days now took weeks because there were so many layers and abstractions to wade through. \n\nThen it all started to change a few years ago, and we learned that we don't need the additional weeks of development time to use JS/JSON layers for which we may never build that iOS/Android app. We don't need React for contact us forms, and 90% of our web tasks could be built in a day. \n\nThe theme I'd like to see more of this year is doing more with HTML instead of hiding it behind layers of JavaScript. \n\nI want to see lots of talks about technologies like HTMx and frameworks like Tailwind CSS, which are firmly centered inside HTML, instead of trying to avoid using HTML. \n\n## The two non-Python languages we are starting to talk about\n\nRust and WASM are starting to change everything. How do they fit in with Django and Python? \n\n## Theme: Rust\n\nThe Rust language is shaping the landscape of Python productivity in ways that none of us could have predicted. Tools written in Rust are significantly faster and are gaining steam. \n\n - What can a Django developer take from Rust? \n - How do I develop a package for Django and Python that uses Rust? \n - How libraries like PyDantic are speeding up development (Django Ninja uses it)\n\n## Always nice to have talks\n\n - What's new in Django 5.x? \n - What's new in Python 3.13? \n - What's new in Wagtail CMS and Django CMS? \n - Where do we want the DSF to go? \n - How to contribute to Django or third party projects\n\n## Embracing HTML and lightweight front-end frameworks\n\nLast year, I predicted it would be the year of \"you probably don't need JavaScript,\" and I still feel good about that. We saw [HTMx](https://htmx.org) take off, but I think Django is still underserved and could benefit from more talks: \n\n - Django 5 added more granular template/form styling , and we could use a talk that deep dives \n - Using Django forms with htmx\n - Using search with htmx\n - Whatever cool things you are doing that I didn't mention here\n\n## Panel ideas\n\n - Django Fellows panel\n - Django content creators' panel\n - Django apps and community - It would be nice to hear from the more significant apps and community projects.\n\n## Wagtail CMS\n\n - How do I migrate from WordPress to Wagtail CMS?\n - How to properly test with Wagtail CMS for me, because I struggle with it\n\n## Talks I don't want to see\n\nI find myself at a weird crossroads because I have never discouraged certain topics, but we need to talk more openly about what is bad for our industry and the world instead of avoiding it. Otherwise, we are left with dead air, and people assume we are all on the same page. \n\nTo kick us off, there are talks and topics that I do not want to see:\n\n - BAD AI talks and ones that spread more FUD into the community\n - crypto talks\n - why technology sucks\n - proposing a talk because you dislike or even hate something\n - bashing other communities\n - bashing our communities\n - lightning talks disguised as questions (not so much a talk idea, but this has been on my mind for a while)\n\nSo please, **none** of these: \n\n - The future of Django depends on AI\n - Why tech needs AI\n - Crypto talks\n - Your product unless you are sponsoring.\n\n## Good luck\n\nYou have less than a day, but between my list, [Kati's list](https://katherinemichel.github.io/portfolio/djangocon-us-2024-topics-inspiration-list.html), and [Drew's list](https://winstel.dev/2024/03/01/talk-ideas-for-dcus-24/) you have no excuses for saying you didn't know what to talk about at DjangoCon US this year. \n\nGood luck! \n",
				"date_published": "2024-04-28T19:45:13-05:00",
				"url": "https://micro.webology.dev/2024/04/28/djangocon-us-talks.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/27/drop-google-chrome.html",
				"title": "üî• Drop Google Chrome and try out Vivaldi for a week, I dare you ",
				"content_html": "<p>Last year, I switched to the <a href=\"https://vivaldi.com\">Vivaldi</a> web browser because I read a few peer reviews that pointed out that Vivaldi is a better Google Chrome web browser than Chrome.</p>\n<p>This week, Vivaldi rolled out a <a href=\"https://help.vivaldi.com/desktop/tabs/memory-saver/\">new memory-saver feature</a> that I&rsquo;m excited to try out. It lets <em>you</em> decide how long to keep a tab in memory before hibernating and reclaiming the memory dedicated to the tab.</p>\n<p>Vivaldi&rsquo;s memory and CPU usage are already night and day better than Google Chrome. For instance, I can have one Chrome window with three tabs open ironically for Google Gmail, Google Calendar, and Google Docs, which eat up more resources than 2 to 4 Vivaldi windows open with countless tabs.</p>\n<p>As it turns out, all that tracking and spyware eats up a ton of RAM and CPU. Who knew? ü§∑</p>\n<p>All of my Chrome Extensions work on Vivaldi using the Chrome Store except for my custom Django News &ldquo;newtab&rdquo; extension that I wrote. I suspect it&rsquo;s me, and I probably need 15 minutes to troubleshoot it.</p>\n<p>Instead, I&rsquo;m nudging you to drop Google Chrome and try out <a href=\"https://vivaldi.com\">Vivaldi</a> because several of my Google friends were fired this week despite <a href=\"https://www.forbes.com/sites/dereksaul/2024/04/25/google-soars-toward-record-2-trillion-valuation-on-earnings/?sh=536f86313c4d\">the company never being more profitable</a>.</p>\n<p>ChatGPT told me that Alphabet/Google are worth enough to give everyone on Earth $253.16, which feels like a fair tradeoff. I&rsquo;d like mine to be a check because I do not trust Google with my bank details, nor should you.</p>\n<h2 id=\"what-i-dont-like-about-vivaldi\">What I don&rsquo;t like about Vivaldi</h2>\n<p>Vivaldi is outstanding and could be better.</p>\n<p>The first thing you&rsquo;ll want to do is access the &ldquo;Settings &raquo; Address Bar &raquo; Drop-Down Menu Priority&rdquo; and uncheck the &ldquo;Direct Match&rdquo; option.</p>\n<p>The Direct Match option tends to match from &ldquo;Brand websites,&rdquo; which is one of the ways Vivaldi makes money, but it&rsquo;s not the only way. When Direct Match is checked, I get recommendations for Macy&rsquo;s instead of Mastodon until I discovered how to turn it off.</p>\n<p>Check out <a href=\"https://vivaldi.com/blog/vivaldi-business-model/\">What&rsquo;s Vivaldi&rsquo;s business model?</a> to better understand how they work.</p>\n<p>I would love to see Vivaldi let me PAY THEM MONEY annually for a solid web browser that aligns with my interests. Until then, I&rsquo;m OK with them getting an affiliate cut from eBay or Amazon when I use their bookmarks.</p>\n<h2 id=\"why-not-firefox\">Why not Firefox?</h2>\n<p>I hear this often, and I won&rsquo;t talk anyone down from their favorite browser unless it&rsquo;s Chrome or whatever Microsoft calls their latest hobby browser this decade. ü§∑</p>\n<p>Firefox doesn&rsquo;t work well for me, and I say this because I have used it for over a decade. I also don&rsquo;t trust their parent company because of where their money comes from and the various mistakes they <a href=\"https://krebsonsecurity.com/2024/03/mozilla-drops-onerep-after-ceo-admits-to-running-people-search-networks/\">continue to make</a>.</p>\n<p>If Firefox sparks joy, I encourage you to use it. I continue to get &ldquo;the emperor has no clothes&rdquo; vibes from their company, even when I want to like their products.</p>\n<h2 id=\"share-your-thoughts\">Share your thoughts</h2>\n<p>If you have thoughts, I&rsquo;m on <a href=\"https://mastodon.social/@webology/112343674364725570\">Mastodon</a>, and I&rsquo;d love to know what config options worked best for you.</p>\n<!-- raw HTML omitted -->\n<p>#Enshittification</p>\n",
				"content_text": "Last year, I switched to the [Vivaldi](https://vivaldi.com) web browser because I read a few peer reviews that pointed out that Vivaldi is a better Google Chrome web browser than Chrome. \n\nThis week, Vivaldi rolled out a [new memory-saver feature](https://help.vivaldi.com/desktop/tabs/memory-saver/) that I'm excited to try out. It lets *you* decide how long to keep a tab in memory before hibernating and reclaiming the memory dedicated to the tab. \n\nVivaldi's memory and CPU usage are already night and day better than Google Chrome. For instance, I can have one Chrome window with three tabs open ironically for Google Gmail, Google Calendar, and Google Docs, which eat up more resources than 2 to 4 Vivaldi windows open with countless tabs. \n\nAs it turns out, all that tracking and spyware eats up a ton of RAM and CPU. Who knew? ü§∑ \n\nAll of my Chrome Extensions work on Vivaldi using the Chrome Store except for my custom Django News \"newtab\" extension that I wrote. I suspect it's me, and I probably need 15 minutes to troubleshoot it. \n\nInstead, I'm nudging you to drop Google Chrome and try out [Vivaldi](https://vivaldi.com) because several of my Google friends were fired this week despite [the company never being more profitable](https://www.forbes.com/sites/dereksaul/2024/04/25/google-soars-toward-record-2-trillion-valuation-on-earnings/?sh=536f86313c4d). \n\nChatGPT told me that Alphabet/Google are worth enough to give everyone on Earth $253.16, which feels like a fair tradeoff. I'd like mine to be a check because I do not trust Google with my bank details, nor should you. \n\n## What I don't like about Vivaldi\n\nVivaldi is outstanding and could be better. \n\nThe first thing you'll want to do is access the \"Settings >> Address Bar >> Drop-Down Menu Priority\" and uncheck the \"Direct Match\" option. \n\nThe Direct Match option tends to match from \"Brand websites,\" which is one of the ways Vivaldi makes money, but it's not the only way. When Direct Match is checked, I get recommendations for Macy's instead of Mastodon until I discovered how to turn it off. \n\nCheck out [What's Vivaldi's business model?](https://vivaldi.com/blog/vivaldi-business-model/) to better understand how they work. \n\nI would love to see Vivaldi let me PAY THEM MONEY annually for a solid web browser that aligns with my interests. Until then, I'm OK with them getting an affiliate cut from eBay or Amazon when I use their bookmarks. \n\n## Why not Firefox? \n\nI hear this often, and I won't talk anyone down from their favorite browser unless it's Chrome or whatever Microsoft calls their latest hobby browser this decade. ü§∑\n\nFirefox doesn't work well for me, and I say this because I have used it for over a decade. I also don't trust their parent company because of where their money comes from and the various mistakes they [continue to make](https://krebsonsecurity.com/2024/03/mozilla-drops-onerep-after-ceo-admits-to-running-people-search-networks/). \n\nIf Firefox sparks joy, I encourage you to use it. I continue to get \"the emperor has no clothes\" vibes from their company, even when I want to like their products. \n\n## Share your thoughts\n\nIf you have thoughts, I'm on [Mastodon](https://mastodon.social/@webology/112343674364725570), and I'd love to know what config options worked best for you. \n\n<iframe src=\"https://mastodon.social/@webology/112343674364725570/embed\" class=\"mastodon-embed\" style=\"max-width: 100%; border: 0\" width=\"400\" allowfullscreen=\"allowfullscreen\"></iframe><script src=\"https://mastodon.social/embed.js\" async=\"async\"></script> \n\n#Enshittification\n",
				"date_published": "2024-04-27T09:33:47-05:00",
				"url": "https://micro.webology.dev/2024/04/27/drop-google-chrome.html",
				"tags": ["Enshittification"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/26/on-trackpads-i.html",
				"title": "üñ±Ô∏è On Trackballs. I need one. ü™§",
				"content_html": "<p>At night, when I&rsquo;m couch computing after everyone goes to bed, I use one of these XL adjustable lap desks with my MacBook Pro (2019 model) and a cheap, wired external mouse that I love using. <a href=\"https://camelcamelcamel.com/product/B0B4F96VCD\">camelcamelcamel.com/product/B&hellip;</a> This desk is wonderful, and I highly recommend it. üòò</p>\n<p>However, while it&rsquo;s the perfect height/location for typing, the built-in trackpad is more problematic to use to the point I don&rsquo;t use it.</p>\n<p>So, with these factors in mind, I&rsquo;d like to know if anyone has an external Trackball they want that would pair well with this setup. I&rsquo;m open to all suggestions and eager to hear your experiences.¬†</p>\n<p>Historically, I have had fantastic luck with Logitech keyboards and various products over the years, but I&rsquo;m a little put off by their recent &ldquo;Put an AI on It&rdquo; trend. So I&rsquo;m not against it, but I&rsquo;m not excited about it.¬†</p>\n<p>Do you have any recommendations¬†for a good¬†trackball that&rsquo;s not Apple&rsquo;s Magic Trackpad?</p>\n",
				"content_text": "At night, when I'm couch computing after everyone goes to bed, I use one of these XL adjustable lap desks with my MacBook Pro (2019 model) and a cheap, wired external mouse that I love using. [camelcamelcamel.com/product/B...](https://camelcamelcamel.com/product/B0B4F96VCD) This desk is wonderful, and I highly recommend it. üòò\n\nHowever, while it's the perfect height/location for typing, the built-in trackpad is more problematic to use to the point I don't use it.\n\nSo, with these factors in mind, I'd like to know if anyone has an external Trackball they want that would pair well with this setup. I'm open to all suggestions and eager to hear your experiences.¬†\n\nHistorically, I have had fantastic luck with Logitech keyboards and various products over the years, but I'm a little put off by their recent \"Put an AI on It\" trend. So I'm not against it, but I'm not excited about it.¬†\n\nDo you have any recommendations¬†for a good¬†trackball that's not Apple's Magic Trackpad?\n",
				"date_published": "2024-04-26T20:12:50-05:00",
				"url": "https://micro.webology.dev/2024/04/26/on-trackpads-i.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/25/on-open-sourcing.html",
				"title": "üññ On Open Sourcing DOS 4",
				"content_html": "<p>My first PC as a kid ran MS-DOS 4, so seeing today&rsquo;s news on <a href=\"https://www.hanselman.com/blog/open-sourcing-dos-4\">Open Sourcing DOS 4</a> takes me back.</p>\n<blockquote>\n<p>Today, in partnership with IBM and in the spirit of open innovation, we&rsquo;re releasing the source code to MS-DOS 4.00 under the MIT license. There&rsquo;s a somewhat complex and fascinating history behind the 4.0 versions of DOS, as Microsoft partnered with IBM for portions of the code but also created a branch of DOS called Multitasking DOS that did not see a wide release.</p>\n</blockquote>\n<p>I played with LOGO and Applesoft BASIC on my grade school&rsquo;s Apple IIe, but <a href=\"https://en.wikipedia.org/wiki/GW-BASIC\">GW-BASIC</a> shipped with MS-DOS 4 and was the first programming language that I knew inside and out.</p>\n<p>I struggled at times because book and magazine examples were written for BASICA, which mostly worked, but it sometimes took some extra fiddling.</p>\n<p>MS-DOS 5.0 exposed me to <a href=\"https://en.wikipedia.org/wiki/QBasic\">QBasic</a>, which was the first programming language I worked with that had an <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\">IDE</a>.</p>\n<p>I fondly remember writing code on that old 386 and playing DOS games. I remember thinking there would eventually be no limits between the code and what I saw was possible on Star Trek: The Next Generation just a few years later.</p>\n<p>Looking back, we aren&rsquo;t there yet, but we are closer to the Star Trek computer and Holodeck than to the technology I grew up in.</p>\n",
				"content_text": "My first PC as a kid ran MS-DOS 4, so seeing today's news on [Open Sourcing DOS 4](https://www.hanselman.com/blog/open-sourcing-dos-4) takes me back. \r\n\r\n> Today, in partnership with IBM and in the spirit of open innovation, we're releasing the source code to MS-DOS 4.00 under the MIT license. There's a somewhat complex and fascinating history behind the 4.0 versions of DOS, as Microsoft partnered with IBM for portions of the code but also created a branch of DOS called Multitasking DOS that did not see a wide release.\r\n\r\nI played with LOGO and Applesoft BASIC on my grade school's Apple IIe, but [GW-BASIC](https://en.wikipedia.org/wiki/GW-BASIC) shipped with MS-DOS 4 and was the first programming language that I knew inside and out. \r\n\r\nI struggled at times because book and magazine examples were written for BASICA, which mostly worked, but it sometimes took some extra fiddling. \r\n\r\nMS-DOS 5.0 exposed me to [QBasic](https://en.wikipedia.org/wiki/QBasic), which was the first programming language I worked with that had an [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment). \r\n\r\nI fondly remember writing code on that old 386 and playing DOS games. I remember thinking there would eventually be no limits between the code and what I saw was possible on Star Trek: The Next Generation just a few years later. \r\n\r\nLooking back, we aren't there yet, but we are closer to the Star Trek computer and Holodeck than to the technology I grew up in. \n",
				"date_published": "2024-04-25T17:05:30-05:00",
				"url": "https://micro.webology.dev/2024/04/25/on-open-sourcing.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/24/office-hours-on.html",
				"title": "üìÖ Office Hours on April 26th",
				"content_html": "<p><strong>Please note:</strong> I moved the time up 30 minutes.</p>\n<p>üìÖ I&rsquo;m hosting Office Hours this Friday, April 26th, 2024, from <em>2:00 PM to 4:30 PM Central Time</em> (US and Canada). If you need to convert it to your local time zone, use this <a href=\"https://time.is/0200PM_26_Apr_2024_in_CT?Jeff%27s_Office_Hours\">handy link</a>.</p>\n<p>‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.</p>\n<p>üôè As always, everyone is welcome to join, whether you&rsquo;re a regular attendee or joining for the first time.</p>\n<p>‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you&rsquo;ll find the Zoom link ‚ö†Ô∏è</p>\n<p>I look forward to seeing everyone.</p>\n",
				"content_text": "**Please note:** I moved the time up 30 minutes. \n\nüìÖ I'm hosting Office Hours this Friday, April 26th, 2024, from *2:00 PM to 4:30 PM Central Time* (US and Canada). If you need to convert it to your local time zone, use this [handy link](https://time.is/0200PM_26_Apr_2024_in_CT?Jeff%27s_Office_Hours). \n\n‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.\n\nüôè As always, everyone is welcome to join, whether you're a regular attendee or joining for the first time.\n\n‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you'll find the Zoom link ‚ö†Ô∏è\n\nI look forward to seeing everyone. \n",
				"date_published": "2024-04-24T19:52:52-05:00",
				"url": "https://micro.webology.dev/2024/04/24/office-hours-on.html",
				"tags": ["Office Hours"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/23/github-actions-cleaning.html",
				"title": "üê≥ GitHub Actions Cleaning up old Docker container images",
				"content_html": "<p>If you use GitHub Actions to build and deploy Docker container images, you quickly learn that deleting old container images you no longer need is a huge pain. I don&rsquo;t know why GitHub doesn&rsquo;t make this easier, but they have a reusable workflow we can use to help prune and clean up old container images.</p>\n<p>The <a href=\"https://github.com/actions/delete-package-versions\">delete-package-versions</a> will let you set a number to only keep the last x-known good images, with some other valuable options like deleting untagged container images.</p>\n<p>I prefer to write one <a href=\"https://docs.github.com/en/actions/using-workflows/reusing-workflows\">reusable workflow</a>, which I can call from my standard CI build and deploy pipeline, along with a workflow_dispatch action we can call whenever we want.</p>\n<p>This workflow is a mouthful but wraps the <code>delete-package-versions</code> action and gives us a few configurable options to pass. Having a default value on <code>min_versions_to_keep</code> is nice because it is a default when calling this workflow from other locations.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yml\" data-lang=\"yml\"><span style=\"color:#75715e\"># .github/workflows/delete-container-versions.yml</span>\n<span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Delete Untagged Container Versions</span>\n\n<span style=\"color:#f92672\">on</span>:\n  <span style=\"color:#f92672\">workflow_call</span>:\n    <span style=\"color:#f92672\">inputs</span>:\n      <span style=\"color:#f92672\">package_name</span>:\n        <span style=\"color:#f92672\">required</span>: <span style=\"color:#66d9ef\">true</span>\n        <span style=\"color:#f92672\">type</span>: <span style=\"color:#ae81ff\">string</span>\n      <span style=\"color:#f92672\">package_type</span>:\n        <span style=\"color:#f92672\">required</span>: <span style=\"color:#66d9ef\">true</span>\n        <span style=\"color:#f92672\">type</span>: <span style=\"color:#ae81ff\">string</span>\n      <span style=\"color:#f92672\">min_versions_to_keep</span>:\n        <span style=\"color:#f92672\">required</span>: <span style=\"color:#66d9ef\">false</span>\n        <span style=\"color:#f92672\">type</span>: <span style=\"color:#ae81ff\">number</span>\n        <span style=\"color:#f92672\">default</span>: <span style=\"color:#ae81ff\">30</span>\n\n<span style=\"color:#f92672\">jobs</span>:\n  <span style=\"color:#f92672\">delete_versions</span>:\n    <span style=\"color:#f92672\">runs-on</span>: <span style=\"color:#ae81ff\">ubuntu-latest</span>\n    <span style=\"color:#f92672\">steps</span>:\n      - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Delete all untagged container versions</span>\n        <span style=\"color:#f92672\">uses</span>: <span style=\"color:#ae81ff\">actions/delete-package-versions@v5</span>\n        <span style=\"color:#f92672\">with</span>:\n          <span style=\"color:#f92672\">delete-only-untagged-versions</span>: <span style=\"color:#e6db74\">&#39;false&#39;</span>\n          <span style=\"color:#f92672\">min-versions-to-keep</span>: <span style=\"color:#ae81ff\">${{ inputs.min_versions_to_keep }}</span>\n          <span style=\"color:#f92672\">package-name</span>: <span style=\"color:#ae81ff\">${{ inputs.package_name }}</span>\n          <span style=\"color:#f92672\">package-type</span>: <span style=\"color:#ae81ff\">${{ inputs.package_type }}</span>\n</code></pre></div><p>Our <code>cleanup.yml</code> is set up as a workflow_dispatch, allowing us to call our <code>delete-container-versions</code> job whenever we want.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yml\" data-lang=\"yml\"><span style=\"color:#75715e\"># .github/workflows/cleanup.yml</span>\n<span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Delete Untagged Container Versions</span>\n\n<span style=\"color:#f92672\">on</span>:\n  <span style=\"color:#f92672\">workflow_dispatch</span>:\n\n<span style=\"color:#f92672\">jobs</span>:\n  <span style=\"color:#f92672\">delete-container-versions</span>:\n    <span style=\"color:#f92672\">uses</span>: <span style=\"color:#ae81ff\">.github/workflows/delete-container-versions.yml</span>\n    <span style=\"color:#f92672\">with</span>:\n      <span style=\"color:#f92672\">package_name</span>: <span style=\"color:#e6db74\">&#39;your-docker-container-package-name&#39;</span>\n      <span style=\"color:#f92672\">package_type</span>: <span style=\"color:#e6db74\">&#39;container&#39;</span>\n</code></pre></div><p>I&rsquo;m embarrassed to admit I had several repos with over 500 or more Docker container images. Deleting the oldest Docker images took less than a minute once I had the button set up.</p>\n<p>After successfully building and pushing a new container image to our registry, I also include this job as the last step. This will future-proof our build and deployment workflow so that it never gets out of control again.</p>\n<p>Also, I can count the number of times that I have needed to revert to one image on one hand and have never reverted to an image more than that. So saving the last 10, 20, or 30 images is peace of mind.</p>\n",
				"content_text": "If you use GitHub Actions to build and deploy Docker container images, you quickly learn that deleting old container images you no longer need is a huge pain. I don't know why GitHub doesn't make this easier, but they have a reusable workflow we can use to help prune and clean up old container images. \r\n\r\nThe [delete-package-versions](https://github.com/actions/delete-package-versions) will let you set a number to only keep the last x-known good images, with some other valuable options like deleting untagged container images. \r\n\r\nI prefer to write one [reusable workflow](https://docs.github.com/en/actions/using-workflows/reusing-workflows), which I can call from my standard CI build and deploy pipeline, along with a workflow_dispatch action we can call whenever we want. \r\n\r\nThis workflow is a mouthful but wraps the `delete-package-versions` action and gives us a few configurable options to pass. Having a default value on `min_versions_to_keep` is nice because it is a default when calling this workflow from other locations. \r\n\r\n```yml\r\n# .github/workflows/delete-container-versions.yml\r\nname: Delete Untagged Container Versions\r\n\r\non:\r\n  workflow_call:\r\n    inputs:\r\n      package_name:\r\n        required: true\r\n        type: string\r\n      package_type:\r\n        required: true\r\n        type: string\r\n      min_versions_to_keep:\r\n        required: false\r\n        type: number\r\n        default: 30\r\n\r\njobs:\r\n  delete_versions:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Delete all untagged container versions\r\n        uses: actions/delete-package-versions@v5\r\n        with:\r\n          delete-only-untagged-versions: 'false'\r\n          min-versions-to-keep: ${{ inputs.min_versions_to_keep }}\r\n          package-name: ${{ inputs.package_name }}\r\n          package-type: ${{ inputs.package_type }}\r\n```\r\n\r\nOur `cleanup.yml` is set up as a workflow_dispatch, allowing us to call our `delete-container-versions` job whenever we want. \r\n\r\n```yml\r\n# .github/workflows/cleanup.yml\r\nname: Delete Untagged Container Versions\r\n\r\non:\r\n  workflow_dispatch:\r\n\r\njobs:\r\n  delete-container-versions:\r\n    uses: .github/workflows/delete-container-versions.yml\r\n    with:\r\n      package_name: 'your-docker-container-package-name'\r\n      package_type: 'container'\r\n```\r\n\r\nI'm embarrassed to admit I had several repos with over 500 or more Docker container images. Deleting the oldest Docker images took less than a minute once I had the button set up. \r\n\r\nAfter successfully building and pushing a new container image to our registry, I also include this job as the last step. This will future-proof our build and deployment workflow so that it never gets out of control again. \r\n\r\nAlso, I can count the number of times that I have needed to revert to one image on one hand and have never reverted to an image more than that. So saving the last 10, 20, or 30 images is peace of mind.\r\n",
				"date_published": "2024-04-23T22:46:16-05:00",
				"url": "https://micro.webology.dev/2024/04/23/github-actions-cleaning.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/22/quick-django-news.html",
				"title": "üì∞ Quick Django News #228/#229 update tonight",
				"content_html": "<p>Quick update tonight since I&rsquo;m tired, but I had to re-do/re-send <a href=\"https://django-news.com/issues/229#start\">Django News #228</a> because our newsletter provider failed, and feel free to read the rest.</p>\n<p>Then I typoed DjangoCon US&rsquo;s <a href=\"https://2024.djangocon.us/news/cfp-last-call/\">WEDNESDAY CFP deadline</a>, which I fixed online, but I can&rsquo;t fix what I already sent out.</p>\n<p>I‚Äôm quitting early tonight.</p>\n",
				"content_text": "Quick update tonight since I'm tired, but I had to re-do/re-send [Django News #228](https://django-news.com/issues/229#start) because our newsletter provider failed, and feel free to read the rest. \r\n\r\nThen I typoed DjangoCon US's [WEDNESDAY CFP deadline](https://2024.djangocon.us/news/cfp-last-call/), which I fixed online, but I can't fix what I already sent out. \r\n\r\nI‚Äôm quitting early tonight. \n",
				"date_published": "2024-04-22T20:56:05-05:00",
				"url": "https://micro.webology.dev/2024/04/22/quick-django-news.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/21/til-nintendo-switch.html",
				"title": "üéÆ  TIL Nintendo Switch Game KVM",
				"content_html": "<p>The Nintendo Switch is very popular in my household. My six-year-old is at the right age to play a round or two of Mario Kart, TMNT, Kirby, or whatever we feel like, and it&rsquo;s a fun night. What gets annoying is taking the Switch out from under our TV to switch games and wait for it to reconnect to the TV.</p>\n<p>I was sharing this &ldquo;pain&rdquo; with a friend of mine who shared this <a href=\"https://www.unitek-products.com/products/4-in-1-game-card-reader\">Unitek 4-in-1 Game Card Reader</a> (similar model) with me, which might be the most lazy product that I own. The Unitek reader connects to your Switch and holds four games, which you can switch between with a remote button. The product has no frills, but it doesn&rsquo;t have to. All it needs to do is switch games when you press a button, which it does wonderfully.</p>\n<p>Oh, a whim, I decided to check out their website to see what other products they make, and I stumbled on their <a href=\"https://www.unitek-products.com/products/game-kvm-docking-station-with-remote\">Game KVM Docking Station with Remote</a>. If I needed a Dock, I would be tempted. TBH, I&rsquo;m already tempted to know if I could stack my 4-in-1 Game Card reader with the KVM Docking station to get seven games on standby, but I suspect the remotes will be on the same frequency.</p>\n<p>If video game emulation is your thing, I picked up <a href=\"https://apps.apple.com/us/app/delta-game-emulator/id1048524688\">Delta</a> last week for iOS in the App Store, but  I have yet to have time to try it out. I own several small portable emulation devices that I rarely use, but Delta might be the one that finally sticks because I always have my iPhone with me.</p>\n",
				"content_text": "The Nintendo Switch is very popular in my household. My six-year-old is at the right age to play a round or two of Mario Kart, TMNT, Kirby, or whatever we feel like, and it's a fun night. What gets annoying is taking the Switch out from under our TV to switch games and wait for it to reconnect to the TV. \r\n\r\nI was sharing this \"pain\" with a friend of mine who shared this [Unitek 4-in-1 Game Card Reader](https://www.unitek-products.com/products/4-in-1-game-card-reader) (similar model) with me, which might be the most lazy product that I own. The Unitek reader connects to your Switch and holds four games, which you can switch between with a remote button. The product has no frills, but it doesn't have to. All it needs to do is switch games when you press a button, which it does wonderfully. \r\n\r\nOh, a whim, I decided to check out their website to see what other products they make, and I stumbled on their [Game KVM Docking Station with Remote](https://www.unitek-products.com/products/game-kvm-docking-station-with-remote). If I needed a Dock, I would be tempted. TBH, I'm already tempted to know if I could stack my 4-in-1 Game Card reader with the KVM Docking station to get seven games on standby, but I suspect the remotes will be on the same frequency. \r\n\r\nIf video game emulation is your thing, I picked up [Delta](https://apps.apple.com/us/app/delta-game-emulator/id1048524688) last week for iOS in the App Store, but  I have yet to have time to try it out. I own several small portable emulation devices that I rarely use, but Delta might be the one that finally sticks because I always have my iPhone with me. \r\n",
				"date_published": "2024-04-21T20:45:56-05:00",
				"url": "https://micro.webology.dev/2024/04/21/til-nintendo-switch.html",
				"tags": ["Gaming"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/20/glass-i-watched.html",
				
				"content_html": "<p>üì∫ Glass - I watched Unbreakable when it came out in the movie theater back in 2000. It&rsquo;s one of my all-time favorite movies, and I hoped they would make a sequel, but I never thought it&rsquo;d be 24 years before I got to watch it.</p>\n<p><a href=\"https://trakt.tv/movies/glass-2019\">trakt.tv/movies/gl&hellip;</a></p>\n",
				"content_text": "üì∫ Glass - I watched Unbreakable when it came out in the movie theater back in 2000. It's one of my all-time favorite movies, and I hoped they would make a sequel, but I never thought it'd be 24 years before I got to watch it. \r\n\r\n[trakt.tv/movies/gl...](https://trakt.tv/movies/glass-2019)\n",
				"date_published": "2024-04-20T23:27:42-05:00",
				"url": "https://micro.webology.dev/2024/04/20/glass-i-watched.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/20/split-i-noticed.html",
				
				"content_html": "<p>üì∫ Split - I noticed that Glass just came out on Netflix, which led to my discovery that Split was the movie between Unbreakable and Glass. I didn&rsquo;t realize this series was a trilogy.</p>\n<p><a href=\"https://trakt.tv/movies/split-2017\">trakt.tv/movies/sp&hellip;</a></p>\n",
				"content_text": "üì∫ Split - I noticed that Glass just came out on Netflix, which led to my discovery that Split was the movie between Unbreakable and Glass. I didn't realize this series was a trilogy. \r\n\r\n[trakt.tv/movies/sp...](https://trakt.tv/movies/split-2017)\n",
				"date_published": "2024-04-20T20:40:57-05:00",
				"url": "https://micro.webology.dev/2024/04/20/split-i-noticed.html",
				"tags": ["Movies"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/19/untitled-friday-post.html",
				"title": "‚ù§Ô∏è Untitled Friday post",
				"content_html": "<p>Hug your loved ones. Everyone should take time and appreciate where we are and those around us on our journeys. We should also remind ourselves of everyone who has joined us along the way and what they have meant to us.¬†</p>\n<p>To my friends struggling with various degrees of bad news today, I see you and wish it weren&rsquo;t the case. ‚ù§Ô∏è</p>\n",
				"content_text": "Hug your loved ones. Everyone should take time and appreciate where we are and those around us on our journeys. We should also remind ourselves of everyone who has joined us along the way and what they have meant to us.¬†\r\n\r\nTo my friends struggling with various degrees of bad news today, I see you and wish it weren't the case. ‚ù§Ô∏è\n",
				"date_published": "2024-04-19T22:24:25-05:00",
				"url": "https://micro.webology.dev/2024/04/19/untitled-friday-post.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/18/super-bot-fight.html",
				"title": "ü§ñ Super Bot Fight ü•ä",
				"content_html": "<p>In March, I wrote about my robots.txt research and how I started proactively and defensively blocking AI Agents in my <a href=\"https://micro.webology.dev/2024/03/20/on-robotstxt.html\">ü§ñ On Robots.txt</a>. Since March, I have updated my Django projects to add more robots.txt rules.</p>\n<p>Earlier this week, I ran across this <a href=\"https://ethanmarcotte.com/wrote/blockin-bots/\">Blockin‚Äô bots.</a> blog post and this example, the <code>mod_rewrite</code> rule blocks AI Agents via their User-Agent strings.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-apacheconf\" data-lang=\"apacheconf\"><span style=\"color:#f92672\">&lt;IfModule</span> <span style=\"color:#e6db74\">mod_rewrite.c</span><span style=\"color:#f92672\">&gt;</span>\nRewriteEngine <span style=\"color:#66d9ef\">on</span>\nRewriteBase /\n<span style=\"color:#75715e\"># block ‚ÄúAI‚Äù bots</span>\nRewriteCond %{HTTP_USER_AGENT} (AdsBot-Google|Amazonbot|anthropic-ai|Applebot|AwarioRssBot|AwarioSmartBot|Bytespider|CCBot|ChatGPT|ChatGPT-User|Claude-Web|ClaudeBot|cohere-ai|DataForSeoBot|Diffbot|FacebookBot|FacebookBot|Google-Extended|GPTBot|ImagesiftBot|magpie-crawler|omgili|Omgilibot|peer39_crawler|PerplexityBot|YouBot) [NC]\nRewriteRule ^ ‚Äì [F]\n<span style=\"color:#f92672\">&lt;/IfModule&gt;</span>\n</code></pre></div><p>Since none of my projects use Apache, and I was short on time, I decided to leave this war to the bots.</p>\n<h2 id=\"django-middleware\">Django Middleware</h2>\n<p>I asked ChatGPT to convert this snippet to a piece of Django Middleware called Super Bot Fight. After all, if we don&rsquo;t have time to keep up with bots, then we could leverage this technology to help fight against them.</p>\n<p>In theory, this snippet passed my eyeball test and was good enough:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># middleware.py</span>\n\n<span style=\"color:#f92672\">from</span> django.http <span style=\"color:#f92672\">import</span> HttpResponseForbidden\n\n<span style=\"color:#75715e\"># List of user agents to block</span>\n\nBLOCKED_USER_AGENTS <span style=\"color:#f92672\">=</span> [\n    <span style=\"color:#e6db74\">&#34;AdsBot-Google&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;Amazonbot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;anthropic-ai&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;Applebot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;AwarioRssBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;AwarioSmartBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;Bytespider&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;CCBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;ChatGPT&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;ChatGPT-User&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;Claude-Web&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;ClaudeBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;cohere-ai&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;DataForSeoBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;Diffbot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;FacebookBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;Google-Extended&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;GPTBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;ImagesiftBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;magpie-crawler&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;omgili&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;Omgilibot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;peer39_crawler&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;PerplexityBot&#34;</span>,\n    <span style=\"color:#e6db74\">&#34;YouBot&#34;</span>,\n]\n\n<span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">BlockBotsMiddleware</span>:\n\n    <span style=\"color:#66d9ef\">def</span> __init__(self, get_response):\n        self<span style=\"color:#f92672\">.</span>get_response <span style=\"color:#f92672\">=</span> get_response\n\n    <span style=\"color:#66d9ef\">def</span> __call__(self, request):\n        <span style=\"color:#75715e\"># Check the User-Agent against the blocked list</span>\n        user_agent <span style=\"color:#f92672\">=</span> request<span style=\"color:#f92672\">.</span>META<span style=\"color:#f92672\">.</span>get(<span style=\"color:#e6db74\">&#34;HTTP_USER_AGENT&#34;</span>, <span style=\"color:#e6db74\">&#34;&#34;</span>)\n        <span style=\"color:#66d9ef\">if</span> any(bot <span style=\"color:#f92672\">in</span> user_agent <span style=\"color:#66d9ef\">for</span> bot <span style=\"color:#f92672\">in</span> BLOCKED_USER_AGENTS):\n            <span style=\"color:#66d9ef\">return</span> HttpResponseForbidden(<span style=\"color:#e6db74\">&#34;Access denied&#34;</span>)\n        response <span style=\"color:#f92672\">=</span> self<span style=\"color:#f92672\">.</span>get_response(request)\n        <span style=\"color:#66d9ef\">return</span> response\n</code></pre></div><p>To use this middleware, you would update your Django <code>settings.py</code> to add it to your <code>MIDDLEWARE</code> setting.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># settings.py</span>\n\nMIDDLEWARE <span style=\"color:#f92672\">=</span> [\n    <span style=\"color:#f92672\">...</span>\n    <span style=\"color:#e6db74\">&#34;middleware.BlockBotsMiddleware&#34;</span>,\n    <span style=\"color:#f92672\">...</span>\n]\n</code></pre></div><h2 id=\"tests\">Tests?</h2>\n<p>If this middleware works for you and you care about testing, then these tests should also work:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\">\n<span style=\"color:#f92672\">import</span> pytest\n\n<span style=\"color:#f92672\">from</span> django.http <span style=\"color:#f92672\">import</span> HttpRequest\n<span style=\"color:#f92672\">from</span> django.test <span style=\"color:#f92672\">import</span> RequestFactory\n\n<span style=\"color:#f92672\">from</span> middleware <span style=\"color:#f92672\">import</span> BlockBotsMiddleware\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>mark<span style=\"color:#f92672\">.</span>parametrize(<span style=\"color:#e6db74\">&#34;user_agent, should_block&#34;</span>, [\n    (<span style=\"color:#e6db74\">&#34;AdsBot-Google&#34;</span>, <span style=\"color:#66d9ef\">True</span>),\n    (<span style=\"color:#e6db74\">&#34;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&#34;</span>, <span style=\"color:#66d9ef\">False</span>),\n    (<span style=\"color:#e6db74\">&#34;ChatGPT-User&#34;</span>, <span style=\"color:#66d9ef\">True</span>),\n    (<span style=\"color:#e6db74\">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3&#34;</span>, <span style=\"color:#66d9ef\">False</span>),\n])\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">test_user_agent_blocking</span>(user_agent, should_block):\n    <span style=\"color:#75715e\"># Create a request factory to generate request instances</span>\n    factory <span style=\"color:#f92672\">=</span> RequestFactory()\n    request <span style=\"color:#f92672\">=</span> factory<span style=\"color:#f92672\">.</span>get(<span style=\"color:#e6db74\">&#39;/&#39;</span>, HTTP_USER_AGENT<span style=\"color:#f92672\">=</span>user_agent)\n\n    <span style=\"color:#75715e\"># Middleware setup</span>\n    middleware <span style=\"color:#f92672\">=</span> BlockBotsMiddleware(get_response<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">lambda</span> request: HttpResponse())\n    response <span style=\"color:#f92672\">=</span> middleware(request)\n\n    <span style=\"color:#75715e\"># Check if the response should be blocked or allowed</span>\n    <span style=\"color:#66d9ef\">if</span> should_block:\n        <span style=\"color:#66d9ef\">assert</span> response<span style=\"color:#f92672\">.</span>status_code <span style=\"color:#f92672\">==</span> <span style=\"color:#ae81ff\">403</span>, <span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;Request with user agent &#39;</span><span style=\"color:#e6db74\">{</span>user_agent<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">&#39; should be blocked.&#34;</span>\n    <span style=\"color:#66d9ef\">else</span>:\n        <span style=\"color:#66d9ef\">assert</span> response<span style=\"color:#f92672\">.</span>status_code <span style=\"color:#f92672\">!=</span> <span style=\"color:#ae81ff\">403</span>, <span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;Request with user agent &#39;</span><span style=\"color:#e6db74\">{</span>user_agent<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">&#39; should not be blocked.&#34;</span>\n\n</code></pre></div><h2 id=\"enhancements\">Enhancements</h2>\n<p>To use this code in production, I would normalize the <code>user_agent</code> and <code>BLOCKED_USER_AGENTS</code> variables to be case-insensitive.</p>\n<p>I would also consider storing my list of user agents in a Django model or using a project like <a href=\"https://github.com/jazzband/django-robots\">django-robots</a> instead of a hard-coded Python list.</p>\n",
				"content_text": "In March, I wrote about my robots.txt research and how I started proactively and defensively blocking AI Agents in my [ü§ñ On Robots.txt](https://micro.webology.dev/2024/03/20/on-robotstxt.html). Since March, I have updated my Django projects to add more robots.txt rules. \n\nEarlier this week, I ran across this [Blockin‚Äô bots.](https://ethanmarcotte.com/wrote/blockin-bots/) blog post and this example, the `mod_rewrite` rule blocks AI Agents via their User-Agent strings. \n\n```apacheconf\n<IfModule mod_rewrite.c>\nRewriteEngine on\nRewriteBase /\n# block ‚ÄúAI‚Äù bots\nRewriteCond %{HTTP_USER_AGENT} (AdsBot-Google|Amazonbot|anthropic-ai|Applebot|AwarioRssBot|AwarioSmartBot|Bytespider|CCBot|ChatGPT|ChatGPT-User|Claude-Web|ClaudeBot|cohere-ai|DataForSeoBot|Diffbot|FacebookBot|FacebookBot|Google-Extended|GPTBot|ImagesiftBot|magpie-crawler|omgili|Omgilibot|peer39_crawler|PerplexityBot|YouBot) [NC]\nRewriteRule ^ ‚Äì [F]\n</IfModule>\n```\n\nSince none of my projects use Apache, and I was short on time, I decided to leave this war to the bots. \n\n## Django Middleware\n\nI asked ChatGPT to convert this snippet to a piece of Django Middleware called Super Bot Fight. After all, if we don't have time to keep up with bots, then we could leverage this technology to help fight against them. \n\nIn theory, this snippet passed my eyeball test and was good enough: \n\n```python\n# middleware.py\n\nfrom django.http import HttpResponseForbidden\n\n# List of user agents to block\n\nBLOCKED_USER_AGENTS = [\n    \"AdsBot-Google\",\n    \"Amazonbot\",\n    \"anthropic-ai\",\n    \"Applebot\",\n    \"AwarioRssBot\",\n    \"AwarioSmartBot\",\n    \"Bytespider\",\n    \"CCBot\",\n    \"ChatGPT\",\n    \"ChatGPT-User\",\n    \"Claude-Web\",\n    \"ClaudeBot\",\n    \"cohere-ai\",\n    \"DataForSeoBot\",\n    \"Diffbot\",\n    \"FacebookBot\",\n    \"Google-Extended\",\n    \"GPTBot\",\n    \"ImagesiftBot\",\n    \"magpie-crawler\",\n    \"omgili\",\n    \"Omgilibot\",\n    \"peer39_crawler\",\n    \"PerplexityBot\",\n    \"YouBot\",\n]\n\nclass BlockBotsMiddleware:\n\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        # Check the User-Agent against the blocked list\n        user_agent = request.META.get(\"HTTP_USER_AGENT\", \"\")\n        if any(bot in user_agent for bot in BLOCKED_USER_AGENTS):\n            return HttpResponseForbidden(\"Access denied\")\n        response = self.get_response(request)\n        return response\n```\n\nTo use this middleware, you would update your Django `settings.py` to add it to your `MIDDLEWARE` setting. \n\n```python\n# settings.py\n\nMIDDLEWARE = [\n    ...\n    \"middleware.BlockBotsMiddleware\",\n    ...\n]\n```\n\n## Tests? \n\nIf this middleware works for you and you care about testing, then these tests should also work:\n\n```python\n\nimport pytest\n\nfrom django.http import HttpRequest\nfrom django.test import RequestFactory\n\nfrom middleware import BlockBotsMiddleware\n\n@pytest.mark.parametrize(\"user_agent, should_block\", [\n    (\"AdsBot-Google\", True),\n    (\"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\", False),\n    (\"ChatGPT-User\", True),\n    (\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\", False),\n])\ndef test_user_agent_blocking(user_agent, should_block):\n    # Create a request factory to generate request instances\n    factory = RequestFactory()\n    request = factory.get('/', HTTP_USER_AGENT=user_agent)\n\n    # Middleware setup\n    middleware = BlockBotsMiddleware(get_response=lambda request: HttpResponse())\n    response = middleware(request)\n\n    # Check if the response should be blocked or allowed\n    if should_block:\n        assert response.status_code == 403, f\"Request with user agent '{user_agent}' should be blocked.\"\n    else:\n        assert response.status_code != 403, f\"Request with user agent '{user_agent}' should not be blocked.\"\n\n```\n\n## Enhancements\n\nTo use this code in production, I would normalize the `user_agent` and `BLOCKED_USER_AGENTS` variables to be case-insensitive. \n\nI would also consider storing my list of user agents in a Django model or using a project like [django-robots](https://github.com/jazzband/django-robots) instead of a hard-coded Python list.\n",
				"date_published": "2024-04-18T23:41:03-05:00",
				"url": "https://micro.webology.dev/2024/04/18/super-bot-fight.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/17/starship-is-the.html",
				"title": "üöÄ Starship is the shell prompt you have been looking for üêö",
				"content_html": "<p>I spent a lot of time in my shell (terminal, iTerm, bash, whatever you prefer), and by and large, my least favorite and most frustrating chore has always been trying to customize my shell prompt.</p>\n<p>A few years ago, I tried to switch from BASH to Zsh and even the Fish Shell, and I quickly reverted because I found customizing my prompt to be such a chore.</p>\n<p><a href=\"https://starship.rs\">Starship</a> is one of those few life-changing development utilities that quickly solved how to customize my shell prompt. Starship also works across various shells, which means changing shells doesn&rsquo;t mean starting over with a new prompt. Even though Fish and Zsh never stuck for me, Starship was a keeper.</p>\n<p>Starship&rsquo;s default prompt is really good and is a nicer starting point than Zsh or BASH gives you by default. Starship includes a bunch of default settings, which enables support for tools like aws, battery percentage, bun, git, k8s, node js, python, etc, so most of <a href=\"https://github.com/jefftriplett/dotfiles/blob/main/home/.config/starship.toml\">my dotfiles config</a> is turning off the features that I don&rsquo;t care about.</p>\n<p>There is a <a href=\"https://draculatheme.com/starship\">Dracula Theme for Starship</a>, which is my go-to theme for any application that I can find that supports the color scheme.</p>\n<p>Setting up and configuring Starship is a breeze. The documentation is clear and concise, and Starship&rsquo;s settings are neatly organized in one readable and updated file, <code>~/.config/starship.toml</code>. Best of all, any changes you make are immediately applied, eliminating the need to restart your shell session. With Starship, you can confidently customize your prompt and see the results instantly.</p>\n<p>If you use Homebrew, <code>brew install starship</code> will install it. You can activate Starship by adding <code>eval &quot;$(starship init bash)&quot;</code> to your <code>~/.bashrc</code> file.</p>\n<p>If you have been thinking about trying out Starship or need help figuring out where to start or how to customize your shell prompt, I highly recommend it.</p>\n",
				"content_text": "I spent a lot of time in my shell (terminal, iTerm, bash, whatever you prefer), and by and large, my least favorite and most frustrating chore has always been trying to customize my shell prompt.\n\nA few years ago, I tried to switch from BASH to Zsh and even the Fish Shell, and I quickly reverted because I found customizing my prompt to be such a chore. \n\n[Starship](https://starship.rs) is one of those few life-changing development utilities that quickly solved how to customize my shell prompt. Starship also works across various shells, which means changing shells doesn't mean starting over with a new prompt. Even though Fish and Zsh never stuck for me, Starship was a keeper. \n\nStarship's default prompt is really good and is a nicer starting point than Zsh or BASH gives you by default. Starship includes a bunch of default settings, which enables support for tools like aws, battery percentage, bun, git, k8s, node js, python, etc, so most of [my dotfiles config](https://github.com/jefftriplett/dotfiles/blob/main/home/.config/starship.toml) is turning off the features that I don't care about. \n\nThere is a [Dracula Theme for Starship](https://draculatheme.com/starship), which is my go-to theme for any application that I can find that supports the color scheme. \n\nSetting up and configuring Starship is a breeze. The documentation is clear and concise, and Starship's settings are neatly organized in one readable and updated file, `~/.config/starship.toml`. Best of all, any changes you make are immediately applied, eliminating the need to restart your shell session. With Starship, you can confidently customize your prompt and see the results instantly. \n\nIf you use Homebrew, `brew install starship` will install it. You can activate Starship by adding `eval \"$(starship init bash)\"` to your `~/.bashrc` file. \n\nIf you have been thinking about trying out Starship or need help figuring out where to start or how to customize your shell prompt, I highly recommend it. \n",
				"date_published": "2024-04-17T21:37:05-05:00",
				"url": "https://micro.webology.dev/2024/04/17/starship-is-the.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/16/rustywind-and-precommit.html",
				"title": "üß∞ Rustywind and pre-commit take the edge off of Tailwind CSS",
				"content_html": "<p>Last year, I wrote this <a href=\"https://jefftriplett.com/2023/rustywind-pre-commit-hook/\">TIL: Creating a Rustywind pre-commit hook</a>, which illustrates how to use the <a href=\"https://github.com/avencera/rustywind\">Rustywind</a> CLI, which helps organize <a href=\"https://tailwindcss.com\">Tailwind CSS</a> classes.</p>\n<p>Rustywind is a CSS class linting and formatting CLI tool that helps sort Tailwind CSS classes consistently and can help to de-duplicate them. If you struggle with duplicate classes or feel overwhelmed, Rustywind might be what you need.</p>\n<p>I prefer to install Rustywind as a <a href=\"https://pre-commit.com\">pre-commit</a> hook to run on every git commit or when I run <code>pre-commit run</code>.</p>\n<p>This <code>.pre-commit-config.yaml</code> config will run the latest version of Rustywind every time pre-commit runs.</p>\n<pre tabindex=\"0\"><code># .pre-commit-config.yaml\r\nrepos:\r\n  - repo: local\r\n    hooks:\r\n      - id: rustywind\r\n        name: rustywind Tailwind CSS class linter\r\n        language: node\r\n        additional_dependencies:\r\n          - rustywind@latest\r\n        entry: rustywind\r\n        args: [--write]\r\n        types_or: [html]\r\n</code></pre><p><code>pre-commit</code> is also an excellent way to manage your project&rsquo;s other linting and formatting tools. It can be used to ensure you always use the latest version of Rustywind and other tools.</p>\n",
				"content_text": "Last year, I wrote this [TIL: Creating a Rustywind pre-commit hook](https://jefftriplett.com/2023/rustywind-pre-commit-hook/), which illustrates how to use the [Rustywind](https://github.com/avencera/rustywind) CLI, which helps organize [Tailwind CSS](https://tailwindcss.com) classes. \r\n\r\nRustywind is a CSS class linting and formatting CLI tool that helps sort Tailwind CSS classes consistently and can help to de-duplicate them. If you struggle with duplicate classes or feel overwhelmed, Rustywind might be what you need. \r\n\r\nI prefer to install Rustywind as a [pre-commit](https://pre-commit.com) hook to run on every git commit or when I run `pre-commit run`. \r\n\r\nThis `.pre-commit-config.yaml` config will run the latest version of Rustywind every time pre-commit runs. \r\n\r\n```\r\n# .pre-commit-config.yaml\r\nrepos:\r\n  - repo: local\r\n    hooks:\r\n      - id: rustywind\r\n        name: rustywind Tailwind CSS class linter\r\n        language: node\r\n        additional_dependencies:\r\n          - rustywind@latest\r\n        entry: rustywind\r\n        args: [--write]\r\n        types_or: [html]\r\n```\r\n\r\n`pre-commit` is also an excellent way to manage your project's other linting and formatting tools. It can be used to ensure you always use the latest version of Rustywind and other tools. \n",
				"date_published": "2024-04-16T22:02:12-05:00",
				"url": "https://micro.webology.dev/2024/04/16/rustywind-and-precommit.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/15/weeknotes-for-week.html",
				"title": "üìì Weeknotes for Week 15: April 8 to April 14",
				"content_html": "<h2 id=\"family\">Family</h2>\n<p>The mowing season has officially kicked off. I mowed our yard for the first time this year on the highest setting because our grass seemed to have grown a foot in a week in several places since I fertilized it last weekend. I also trimmed and removed leaves and branches from the yard. I was rewarded by a late afternoon migraine, but lucked out and only lasted for a few hours.</p>\n<p>I finally broke out my miter saw and portable workbench and made room for it in the garage. As I fixed one of the beams that held up the front porch, I realized the water damage was much worse than I thought. It was only held up by one beam, so I&rsquo;m glad I didn&rsquo;t put off fixing it any longer. The new support is now fixed, primed, and ready for some wood filler in the holes with a fresh coat of paint to be applied.</p>\n<p>My son was an excellent helper this weekend, spending most of Sunday following me around and helping. We also went to a Lawrence fixture Cotton&rsquo;s Hardware store to get some grass seed, windshield wiper fluid, and a replacement garden hose.</p>\n<p>My daughter discovered a new Batman cartoon and spent Sunday shouting, &ldquo;I am the night&rdquo; and &ldquo;I am Batman&rdquo; as well as any two-year-old can.</p>\n<h2 id=\"work\">Work</h2>\n<p>It was a busy work week, juggling two client projects. We had a client demo and then a design handoff, in which we now have to turn a static PHP website into a fully working Django website.</p>\n<h2 id=\"community\">Community</h2>\n<p><strong>Django Code of Conduct WG:</strong> I spent more time than expected this week helping with this. We were down to just me, and now we have at least three, soon four, and soon more people to help out.</p>\n<p><strong>Django Packages</strong> was accepted as a <a href=\"https://djangonaut.space\">Djangonaut Space</a> project, so I spent time preparing for some June deadlines.</p>\n<p><strong>Trailhawks:</strong> I met with my running club&rsquo;s new President, and we discussed some changes to help get everything ready for the new 2024 racing season.</p>\n<p><strong>DEFNA:</strong> I walked the board through the conference budget, what to look for, and how to know how we are doing.</p>\n<p><a href=\"https://www.conferencechats.org\">Conference Chats</a>: We had our monthly Wednesday night meetup.</p>\n<p><strong>Office Hours:</strong> I hosted a Friday session.</p>\n<h2 id=\"side-projects\">Side projects</h2>\n<p><strong><a href=\"https://django-news.com\">Django News Newsletter</a>:</strong>¬†We shipped issue <a href=\"https://django-news.com/issues/227#start\">#227</a>.</p>\n<p><a href=\"https://jobs.django-news.com\">Django News Jobs</a>: I refactored some of my <a href=\"https://github.com/viewflow/django-fsm\">django-fsm</a> states with a few different workflows to automate importing jobs via the aggregator.</p>\n<h2 id=\"writing\">Writing</h2>\n<p>I wrote and published every day.</p>\n<p><a href=\"https://micro.webology.dev/2024/04/14/dear-tech-companies.html\">2024-04-14</a>:¬†<strong>üß± Dear Tech Companies: Two-year-old edition</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/13/how-often-do.html\">2024-04-13</a>:¬†<strong>üôã How often do you use Django&rsquo;s startproject and startapp?</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/12/office-hours-on.html\">2024-04-12</a>:¬†<strong>üìÖ Office Hours on April 19th</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/11/on-leaving-pinboard.html\">2024-04-11</a>:¬†<strong>üìå On leaving Pinboard, aka Raindrop, is better ü§∑</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/10/production-bugs-happen.html\">2024-04-10</a>:¬†<strong>üêõ Production bugs happen to everyone</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/09/copy-all-urls.html\">2024-04-09</a>:¬†<strong>üìã Copy All Urls browser extension</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/08/docker-and-orbstack.html\">2024-04-08</a>:¬†<strong>üê≥ Docker and OrbStack disk cleanup notes</strong>¬†</p>\n<h2 id=\"me-time\">&ldquo;Me&rdquo; time</h2>\n<p>I spent a night deep diving on Simon&rsquo;s <a href=\"https://simonwillison.net/2024/Apr/8/files-to-prompt/\">Building files-to-prompt entirely using Claude 3 Opus</a> article, which meant registering a paid Claude account, paying for API access, and spending $0.50 to try everything out.</p>\n<p>The results were better than expected, but the AI bar is still pretty low. It helped write tests and some light refactors, but it&rsquo;s mostly a copy-and-paste-to-refactor tool vs. a write-out working code tool.</p>\n<h2 id=\"entertainment\">Entertainment</h2>\n<p>üì∫ <a href=\"https://trakt.tv/shows/fallout\">Fallout</a> is excellent and worthy of all the praise.</p>\n<p>üì∫ <a href=\"https://trakt.tv/shows/x-men-97\">X-Men &lsquo;97</a> is a nostalgic &rsquo;90s throwback cartoon. If I hadn&rsquo;t watched this series as a teenager, I&rsquo;m not sure I would have liked it as an adult.</p>\n<p>üéÆ <a href=\"https://www.backloggd.com/games/double-dragon-gaiden-rise-of-the-dragons-sacred-reunion/\">Double Dragon Gaiden: Rise of the Dragons - Sacred Reunion</a>: My son and I picked up the DLC and started playing this weekend. The game is fun but only has five levels, which is a bit short. We can beat it in one session, which is nice, but the DLC improves on the original with a survival mode, which we liked a lot.</p>\n<h2 id=\"next-week\">Next week</h2>\n<p>More work. More house projects. More office hours. More community projects. Figure out my PyCon US plans.</p>\n",
				"content_text": "## Family\r\n\r\nThe mowing season has officially kicked off. I mowed our yard for the first time this year on the highest setting because our grass seemed to have grown a foot in a week in several places since I fertilized it last weekend. I also trimmed and removed leaves and branches from the yard. I was rewarded by a late afternoon migraine, but lucked out and only lasted for a few hours. \r\n\r\nI finally broke out my miter saw and portable workbench and made room for it in the garage. As I fixed one of the beams that held up the front porch, I realized the water damage was much worse than I thought. It was only held up by one beam, so I'm glad I didn't put off fixing it any longer. The new support is now fixed, primed, and ready for some wood filler in the holes with a fresh coat of paint to be applied. \r\n\r\nMy son was an excellent helper this weekend, spending most of Sunday following me around and helping. We also went to a Lawrence fixture Cotton's Hardware store to get some grass seed, windshield wiper fluid, and a replacement garden hose. \r\n\r\nMy daughter discovered a new Batman cartoon and spent Sunday shouting, \"I am the night\" and \"I am Batman\" as well as any two-year-old can. \r\n\r\n## Work\r\n\r\nIt was a busy work week, juggling two client projects. We had a client demo and then a design handoff, in which we now have to turn a static PHP website into a fully working Django website. \r\n\r\n## Community\r\n\r\n**Django Code of Conduct WG:** I spent more time than expected this week helping with this. We were down to just me, and now we have at least three, soon four, and soon more people to help out. \r\n\r\n**Django Packages** was accepted as a [Djangonaut Space](https://djangonaut.space) project, so I spent time preparing for some June deadlines. \r\n\r\n**Trailhawks:** I met with my running club's new President, and we discussed some changes to help get everything ready for the new 2024 racing season.\r\n\r\n**DEFNA:** I walked the board through the conference budget, what to look for, and how to know how we are doing. \r\n\r\n[Conference Chats](https://www.conferencechats.org): We had our monthly Wednesday night meetup. \r\n\r\n**Office Hours:** I hosted a Friday session. \r\n\r\n## Side projects\r\n\r\n**[Django News Newsletter](https://django-news.com):**¬†We shipped issue [#227](https://django-news.com/issues/227#start).\r\n\r\n[Django News Jobs](https://jobs.django-news.com): I refactored some of my [django-fsm](https://github.com/viewflow/django-fsm) states with a few different workflows to automate importing jobs via the aggregator. \r\n\r\n## Writing\r\n\r\nI wrote and published every day.\r\n\r\n[2024-04-14](https://micro.webology.dev/2024/04/14/dear-tech-companies.html):¬†**üß± Dear Tech Companies: Two-year-old edition**¬†\r\n\r\n[2024-04-13](https://micro.webology.dev/2024/04/13/how-often-do.html):¬†**üôã How often do you use Django's startproject and startapp?**¬†\r\n\r\n[2024-04-12](https://micro.webology.dev/2024/04/12/office-hours-on.html):¬†**üìÖ Office Hours on April 19th**¬†\r\n\r\n[2024-04-11](https://micro.webology.dev/2024/04/11/on-leaving-pinboard.html):¬†**üìå On leaving Pinboard, aka Raindrop, is better ü§∑**¬†\r\n\r\n[2024-04-10](https://micro.webology.dev/2024/04/10/production-bugs-happen.html):¬†**üêõ Production bugs happen to everyone**¬†\r\n\r\n[2024-04-09](https://micro.webology.dev/2024/04/09/copy-all-urls.html):¬†**üìã Copy All Urls browser extension**¬†\r\n\r\n[2024-04-08](https://micro.webology.dev/2024/04/08/docker-and-orbstack.html):¬†**üê≥ Docker and OrbStack disk cleanup notes**¬†\r\n\r\n## \"Me\" time\r\n\r\nI spent a night deep diving on Simon's [Building files-to-prompt entirely using Claude 3 Opus](https://simonwillison.net/2024/Apr/8/files-to-prompt/) article, which meant registering a paid Claude account, paying for API access, and spending $0.50 to try everything out. \r\n\r\nThe results were better than expected, but the AI bar is still pretty low. It helped write tests and some light refactors, but it's mostly a copy-and-paste-to-refactor tool vs. a write-out working code tool. \r\n\r\n## Entertainment\r\n\r\nüì∫ [Fallout](https://trakt.tv/shows/fallout) is excellent and worthy of all the praise. \r\n\r\nüì∫ [X-Men '97](https://trakt.tv/shows/x-men-97) is a nostalgic '90s throwback cartoon. If I hadn't watched this series as a teenager, I'm not sure I would have liked it as an adult. \r\n\r\nüéÆ [Double Dragon Gaiden: Rise of the Dragons - Sacred Reunion](https://www.backloggd.com/games/double-dragon-gaiden-rise-of-the-dragons-sacred-reunion/): My son and I picked up the DLC and started playing this weekend. The game is fun but only has five levels, which is a bit short. We can beat it in one session, which is nice, but the DLC improves on the original with a survival mode, which we liked a lot.\r\n\r\n## Next week\r\n\r\nMore work. More house projects. More office hours. More community projects. Figure out my PyCon US plans. \n",
				"date_published": "2024-04-15T22:07:20-05:00",
				"url": "https://micro.webology.dev/2024/04/15/weeknotes-for-week.html",
				"tags": ["Weeknotes"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/14/dear-tech-companies.html",
				"title": "üß± Dear Tech Companies: Two-year-old edition",
				"content_html": "<p>Dear Tech Companies,</p>\n<p>There is never a good time to interrupt a two-year-old to ask her for a one to five-star review while she&rsquo;s playing the LEGO¬Æ DUPLO¬Æ WORLD game.</p>\n<p>I understand that app review ratings are a vital metric impacting your rank in App Stores. While it pains me to write this, if your app is good and my children like it, we parents will rate it on our own time instead of being forced to so our children can return to their firetruck game because an App Store review popup prevents them from playing. I assume no one on the LEGO app store team has children to understand the pain, confusion, and agony this brings.</p>\n<p>It&rsquo;s deeply frustrating to encounter in-game purchases in a game designed for TWO TO FIVE-YEAR-OLDS. Fortunately, we&rsquo;re on the Apple One / Apple Arcade plan, which allows us to bypass such unnecessary features.</p>\n<p>I hope that you can learn from the mistakes made in the LEGO¬Æ DUPLO¬Æ WORLD game. This way, you can avoid frustrated parents leaving you with low app store ratings in the heat of the moment.</p>\n",
				"content_text": "Dear Tech Companies,\r\n\r\nThere is never a good time to interrupt a two-year-old to ask her for a one to five-star review while she's playing the LEGO¬Æ DUPLO¬Æ WORLD game. \r\n\r\nI understand that app review ratings are a vital metric impacting your rank in App Stores. While it pains me to write this, if your app is good and my children like it, we parents will rate it on our own time instead of being forced to so our children can return to their firetruck game because an App Store review popup prevents them from playing. I assume no one on the LEGO app store team has children to understand the pain, confusion, and agony this brings. \r\n\r\nIt's deeply frustrating to encounter in-game purchases in a game designed for TWO TO FIVE-YEAR-OLDS. Fortunately, we're on the Apple One / Apple Arcade plan, which allows us to bypass such unnecessary features. \r\n\r\nI hope that you can learn from the mistakes made in the LEGO¬Æ DUPLO¬Æ WORLD game. This way, you can avoid frustrated parents leaving you with low app store ratings in the heat of the moment. \r\n",
				"date_published": "2024-04-14T08:29:34-05:00",
				"url": "https://micro.webology.dev/2024/04/14/dear-tech-companies.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/13/how-often-do.html",
				"title": "üôã How often do you use Django's startproject and startapp?",
				"content_html": "<p>I saw this <a href=\"https://mastodon.social/@nanorepublica@indiehackers.social/112226584167045805\">Mastodon post</a> last week and thought it worth sharing.</p>\n<!-- raw HTML omitted -->\n<blockquote>\n<p>Weekend <a href=\"https://mastodon.social/tags/django\">#django</a> question/poll</p>\n<p>How often do you use <code>startproject</code> &amp; <code>startapp</code> or something else?</p>\n</blockquote>\n<p>These commands vary by the client or project I&rsquo;m working on.</p>\n<p>I use <code>startproject</code> one to two times a month.</p>\n<p>I use <code>startapp</code> one to a dozen times a week.</p>\n<p>I have used <a href=\"https://github.com/copier-org/copier\">copier</a> and <a href=\"https://github.com/cookiecutter/cookiecutter\">cookiecutter</a>, and both have their place, but I only use them occasionally.</p>\n<p>I create more new projects and apps than the average developer because I&rsquo;m curious and spin up projects quickly to try out ideas. I prefer this over every experiment being part of a mono project because I will throw most of these away.</p>\n<blockquote>\n<p>and how many years since you started using django?</p>\n</blockquote>\n<p>I have been using Django since 2006.</p>\n",
				"content_text": "I saw this [Mastodon post](https://mastodon.social/@nanorepublica@indiehackers.social/112226584167045805) last week and thought it worth sharing. \r\n\r\n<iframe src=\"https://indiehackers.social/@nanorepublica/112226584130287024/embed\" width=\"400\" allowfullscreen=\"allowfullscreen\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-forms\"></iframe>\r\n\r\n> Weekend [#django](https://mastodon.social/tags/django) question/poll\r\n> \r\n> How often do you use `startproject` & `startapp` or something else?\r\n\r\nThese commands vary by the client or project I'm working on. \r\n\r\nI use `startproject` one to two times a month. \r\n\r\nI use `startapp` one to a dozen times a week. \r\n\r\nI have used [copier](https://github.com/copier-org/copier) and [cookiecutter](https://github.com/cookiecutter/cookiecutter), and both have their place, but I only use them occasionally. \r\n\r\nI create more new projects and apps than the average developer because I'm curious and spin up projects quickly to try out ideas. I prefer this over every experiment being part of a mono project because I will throw most of these away. \r\n\r\n> and how many years since you started using django?\r\n\r\nI have been using Django since 2006.  \r\n",
				"date_published": "2024-04-13T22:00:56-05:00",
				"url": "https://micro.webology.dev/2024/04/13/how-often-do.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/12/office-hours-on.html",
				"title": "üìÖ Office Hours on April 19th",
				"content_html": "<p>üìÖ Next week, I&rsquo;m hosting Office Hours on Friday, April 19th, 2024, from 2 PM to 4:30 PM Central Time (US and Canada). If you need to convert it to your local time zone, use this <a href=\"https://time.is/compare/200pm_19_April_2024_in_CT\">handy link</a>.</p>\n<p>‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.</p>\n<p>üôè As always, everyone is welcome to join, whether you&rsquo;re a regular attendee or joining for the first time.</p>\n<p>‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you&rsquo;ll find the Zoom link ‚ö†Ô∏è</p>\n<p>I look forward to seeing everyone.</p>\n",
				"content_text": "üìÖ Next week, I'm hosting Office Hours on Friday, April 19th, 2024, from 2 PM to 4:30 PM Central Time (US and Canada). If you need to convert it to your local time zone, use this [handy link](https://time.is/compare/200pm_19_April_2024_in_CT). \r\n\r\n‚ÑπÔ∏è During our session, we will discuss our ongoing projects, catch up with one another, and work together to wrap up our week on a productive note.\r\n\r\nüôè As always, everyone is welcome to join, whether you're a regular attendee or joining for the first time.\r\n\r\n‚úÖ If you need any additional details, feel free to send me a message or check out the gist from our previous sessions, where you'll find the Zoom link ‚ö†Ô∏è\r\n\r\nI look forward to seeing everyone. \n",
				"date_published": "2024-04-12T22:27:36-05:00",
				"url": "https://micro.webology.dev/2024/04/12/office-hours-on.html",
				"tags": ["Office Hours"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/11/fallout-everybody-else.html",
				
				"content_html": "<p>üì∫ Fallout - Everybody Else Is Doing It, So Why Can&rsquo;t We? ‚ò¢Ô∏è</p>\n<p><a href=\"https://trakt.tv/shows/fallout\">trakt.tv/shows/fal&hellip;</a></p>\n",
				"content_text": "üì∫ Fallout - Everybody Else Is Doing It, So Why Can't We? ‚ò¢Ô∏è \r\n\r\n[trakt.tv/shows/fal...](https://trakt.tv/shows/fallout)\n",
				"date_published": "2024-04-11T20:49:27-05:00",
				"url": "https://micro.webology.dev/2024/04/11/fallout-everybody-else.html",
				"tags": ["Shows"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/11/on-leaving-pinboard.html",
				"title": "üìå On leaving Pinboard, aka Raindrop, is better ü§∑",
				"content_html": "<p>A friend asked me which bookmarking service I switched to after I moved on from the Pinboard bookmark service.</p>\n<p>tl;dr I use <a href=\"https://raindrop.io\">Raindrop</a>. The product and API works wonderfully. üëç</p>\n<p>A good bookmark service should:</p>\n<ul>\n<li>be easy to add a bookmark</li>\n<li>have a good browser extension or have a good bookmarklet</li>\n<li>be the best personal search engine</li>\n<li>be a good research tool for taking notes and allowing tagging</li>\n<li>be reliable</li>\n<li>maintain reasonable uptime</li>\n</ul>\n<p>Today, I realized I had been on Raindrop&rsquo;s FREE plan for over a year, so I fixed that and upgraded to a PRO account.</p>\n<p>That&rsquo;s a good sign since I have ~40k and over two decades of bookmarks, and they never pressured me to upgrade or put limits on my account in any frustrating way.</p>\n<h2 id=\"why-i-gave-up-on-pinboard\">Why I gave up on Pinboard</h2>\n<p>I could write thousands of words about how frustrating being a paid user was, but I&rsquo;ll sum it up as running Pinboard wasn&rsquo;t a priority for Pinboard&rsquo;s founder, and it painfully showed. üëé</p>\n",
				"content_text": "A friend asked me which bookmarking service I switched to after I moved on from the Pinboard bookmark service. \r\n\r\ntl;dr I use [Raindrop](https://raindrop.io). The product and API works wonderfully. üëç\r\n\r\nA good bookmark service should:\r\n- be easy to add a bookmark\r\n- have a good browser extension or have a good bookmarklet \r\n- be the best personal search engine\r\n- be a good research tool for taking notes and allowing tagging\r\n- be reliable\r\n- maintain reasonable uptime\r\n\r\nToday, I realized I had been on Raindrop's FREE plan for over a year, so I fixed that and upgraded to a PRO account.\r\n\r\nThat's a good sign since I have ~40k and over two decades of bookmarks, and they never pressured me to upgrade or put limits on my account in any frustrating way. \r\n\r\n## Why I gave up on Pinboard\r\n\r\nI could write thousands of words about how frustrating being a paid user was, but I'll sum it up as running Pinboard wasn't a priority for Pinboard's founder, and it painfully showed. üëé \n",
				"date_published": "2024-04-11T20:40:33-05:00",
				"url": "https://micro.webology.dev/2024/04/11/on-leaving-pinboard.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/10/xmen-watching-the.html",
				
				"content_html": "<p>üì∫ X-Men &lsquo;97 - Watching the first episode to wind down.</p>\n<p><a href=\"https://trakt.tv/shows/x-men-97\">trakt.tv/shows/x-m&hellip;</a></p>\n",
				"content_text": "üì∫ X-Men '97 - Watching the first episode to wind down. \r\n\r\n[trakt.tv/shows/x-m...](https://trakt.tv/shows/x-men-97)\n",
				"date_published": "2024-04-10T23:18:24-05:00",
				"url": "https://micro.webology.dev/2024/04/10/xmen-watching-the.html",
				"tags": ["Shows"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/10/production-bugs-happen.html",
				"title": "üêõ Production bugs happen to everyone",
				"content_html": "<p>I have noticed a GitHub bug for a few weeks, but I kept forgetting to ask publicly about it.</p>\n<p>Today, I noticed it again, and I tracked it down to README.rst files, so I wrote this post:</p>\n<blockquote>\n<p>Has anyone else noticed that some READMEs on GitHub have been broken recently?</p>\n<p>I thought it was just me, but the pattern seems to be like code blocks in rst files no longer get formatted.</p>\n<p><a href=\"https://mastodon.social/@webology/112249549385519057\">https://mastodon.social/@webology/112249549385519057</a></p>\n</blockquote>\n<!-- raw HTML omitted -->\n<p>This led to several friends chiming in and one link to this <a href=\"https://github.com/orgs/community/discussions/113792\">open GitHub issue</a> thanks to <a href=\"https://mastodon.social/@FunkyBob@chaos.social/112249599598006182\">Funky Bob</a></p>\n<p>The story&rsquo;s moral is that writing software is hard; even GitHub makes mistakes and breaks things.</p>\n<p>If a trillion-dollar tech company can break things for weeks, cut yourself some slack the next time you stumble on a production.</p>\n<p><strong>Disclaimer:</strong> I wrote this post while talking in this month&rsquo;s <a href=\"https://www.conferencechats.org\">Conference Chats</a>.</p>\n",
				"content_text": "I have noticed a GitHub bug for a few weeks, but I kept forgetting to ask publicly about it. \r\n\r\nToday, I noticed it again, and I tracked it down to README.rst files, so I wrote this post: \r\n\r\n> Has anyone else noticed that some READMEs on GitHub have been broken recently?\r\n> \r\n> I thought it was just me, but the pattern seems to be like code blocks in rst files no longer get formatted.\r\n> \r\n> https://mastodon.social/@webology/112249549385519057\r\n\r\n<iframe src=\"https://mastodon.social/@webology/112249549385519057/embed\" class=\"mastodon-embed\" style=\"max-width: 100%; border: 0\" width=\"400\" allowfullscreen=\"allowfullscreen\"></iframe>\r\n\r\nThis led to several friends chiming in and one link to this [open GitHub issue](https://github.com/orgs/community/discussions/113792) thanks to [Funky Bob](https://mastodon.social/@FunkyBob@chaos.social/112249599598006182)\r\n\r\nThe story's moral is that writing software is hard; even GitHub makes mistakes and breaks things. \r\n\r\nIf a trillion-dollar tech company can break things for weeks, cut yourself some slack the next time you stumble on a production. \r\n\r\n**Disclaimer:** I wrote this post while talking in this month's [Conference Chats](https://www.conferencechats.org). \n",
				"date_published": "2024-04-10T21:30:45-05:00",
				"url": "https://micro.webology.dev/2024/04/10/production-bugs-happen.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/09/copy-all-urls.html",
				"title": "üìã Copy All Urls browser extension",
				"content_html": "<p>If you are like me and have a habit of opening links in new tabs for days, weeks, and sometimes months, then you probably have not discovered the <a href=\"https://chromewebstore.google.com/detail/copy-all-urls/djdmadneanknadilpjiknlnanaolmbfk\">Copy tabs URL</a> browser extension.</p>\n<p>The <em>Copy tabs URL</em> browser extension is a lifesaver for those who habitually open links in new tabs. It effortlessly copies all open tabs from a browser window into your clipboard, eliminating the need for manual copying and pasting. This makes it a breeze to paste into your editor of choice, such as <a href=\"https://obsidian.md\">Obsidian</a>, saving you valuable time and effort.</p>\n<p>With the <em>Copy tabs URL</em> browser extension, I can easily copy all of my open tabs into a markdown document. This simple action helps me overcome mental hurdles, as I know that the link is safely filed away where I can search and find it later. This makes closing the tab a much easier decision for me.</p>\n<p>For longer-term storage, I use the <a href=\"https://raindrop.io\">Raindrop</a> bookmark manager to track links I want to find later because it doubles as an excellent research tool and personal search engine. Before Raindrop, I frustratingly used Pinboard for a decade.</p>\n<p>So, while the <em>Copy tabs URL</em> browser extension works with Chrome, I switched to the <a href=\"https://vivaldi.com\">Vivaldi</a> browser last year, and it works just fine.</p>\n",
				"content_text": "If you are like me and have a habit of opening links in new tabs for days, weeks, and sometimes months, then you probably have not discovered the [Copy tabs URL](https://chromewebstore.google.com/detail/copy-all-urls/djdmadneanknadilpjiknlnanaolmbfk) browser extension. \r\n\r\nThe *Copy tabs URL* browser extension is a lifesaver for those who habitually open links in new tabs. It effortlessly copies all open tabs from a browser window into your clipboard, eliminating the need for manual copying and pasting. This makes it a breeze to paste into your editor of choice, such as [Obsidian](https://obsidian.md), saving you valuable time and effort. \r\n\r\nWith the *Copy tabs URL* browser extension, I can easily copy all of my open tabs into a markdown document. This simple action helps me overcome mental hurdles, as I know that the link is safely filed away where I can search and find it later. This makes closing the tab a much easier decision for me. \r\n\r\nFor longer-term storage, I use the [Raindrop](https://raindrop.io) bookmark manager to track links I want to find later because it doubles as an excellent research tool and personal search engine. Before Raindrop, I frustratingly used Pinboard for a decade. \r\n\r\nSo, while the *Copy tabs URL* browser extension works with Chrome, I switched to the [Vivaldi](https://vivaldi.com) browser last year, and it works just fine. \n",
				"date_published": "2024-04-09T22:18:04-05:00",
				"url": "https://micro.webology.dev/2024/04/09/copy-all-urls.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/08/docker-and-orbstack.html",
				"title": "üê≥ Docker and OrbStack disk cleanup notes ",
				"content_html": "<p><a href=\"https://www.docker.com\">Docker</a> is one of my daily drivers, and here are my notes for reclaiming disk space and a bonus tip for getting a faster runtime.</p>\n<hr>\n<h2 id=\"docker-containers-prune\">Docker &ldquo;Containers&rdquo; Prune</h2>\n<p>Most of the time, when I run into a Docker issue, it&rsquo;s because I have out of disk space allocated for Docker containers and images.</p>\n<p>90% of the time, you can reclaim the most disk space by running <code>docker system prune</code>.</p>\n<p><strong>Why?</strong> Docker&rsquo;s default behavior is to remove &ldquo;stopped containers,&rdquo; which are instances of containers that have already run and are no longer valid. There is no good reason to keep these around, so <strong>I consider this a safe operation</strong> to run.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker system prune\nWARNING! This will remove:\n  - all stopped containers\n  - all networks not used by at least one container\n  - all dangling images\n  - unused build cache\n\nAre you sure you want to <span style=\"color:#66d9ef\">continue</span>? <span style=\"color:#f92672\">[</span>y/N<span style=\"color:#f92672\">]</span> y\nDeleted Containers:\n...\nTotal reclaimed space: 127.5GB\n</code></pre></div><p>I freed up 127.5 GB of disk space when I ran this today.</p>\n<hr>\n<h2 id=\"docker-images-prune\">Docker &ldquo;Images&rdquo; Prune</h2>\n<p>The <code>docker system df</code> will show us how much disk space Docker uses and what storage types.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker system df\nTYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE\nImages          <span style=\"color:#ae81ff\">100</span>       <span style=\"color:#ae81ff\">0</span>         64.76GB   64.76GB <span style=\"color:#f92672\">(</span>100%<span style=\"color:#f92672\">)</span>\nContainers      <span style=\"color:#ae81ff\">0</span>         <span style=\"color:#ae81ff\">0</span>         0B        0B\nLocal Volumes   <span style=\"color:#ae81ff\">1211</span>      <span style=\"color:#ae81ff\">0</span>         32.79GB   32.79GB <span style=\"color:#f92672\">(</span>100%<span style=\"color:#f92672\">)</span>\nBuild Cache     <span style=\"color:#ae81ff\">638</span>       <span style=\"color:#ae81ff\">0</span>         31.29GB   31.29GB\n</code></pre></div><p>The `docker image prune -a' will delete all images that don&rsquo;t have a container associated with them.</p>\n<p><strong>Why?</strong> Worse case, if you delete an image that you need, you can always rebuild it. If you are using a third-party image, you can always <code>docker pull</code> a more recent image.  <strong>I consider this a safe operation</strong> to run.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker image prune -a\nWARNING! This will remove all images without at least one container associated to them.\nAre you sure you want to <span style=\"color:#66d9ef\">continue</span>? <span style=\"color:#f92672\">[</span>y/N<span style=\"color:#f92672\">]</span> y\n...\nTotal reclaimed space: 11.28GB\n</code></pre></div><p>The results after we have run our command:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker system df\nTYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE\nImages          <span style=\"color:#ae81ff\">0</span>         <span style=\"color:#ae81ff\">0</span>         0B        0B\nContainers      <span style=\"color:#ae81ff\">0</span>         <span style=\"color:#ae81ff\">0</span>         0B        0B\nLocal Volumes   <span style=\"color:#ae81ff\">1211</span>      <span style=\"color:#ae81ff\">0</span>         32.79GB   32.79GB <span style=\"color:#f92672\">(</span>100%<span style=\"color:#f92672\">)</span>\nBuild Cache     <span style=\"color:#ae81ff\">638</span>       <span style=\"color:#ae81ff\">0</span>         31.29GB   31.29GB\n</code></pre></div><hr>\n<h2 id=\"docker-build-cache-prune\">Docker &ldquo;Build Cache&rdquo; Prune</h2>\n<p>Docker&rsquo;s Build Cache stores or caches all of the various build steps that Docker will use to assemble an image.</p>\n<p><strong>I consider this a safe operation</strong> because the worst-case scenario of a build step not being cached is that it takes a little longer to run your next Docker build while Docker re-runs the command.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker builder prune\n...\nTotal:  31.29GB\n</code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker system df\nTYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE\nImages          <span style=\"color:#ae81ff\">0</span>         <span style=\"color:#ae81ff\">0</span>         0B        0B\nContainers      <span style=\"color:#ae81ff\">0</span>         <span style=\"color:#ae81ff\">0</span>         0B        0B\nLocal Volumes   <span style=\"color:#ae81ff\">1211</span>      <span style=\"color:#ae81ff\">0</span>         32.79GB   32.79GB <span style=\"color:#f92672\">(</span>100%<span style=\"color:#f92672\">)</span>\nBuild Cache     <span style=\"color:#ae81ff\">2</span>         <span style=\"color:#ae81ff\">0</span>         0B        0B\n</code></pre></div><hr>\n<h2 id=\"docker-local-volumes-prune\">Docker &ldquo;Local Volumes&rdquo; Prune</h2>\n<p>Docker volumes are where your persistent data lives, like the files your database needs between sessions.</p>\n<p><strong>I do not recommend bulk deleting all of your volumes.</strong></p>\n<p>Unless you really, really mean it, and you know what you are doing, leave <code>docker volume prune</code> alone.</p>\n<p>I have &ldquo;Local Volumes&rdquo; that have lived longer than some Javascript Frameworks have.</p>\n<p>Instead, only delete what you know you aren&rsquo;t using anymore via:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker volume ls\n$ docker volume rm <span style=\"color:#f92672\">{</span>volume-name<span style=\"color:#f92672\">}</span>\n</code></pre></div><hr>\n<h2 id=\"orbstack-for-extra-performance\">OrbStack for extra performance</h2>\n<p>If you are on macOS, try out <a href=\"https://orbstack.dev\">OrbStack</a>, which lives up to its claim of being lightning faster than Docker.</p>\n<p>I run both Docker and Orbstack on my machines, and I use a <code>DOCKER_CONTEXT</code> environment variable to change between the two contexts.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># for OrbStack</span>\nexport DOCKER_CONTEXT<span style=\"color:#f92672\">=</span>orbstack\n$ docker system df\n...\n\n<span style=\"color:#75715e\"># for Docker</span>\nexport DOCKER_CONTEXT<span style=\"color:#f92672\">=</span>default\n$ docker system df\n...\n</code></pre></div><p>If you aren&rsquo;t sure what your &ldquo;context&rdquo; options are, you can run <code>docker context ls</code> to see them:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ docker context ls\nNAME              DESCRIPTION                               DOCKER ENDPOINT                                        ERROR\ndefault           Current DOCKER_HOST based configuration   unix:///var/run/docker.sock\ndesktop-linux *   Docker Desktop                            unix:///Users/username/.docker/run/docker.sock\norbstack          OrbStack                                  unix:///Users/username/.orbstack/run/docker.sock\n</code></pre></div>",
				"content_text": "[Docker](https://www.docker.com) is one of my daily drivers, and here are my notes for reclaiming disk space and a bonus tip for getting a faster runtime. \n\n----\n\n## Docker \"Containers\" Prune\n\nMost of the time, when I run into a Docker issue, it's because I have out of disk space allocated for Docker containers and images. \n\n90% of the time, you can reclaim the most disk space by running `docker system prune`. \n\n**Why?** Docker's default behavior is to remove \"stopped containers,\" which are instances of containers that have already run and are no longer valid. There is no good reason to keep these around, so **I consider this a safe operation** to run. \n\n```shell\n$ docker system prune\nWARNING! This will remove:\n  - all stopped containers\n  - all networks not used by at least one container\n  - all dangling images\n  - unused build cache\n\nAre you sure you want to continue? [y/N] y\nDeleted Containers:\n...\nTotal reclaimed space: 127.5GB\n```\n\nI freed up 127.5 GB of disk space when I ran this today. \n\n----\n\n## Docker \"Images\" Prune\n\nThe `docker system df` will show us how much disk space Docker uses and what storage types. \n\n```shell\n$ docker system df\nTYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE\nImages          100       0         64.76GB   64.76GB (100%)\nContainers      0         0         0B        0B\nLocal Volumes   1211      0         32.79GB   32.79GB (100%)\nBuild Cache     638       0         31.29GB   31.29GB\n```\n\nThe `docker image prune -a' will delete all images that don't have a container associated with them. \n\n**Why?** Worse case, if you delete an image that you need, you can always rebuild it. If you are using a third-party image, you can always `docker pull` a more recent image.  **I consider this a safe operation** to run. \n\n```shell\n$ docker image prune -a\nWARNING! This will remove all images without at least one container associated to them.\nAre you sure you want to continue? [y/N] y\n...\nTotal reclaimed space: 11.28GB\n```\n\nThe results after we have run our command: \n\n```shell\n$ docker system df\nTYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE\nImages          0         0         0B        0B\nContainers      0         0         0B        0B\nLocal Volumes   1211      0         32.79GB   32.79GB (100%)\nBuild Cache     638       0         31.29GB   31.29GB\n```\n\n----\n\n## Docker \"Build Cache\" Prune\n\nDocker's Build Cache stores or caches all of the various build steps that Docker will use to assemble an image. \n\n**I consider this a safe operation** because the worst-case scenario of a build step not being cached is that it takes a little longer to run your next Docker build while Docker re-runs the command. \n\n```shell \n$ docker builder prune\n...\nTotal:  31.29GB\n```\n\n```shell\n$ docker system df\nTYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE\nImages          0         0         0B        0B\nContainers      0         0         0B        0B\nLocal Volumes   1211      0         32.79GB   32.79GB (100%)\nBuild Cache     2         0         0B        0B\n```\n\n----\n\n## Docker \"Local Volumes\" Prune\n\nDocker volumes are where your persistent data lives, like the files your database needs between sessions. \n\n**I do not recommend bulk deleting all of your volumes.**\n\nUnless you really, really mean it, and you know what you are doing, leave `docker volume prune` alone. \n\nI have \"Local Volumes\" that have lived longer than some Javascript Frameworks have. \n\nInstead, only delete what you know you aren't using anymore via: \n\n```shell\n$ docker volume ls\n$ docker volume rm {volume-name}\n```\n\n----\n\n## OrbStack for extra performance\n\nIf you are on macOS, try out [OrbStack](https://orbstack.dev), which lives up to its claim of being lightning faster than Docker. \n\nI run both Docker and Orbstack on my machines, and I use a `DOCKER_CONTEXT` environment variable to change between the two contexts. \n\n```shell\n# for OrbStack\nexport DOCKER_CONTEXT=orbstack\n$ docker system df\n...\n\n# for Docker\nexport DOCKER_CONTEXT=default\n$ docker system df\n...\n```\n\nIf you aren't sure what your \"context\" options are, you can run `docker context ls` to see them: \n\n```shell\n$ docker context ls\nNAME              DESCRIPTION                               DOCKER ENDPOINT                                        ERROR\ndefault           Current DOCKER_HOST based configuration   unix:///var/run/docker.sock\ndesktop-linux *   Docker Desktop                            unix:///Users/username/.docker/run/docker.sock\norbstack          OrbStack                                  unix:///Users/username/.orbstack/run/docker.sock\n```\n\n",
				"date_published": "2024-04-08T21:07:22-05:00",
				"url": "https://micro.webology.dev/2024/04/08/docker-and-orbstack.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/07/weeknotes-for-week.html",
				"title": "üìñ Weeknotes for Week 14: April 1 to April 7",
				"content_html": "<h2 id=\"family\">Family</h2>\n<p>I skipped last week&rsquo;s update because we spent Easter weekend with my family and ~6 hours in the car with the kids.</p>\n<p>We went to our favorite local nursery, <a href=\"https://vinlandvalleynursery.com\">Vinland Valley Nursery</a>, to pick up some new Hostas and other heartier plants since April is still a bit early for planting flowers because we typically have a few late freezes through Spring. We planted everything, and I fertilized the lawn to prepare it for the season.</p>\n<p>I unboxed and assembled my portable workbench and miter saw. My miter saw shipped with everything but the manual, and by the time I found one and printed it, it was time for me to make dinner. I cooked burgers on the outdoor griddle for the first time this year.</p>\n<h2 id=\"work\">Work</h2>\n<p>I observed Good Friday on Monday and then worked a full day on Saturday to keep up with two client projects.</p>\n<h2 id=\"community\">Community</h2>\n<p>My community cup was overflowing this week:</p>\n<ul>\n<li>Monthly DEFNA Board of Directors meeting</li>\n<li>Biweekly PSF Conduct WG meeting</li>\n<li>I interviewed with Djangonauts to see if Django Packages was a good fit for a future session.</li>\n<li>I joined one of <a href=\"https://wiggle.work\">Wiggle Work&rsquo;s</a> lunch sessions.</li>\n<li>I joined <a href=\"conferencechats.org/\">Conference Chat&rsquo;s</a> Friday session over lunch.</li>\n<li>I hosted Office Hours for my first meeting back in a month.</li>\n<li>I am working on rebooting the DSF&rsquo;s Code of Conduct WG and getting it back up to a healthy number of people.</li>\n<li>I attended half a day of <a href=\"https://2024.pycascades.com\">PyCascades</a></li>\n</ul>\n<h2 id=\"side-projects\">Side projects</h2>\n<p>Mastermind group: A friend invited me to attend their monthly Mastermind business group, which was interesting. We set some goals for next month.</p>\n<p><strong><a href=\"https://django-news.com\">Django News Newsletter</a>:</strong>¬†We shipped issue <a href=\"https://django-news.com/issues/226#start\">#226</a>.</p>\n<p><a href=\"https://jobs.django-news.com\">Django News Jobs</a>: I wrote up a few new features, including potentially moving the project to Django FSM, which might save me a few headaches. I&rsquo;m also debating a new feature to bring Company Endorsements into the listings.</p>\n<p><strong>Django Packages:</strong>¬†Security updates. I gave Ryan some reviews on an upcoming profile/extra links feature he&rsquo;s working on. It&rsquo;s pretty cool. I drafted a few issues for some potential new feature ideas.</p>\n<p><a href=\"https://upgradedjango.com\">Upgrade Django</a>: I bumped to list the latest few Django releases.</p>\n<h2 id=\"writing\">Writing</h2>\n<p>I wrote and published every day.</p>\n<p><a href=\"https://micro.webology.dev/2024/04/06/refactoring-and-fiddling.html\">2024-04-06</a>:¬†<strong>üöú Refactoring and fiddling with Django migrations for pending pull requests üêò</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/05/syncing-django-waffle.html\">2024-04-05</a>:¬†<strong>‚õ≥ Syncing Django Waffle feature flags</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/04/the-upgrade-django.html\">2024-04-04</a>:¬†<strong>‚¨ÜÔ∏è The Upgrade Django project</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/03/mise-is-really.html\">2024-04-03</a>:¬†<strong>üöÄ Mise is really fast</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/04/02/til-brandolinis-law.html\">2024-04-02</a>:¬†<strong>TIL: Brandolini‚Äôs law</strong></p>\n<p><a href=\"https://micro.webology.dev/2024/04/01/an-update-on.html\">2024-04-01</a>:¬†<strong>üî• An update on OpenSSF&rsquo;s XZ fumble</strong>¬†</p>\n<h2 id=\"me-time\">&ldquo;Me&rdquo; time</h2>\n<p>Even though March is over, March Madness continues, and I enjoyed two more weekends of Men&rsquo;s and Women&rsquo;s basketball. I took first place in my women&rsquo;s bracket this week. My son tied for #2 and was excited about it tonight.</p>\n<p>While I am in first place for my men&rsquo;s bracket, they play tomorrow (Monday), and the team I picked to win lost last weekend. So I will only win this year if there is a team fight and both teams forfeit. So there is still a chance.</p>\n<h2 id=\"next-week\">Next week</h2>\n<p>I should have mowed today and made another pass at removing sticks and leaves accumulated over the Spring. So I suspect we&rsquo;ll spend some time outside doing that next week.</p>\n<p>It&rsquo;s also time to break out the miter finally saw and spend half a day replacing old boards, repairing fences, and getting my money&rsquo;s worth out of it.</p>\n",
				"content_text": "## Family\r\n\r\nI skipped last week's update because we spent Easter weekend with my family and ~6 hours in the car with the kids. \r\n\r\nWe went to our favorite local nursery, [Vinland Valley Nursery](https://vinlandvalleynursery.com), to pick up some new Hostas and other heartier plants since April is still a bit early for planting flowers because we typically have a few late freezes through Spring. We planted everything, and I fertilized the lawn to prepare it for the season. \r\n\r\nI unboxed and assembled my portable workbench and miter saw. My miter saw shipped with everything but the manual, and by the time I found one and printed it, it was time for me to make dinner. I cooked burgers on the outdoor griddle for the first time this year. \r\n\r\n## Work\r\n\r\nI observed Good Friday on Monday and then worked a full day on Saturday to keep up with two client projects. \r\n\r\n## Community\r\n\r\nMy community cup was overflowing this week: \r\n\r\n- Monthly DEFNA Board of Directors meeting\r\n- Biweekly PSF Conduct WG meeting\r\n- I interviewed with Djangonauts to see if Django Packages was a good fit for a future session. \r\n- I joined one of [Wiggle Work's](https://wiggle.work) lunch sessions.\r\n- I joined [Conference Chat's](conferencechats.org/) Friday session over lunch.\r\n- I hosted Office Hours for my first meeting back in a month. \r\n- I am working on rebooting the DSF's Code of Conduct WG and getting it back up to a healthy number of people. \r\n- I attended half a day of [PyCascades](https://2024.pycascades.com)\r\n\r\n## Side projects\r\n\r\nMastermind group: A friend invited me to attend their monthly Mastermind business group, which was interesting. We set some goals for next month. \r\n\r\n**[Django News Newsletter](https://django-news.com):**¬†We shipped issue [#226](https://django-news.com/issues/226#start).\r\n\r\n[Django News Jobs](https://jobs.django-news.com): I wrote up a few new features, including potentially moving the project to Django FSM, which might save me a few headaches. I'm also debating a new feature to bring Company Endorsements into the listings. \r\n\r\n**Django Packages:**¬†Security updates. I gave Ryan some reviews on an upcoming profile/extra links feature he's working on. It's pretty cool. I drafted a few issues for some potential new feature ideas. \r\n\r\n[Upgrade Django](https://upgradedjango.com): I bumped to list the latest few Django releases. \r\n\r\n## Writing\r\n\r\nI wrote and published every day.\r\n\r\n[2024-04-06](https://micro.webology.dev/2024/04/06/refactoring-and-fiddling.html):¬†**üöú Refactoring and fiddling with Django migrations for pending pull requests üêò**¬†\r\n\r\n[2024-04-05](https://micro.webology.dev/2024/04/05/syncing-django-waffle.html):¬†**‚õ≥ Syncing Django Waffle feature flags**¬†\r\n\r\n[2024-04-04](https://micro.webology.dev/2024/04/04/the-upgrade-django.html):¬†**‚¨ÜÔ∏è The Upgrade Django project**¬†\r\n\r\n[2024-04-03](https://micro.webology.dev/2024/04/03/mise-is-really.html):¬†**üöÄ Mise is really fast**¬†\r\n\r\n[2024-04-02](https://micro.webology.dev/2024/04/02/til-brandolinis-law.html):¬†**TIL: Brandolini‚Äôs law**\r\n\r\n[2024-04-01](https://micro.webology.dev/2024/04/01/an-update-on.html):¬†**üî• An update on OpenSSF's XZ fumble**¬†\r\n\r\n## \"Me\" time\r\n\r\nEven though March is over, March Madness continues, and I enjoyed two more weekends of Men's and Women's basketball. I took first place in my women's bracket this week. My son tied for #2 and was excited about it tonight. \r\n\r\nWhile I am in first place for my men's bracket, they play tomorrow (Monday), and the team I picked to win lost last weekend. So I will only win this year if there is a team fight and both teams forfeit. So there is still a chance. \r\n\r\n## Next week\r\n\r\nI should have mowed today and made another pass at removing sticks and leaves accumulated over the Spring. So I suspect we'll spend some time outside doing that next week. \r\n\r\nIt's also time to break out the miter finally saw and spend half a day replacing old boards, repairing fences, and getting my money's worth out of it. \n",
				"date_published": "2024-04-07T22:09:37-05:00",
				"url": "https://micro.webology.dev/2024/04/07/weeknotes-for-week.html",
				"tags": ["Weeknotes"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/06/refactoring-and-fiddling.html",
				"title": "üöú Refactoring and fiddling with Django migrations for pending pull requests üêò",
				"content_html": "<p>One of Django&rsquo;s most powerful features is the ORM, which includes a robust migration framework. One of Django&rsquo;s most misunderstood features is Django migrations because it just works 99% of the time.</p>\n<p>Even when working solo, Django migrations are highly reliable, working 99.9% of the time and offering better uptime than most web services you may have used last week.</p>\n<p>The most common stumbling block for developers of all skill levels is rolling back a Django migration and prepping a pull request for review.</p>\n<p>I&rsquo;m not picky about pull requests or git commit history because I default to using the &ldquo;Squash and merge&rdquo; feature to turn all pull request commits into one merge commit. The merge commit tells me when, what, and why something changed if I need extra context.</p>\n<p>I am pickier about seeing &gt;2 database migrations for any app unless a data migration is involved. It&rsquo;s common to see 4 to 20 migrations when someone works on a database feature for a week. Most of the changes tend to be fiddly, where someone adds a field, renames the field, renames it again, and then starts using it, which prompts another <code>null=True</code> change followed by a <code>blank=True</code> migration.</p>\n<p>For small databases, none of this matters.</p>\n<p>For a database with 10s or 100s of millions of records, these small changes can cause minutes of downtime <em>per</em> migration, which amounts to a throwaway change. While there are ways to mitigate most migration downtime situations, that&rsquo;s different from my point today.</p>\n<p>I&rsquo;m also guilty of being fiddly with my Django model changes because I know I can delete and refactor them before requesting approval. The process I use is probably worth sharing because once every new client comes up.</p>\n<p>Let&rsquo;s assume I am working on <a href=\"https://jobs.django-news.com\">Django News Jobs</a>, and I am looking over my pull request one last time before I ask someone to review it. That&rsquo;s when I noticed four migrations that could quickly be rebuilt into one, starting with my <code>0020*</code> migration in my <code>jobs</code> app.</p>\n<p>The rough steps that I would do are:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#75715e\"># step 1: see the state of our migrations</span>\n$ python -m manage showmigrations jobs\njobs\n <span style=\"color:#f92672\">[</span>X<span style=\"color:#f92672\">]</span> 0001_initial\n ...\n <span style=\"color:#f92672\">[</span>X<span style=\"color:#f92672\">]</span> 0019_alter_iowa_versus_unconn\n <span style=\"color:#f92672\">[</span>X<span style=\"color:#f92672\">]</span> 0020_alter_something_i_should_delete\n <span style=\"color:#f92672\">[</span>X<span style=\"color:#f92672\">]</span> 0021_alter_uconn_didnt_foul\n <span style=\"color:#f92672\">[</span>X<span style=\"color:#f92672\">]</span> 0022_alter_nevermind_uconn_cant_rebound\n <span style=\"color:#f92672\">[</span>X<span style=\"color:#f92672\">]</span> 0023_alter_iowa_beats_uconn\n <span style=\"color:#f92672\">[</span>X<span style=\"color:#f92672\">]</span> 0024_alter_south_carolina_sunday_by_four\n\n<span style=\"color:#75715e\"># step 2: rollback migrations to our last &#34;good&#34; state</span>\n$ python -m manage migrate jobs <span style=\"color:#ae81ff\">0019</span>\n\n<span style=\"color:#75715e\"># step 3: delete our new migrations</span>\n$ rm jobs/migrations/002*\n\n<span style=\"color:#75715e\"># step 4: rebuild migrations </span>\npython -m manage makemigrations jobs \n\n<span style=\"color:#75715e\"># step 5: profit </span>\npython -m manage migrate jobs\n</code></pre></div><p>95% of the time, this is all I ever need to do.</p>\n<p>Occasionally, I check out another branch with conflicting migrations, and I&rsquo;ll get my <strong>local</strong> database in a weird state.</p>\n<p>In those cases, check out the <code>--fake</code> (&ldquo;Mark migrations as run without actually running them.&quot;) and <code>--prune</code> (&ldquo;Delete nonexistent migrations from the <code>django_migrations</code> table.&quot;) options. The fake and prune operations saved me several times when my <code>django_migrations</code> table was out of sync, and I knew that SQL tables were already altered.</p>\n<h2 id=\"what-not-squashmigrations\">What not <code>squashmigrations</code>?</h2>\n<p>Excellent question. <a href=\"https://docs.djangoproject.com/en/5.0/topics/migrations/#migration-squashing\">Squashing migrations</a> is wonderful if you care about keeping every or most of the operations each migration is doing. Most of the time, I do not, so I overlook it.</p>\n",
				"content_text": "One of Django's most powerful features is the ORM, which includes a robust migration framework. One of Django's most misunderstood features is Django migrations because it just works 99% of the time. \r\n\r\nEven when working solo, Django migrations are highly reliable, working 99.9% of the time and offering better uptime than most web services you may have used last week. \r\n\r\nThe most common stumbling block for developers of all skill levels is rolling back a Django migration and prepping a pull request for review. \r\n\r\nI'm not picky about pull requests or git commit history because I default to using the \"Squash and merge\" feature to turn all pull request commits into one merge commit. The merge commit tells me when, what, and why something changed if I need extra context. \r\n\r\nI am pickier about seeing >2 database migrations for any app unless a data migration is involved. It's common to see 4 to 20 migrations when someone works on a database feature for a week. Most of the changes tend to be fiddly, where someone adds a field, renames the field, renames it again, and then starts using it, which prompts another `null=True` change followed by a `blank=True` migration. \r\n\r\nFor small databases, none of this matters. \r\n\r\nFor a database with 10s or 100s of millions of records, these small changes can cause minutes of downtime *per* migration, which amounts to a throwaway change. While there are ways to mitigate most migration downtime situations, that's different from my point today. \r\n\r\nI'm also guilty of being fiddly with my Django model changes because I know I can delete and refactor them before requesting approval. The process I use is probably worth sharing because once every new client comes up. \r\n\r\nLet's assume I am working on [Django News Jobs](https://jobs.django-news.com), and I am looking over my pull request one last time before I ask someone to review it. That's when I noticed four migrations that could quickly be rebuilt into one, starting with my `0020*` migration in my `jobs` app.\r\n\r\nThe rough steps that I would do are:\r\n\r\n```bash\r\n# step 1: see the state of our migrations\r\n$ python -m manage showmigrations jobs\r\njobs\r\n [X] 0001_initial\r\n ...\r\n [X] 0019_alter_iowa_versus_unconn\r\n [X] 0020_alter_something_i_should_delete\r\n [X] 0021_alter_uconn_didnt_foul\r\n [X] 0022_alter_nevermind_uconn_cant_rebound\r\n [X] 0023_alter_iowa_beats_uconn\r\n [X] 0024_alter_south_carolina_sunday_by_four\r\n\r\n# step 2: rollback migrations to our last \"good\" state\r\n$ python -m manage migrate jobs 0019\r\n\r\n# step 3: delete our new migrations\r\n$ rm jobs/migrations/002*\r\n\r\n# step 4: rebuild migrations \r\npython -m manage makemigrations jobs \r\n\r\n# step 5: profit \r\npython -m manage migrate jobs\r\n```\r\n\r\n95% of the time, this is all I ever need to do. \r\n\r\nOccasionally, I check out another branch with conflicting migrations, and I'll get my **local** database in a weird state. \r\n\r\nIn those cases, check out the `--fake` (\"Mark migrations as run without actually running them.\") and `--prune` (\"Delete nonexistent migrations from the `django_migrations` table.\") options. The fake and prune operations saved me several times when my `django_migrations` table was out of sync, and I knew that SQL tables were already altered. \r\n\r\n## What not `squashmigrations`? \r\n\r\nExcellent question. [Squashing migrations](https://docs.djangoproject.com/en/5.0/topics/migrations/#migration-squashing) is wonderful if you care about keeping every or most of the operations each migration is doing. Most of the time, I do not, so I overlook it. \n",
				"date_published": "2024-04-06T14:59:54-05:00",
				"url": "https://micro.webology.dev/2024/04/06/refactoring-and-fiddling.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/05/syncing-django-waffle.html",
				"title": "‚õ≥ Syncing Django Waffle feature flags",
				"content_html": "<p>The <a href=\"https://github.com/jazzband/django-waffle\">django-waffle</a> feature flag library is helpful for projects where we want to release and test new features in production and have a controlled rollout. I also like using feature flags for resource-intensive features on a website that we want to toggle off during high-traffic periods. It&rsquo;s a nice escape hatch to fall back on if we need to turn off a feature and roll out a fix without taking down your website.</p>\n<p>While Waffle is a powerful tool, I understand the challenge of keeping track of feature flags in both code and the database. It&rsquo;s a pain point that many of us have experienced.</p>\n<p>Waffle has a <code>WAFFLE_CREATE_MISSING_FLAGS=True</code> setting that we can use to tell Waffle to create any missing flags in the database should it find one. While this helps discover which flags our application is using, we need to figure out how to clean up old flags in the long term.</p>\n<p>The pattern I landed on combines storing all our known feature flags and a note about what they do in our main settings file.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># settings.py</span>\n<span style=\"color:#f92672\">...</span> \n\nWAFFLE_CREATE_MISSING_FLAGS<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">True</span>\n\nWAFFLE_FEATURE_FLAGS <span style=\"color:#f92672\">=</span> {\n   <span style=\"color:#e6db74\">&#34;flag_one&#34;</span>: <span style=\"color:#e6db74\">&#34;This is a note about flag_one&#34;</span>,\n   <span style=\"color:#e6db74\">&#34;flag_two&#34;</span>: <span style=\"color:#e6db74\">&#34;This is a note about flag_two&#34;</span>,\n}\n</code></pre></div><p>We will use a management command to sync every feature flag we have listed in our settings file, and then we will clean up any missing feature flags.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># management/commands/sync_feature_flags.py</span>\n<span style=\"color:#f92672\">import</span> djclick <span style=\"color:#66d9ef\">as</span> click\n\n<span style=\"color:#f92672\">from</span> django.conf <span style=\"color:#f92672\">import</span> settings\n<span style=\"color:#f92672\">from</span> waffle.models <span style=\"color:#f92672\">import</span> Flag\n\n\n<span style=\"color:#a6e22e\">@click</span>()\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">command</span>():\n    <span style=\"color:#75715e\"># Create flags that don&#39;t exist</span>\n    <span style=\"color:#66d9ef\">for</span> name, note <span style=\"color:#f92672\">in</span> settings<span style=\"color:#f92672\">.</span>WAFFLE_FEATURE_FLAGS<span style=\"color:#f92672\">.</span>items():\n        flag, created <span style=\"color:#f92672\">=</span> Flag<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>update_or_create(\n            name<span style=\"color:#f92672\">=</span>name, defaults<span style=\"color:#f92672\">=</span>{<span style=\"color:#e6db74\">&#34;note&#34;</span>: note}\n        )\n        <span style=\"color:#66d9ef\">if</span> created:\n            print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;Created flag </span><span style=\"color:#e6db74\">{</span>name<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> (</span><span style=\"color:#e6db74\">{</span>flag<span style=\"color:#f92672\">.</span>pk<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">)&#34;</span>)\n\n    <span style=\"color:#75715e\"># Delete flags that are no longer registered in settings</span>\n    <span style=\"color:#66d9ef\">for</span> flag <span style=\"color:#f92672\">in</span> Flag<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>exclude(name__in<span style=\"color:#f92672\">=</span>settings<span style=\"color:#f92672\">.</span>FEATURE_FLAGS<span style=\"color:#f92672\">.</span>keys()):\n        flag<span style=\"color:#f92672\">.</span>delete()\n        print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;Deleted flag </span><span style=\"color:#e6db74\">{</span>flag<span style=\"color:#f92672\">.</span>name<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> (</span><span style=\"color:#e6db74\">{</span>flag<span style=\"color:#f92672\">.</span>pk<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">)&#34;</span>)\n\n</code></pre></div><p>We can use the <code>WAFFLE_CREATE_MISSING_FLAGS</code> settings as a failsafe to create any flags we might have accidently missed. They will stick out because they will not have a note associated with them.</p>\n<p>This pattern is also helpful in solving similar problems for scheduled tasks, which might also store their schedules in the database.</p>\n<p>Check out this example in the <a href=\"https://github.com/HackSoftware/Django-Styleguide?tab=readme-ov-file#periodic-tasks\">Django Styleguide</a> for how to sync Celery&rsquo;s scheduled tasks.</p>\n",
				"content_text": "The [django-waffle](https://github.com/jazzband/django-waffle) feature flag library is helpful for projects where we want to release and test new features in production and have a controlled rollout. I also like using feature flags for resource-intensive features on a website that we want to toggle off during high-traffic periods. It's a nice escape hatch to fall back on if we need to turn off a feature and roll out a fix without taking down your website. \n\nWhile Waffle is a powerful tool, I understand the challenge of keeping track of feature flags in both code and the database. It's a pain point that many of us have experienced. \n\nWaffle has a `WAFFLE_CREATE_MISSING_FLAGS=True` setting that we can use to tell Waffle to create any missing flags in the database should it find one. While this helps discover which flags our application is using, we need to figure out how to clean up old flags in the long term. \n\nThe pattern I landed on combines storing all our known feature flags and a note about what they do in our main settings file. \n\n```python\n# settings.py\n... \n\nWAFFLE_CREATE_MISSING_FLAGS=True\n\nWAFFLE_FEATURE_FLAGS = {\n   \"flag_one\": \"This is a note about flag_one\",\n   \"flag_two\": \"This is a note about flag_two\",\n}\n```\n\nWe will use a management command to sync every feature flag we have listed in our settings file, and then we will clean up any missing feature flags. \n\n```python\n# management/commands/sync_feature_flags.py\nimport djclick as click\n\nfrom django.conf import settings\nfrom waffle.models import Flag\n\n\n@click()\ndef command():\n    # Create flags that don't exist\n    for name, note in settings.WAFFLE_FEATURE_FLAGS.items():\n        flag, created = Flag.objects.update_or_create(\n            name=name, defaults={\"note\": note}\n        )\n        if created:\n            print(f\"Created flag {name} ({flag.pk})\")\n\n    # Delete flags that are no longer registered in settings\n    for flag in Flag.objects.exclude(name__in=settings.FEATURE_FLAGS.keys()):\n        flag.delete()\n        print(f\"Deleted flag {flag.name} ({flag.pk})\")\n\n```\n\nWe can use the `WAFFLE_CREATE_MISSING_FLAGS` settings as a failsafe to create any flags we might have accidently missed. They will stick out because they will not have a note associated with them. \n\nThis pattern is also helpful in solving similar problems for scheduled tasks, which might also store their schedules in the database. \n\nCheck out this example in the [Django Styleguide](https://github.com/HackSoftware/Django-Styleguide?tab=readme-ov-file#periodic-tasks) for how to sync Celery's scheduled tasks. \n",
				"date_published": "2024-04-05T21:58:28-05:00",
				"url": "https://micro.webology.dev/2024/04/05/syncing-django-waffle.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/04/the-upgrade-django.html",
				"title": "‚¨ÜÔ∏è The Upgrade Django project",
				"content_html": "<p><a href=\"https://upgradedjango.com\">Upgrade Django</a> is a <a href=\"https://www.revsys.com\">REVSYS</a> project we created six years ago and launched three years ago.</p>\n<p>The goal of Upgrade Django was to create a resource that made it easy to see at a glance which versions of the <a href=\"djangoproject.com\">Django web framework</a> are maintained and supported. We also wanted to catalog every release and common gotchas and link to helpful information like release notes, blog posts, and the tagged git branch on GitHub.</p>\n<p>We also wanted to make it easier to tell how long a given version of <a href=\"https://upgradedjango.com/4.2/\">Django would be supported</a> and what <a href=\"https://upgradedjango.com/4.1/\">phase of its release cycle</a> it is in.</p>\n<h2 id=\"future-features\">Future features</h2>\n<p>We have over a dozen features planned, but it&rsquo;s a project that primarily serves its original purpose.</p>\n<p>One feature on my list is that I&rsquo;d love to see every backward incompatible change between two Django versions. This way, if someone knows their website is running on <a href=\"https://upgradedjango.com/3.2/\">Django 3.2</a>, they could pick <a href=\"https://upgradedjango.com/4.2/\">Django 4.2</a> or <a href=\"https://upgradedjango.com/5.0/\">Django 5.0</a> version and get a comprehensive list with links to everything they need to upgrade between versions.</p>\n<p>Projects like Upgrade Django are fun to work on because once you collect a bunch of data and start working with it, new ways of comparing and presenting the information become more apparent.</p>\n<p>If you have ideas for improving Upgrade Django that would be useful to your needs, we&rsquo;d love to hear about them.</p>\n",
				"content_text": "[Upgrade Django](https://upgradedjango.com) is a [REVSYS](https://www.revsys.com) project we created six years ago and launched three years ago. \r\n\r\nThe goal of Upgrade Django was to create a resource that made it easy to see at a glance which versions of the [Django web framework](djangoproject.com) are maintained and supported. We also wanted to catalog every release and common gotchas and link to helpful information like release notes, blog posts, and the tagged git branch on GitHub. \r\n\r\nWe also wanted to make it easier to tell how long a given version of [Django would be supported](https://upgradedjango.com/4.2/) and what [phase of its release cycle](https://upgradedjango.com/4.1/) it is in. \r\n\r\n## Future features\r\n\r\nWe have over a dozen features planned, but it's a project that primarily serves its original purpose. \r\n\r\nOne feature on my list is that I'd love to see every backward incompatible change between two Django versions. This way, if someone knows their website is running on [Django 3.2](https://upgradedjango.com/3.2/), they could pick [Django 4.2](https://upgradedjango.com/4.2/) or [Django 5.0](https://upgradedjango.com/5.0/) version and get a comprehensive list with links to everything they need to upgrade between versions. \r\n\r\nProjects like Upgrade Django are fun to work on because once you collect a bunch of data and start working with it, new ways of comparing and presenting the information become more apparent. \r\n\r\nIf you have ideas for improving Upgrade Django that would be useful to your needs, we'd love to hear about them. \n",
				"date_published": "2024-04-04T19:37:35-05:00",
				"url": "https://micro.webology.dev/2024/04/04/the-upgrade-django.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/04/03/mise-is-really.html",
				"title": "üöÄ Mise is really fast",
				"content_html": "<p>A month or two ago, I stumbled on <a href=\"https://github.com/epogrebnyak/justpath\"><code>justpath</code></a>, which is worth installing to help clean up any PATH environment issues you may or may not realize you have.</p>\n<p>I was frustrated because every time I created a new tab in iTerm2, it took three or more seconds for whatever slowed everything in my bash/dotfiles.</p>\n<p>With <code>justpath</code>, I found it straightforward to identify and address several paths related to ruby, rbenv, cargo, golang, and others that were causing issues. Rather than continue to fight these apps, I deleted them and removed them from my <code>.bash*</code> files. To see if I broke anything, I opened a new iTerm tab, and I had a new shell prompt in less than a second.</p>\n<p>Since I needed access to Ruby, NPM, and other tools, I  switched over to <a href=\"https://github.com/jdx/mise\"><code>mise</code></a>, which promises to be one tool for managing these languages and tools. <code>mise</code> is also written in Rust, so I know it&rsquo;s fast by default.</p>\n<p>To get started, check out Mise&rsquo;s <a href=\"https://github.com/jdx/mise?tab=readme-ov-file#quickstart\">Quickstart</a> docs in their README. I modified their bash example and added it to my <code>.bash*</code> files.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#66d9ef\">if</span> command -v mise &gt; /dev/null 2&gt;&amp;1; <span style=\"color:#66d9ef\">then</span>\n    eval <span style=\"color:#e6db74\">&#34;</span><span style=\"color:#66d9ef\">$(</span>mise activate bash<span style=\"color:#66d9ef\">)</span><span style=\"color:#e6db74\">&#34;</span>;\n<span style=\"color:#66d9ef\">fi</span>\n</code></pre></div><p>Once Mise was set up, and I opened a new tab, I installed Go, Node.js, Ruby, and Rust:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># to install Go</span>\nmise install golang\n\n<span style=\"color:#75715e\"># to install Node.js</span>\nmise install node\n\n<span style=\"color:#75715e\"># to install Ruby</span>\nmise install ruby\n\n<span style=\"color:#75715e\"># to install Rust</span>\nmise install rust\n\n<span style=\"color:#75715e\"># to reshim/add these tool to our path...</span>\nmise reshim\n</code></pre></div><p>Eventually, I used Mise to install kubectl (boo) and yarn (hiss). Here is a list of everything on my older MacBook Pro that Mise is managing for me.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ mise list\nPlugin   Version  Config Source    Requested\ngo       1.22.2\nkubectl  1.22.2\nnode     20.10.0  ~/.tool-versions 20.10.0\nruby     3.3.0\nrust     1.77.1\nyarn     1.22.19\n</code></pre></div><p>Another nice feature of Mise is that you can list the versions of each tool that you want Mise to install and manage for you in a <code>.tool-versions</code> file.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ cat ~/.tool-versions\n<span style=\"color:#75715e\"># direnv latest</span>\n<span style=\"color:#75715e\"># golang latest</span>\n<span style=\"color:#75715e\"># kubectl 1.22.2</span>\n<span style=\"color:#75715e\"># nodejs 18.9.1</span>\n<span style=\"color:#75715e\"># nodejs lts</span>\n<span style=\"color:#75715e\"># ruby 3.1.2</span>\n<span style=\"color:#75715e\"># starship latest</span>\n<span style=\"color:#75715e\"># yarn 1.22.19</span>\nnodejs 20.10.0\n</code></pre></div><p>As a nice bonus, I discovered I could use Mise to manage the <code>direnv</code> and <code>starship</code> tools. In theory, Mise can also replace <code>direnv</code> with their built-in <a href=\"https://mise.jdx.dev/environments.html\">environment</a> support), but I haven&rsquo;t tried that feature yet.</p>\n<h2 id=\"results\">Results</h2>\n<p>Mise is a nice win. I cut my new iTerm2 tab/session time down to close to 1/4 of a second, and I have more granular control over which exact versions of each tool I&rsquo;m using.</p>\n<p>Overall, I still prefer to use <a href=\"https://github.com/pyenv/pyenv\"><code>pyenv</code></a> to manage my Python versions, so I&rsquo;m keeping that for now mainly because I use <code>pyenv-virtualenvwrapper</code> and a few other nice-to-haves. See my <a href=\"https://micro.webology.dev/2024/02/10/python-development-on.html\">Python Development on macOS Notes: pyenv and pyenv-virtualenvwrapper</a> article on why and how I manage those.</p>\n",
				"content_text": "A month or two ago, I stumbled on [`justpath`](https://github.com/epogrebnyak/justpath), which is worth installing to help clean up any PATH environment issues you may or may not realize you have. \n\nI was frustrated because every time I created a new tab in iTerm2, it took three or more seconds for whatever slowed everything in my bash/dotfiles. \n\nWith `justpath`, I found it straightforward to identify and address several paths related to ruby, rbenv, cargo, golang, and others that were causing issues. Rather than continue to fight these apps, I deleted them and removed them from my `.bash*` files. To see if I broke anything, I opened a new iTerm tab, and I had a new shell prompt in less than a second. \n\nSince I needed access to Ruby, NPM, and other tools, I  switched over to [`mise`](https://github.com/jdx/mise), which promises to be one tool for managing these languages and tools. `mise` is also written in Rust, so I know it's fast by default. \n\nTo get started, check out Mise's [Quickstart](https://github.com/jdx/mise?tab=readme-ov-file#quickstart) docs in their README. I modified their bash example and added it to my `.bash*` files.\n\n```shell\nif command -v mise > /dev/null 2>&1; then\n    eval \"$(mise activate bash)\";\nfi\n```\n\nOnce Mise was set up, and I opened a new tab, I installed Go, Node.js, Ruby, and Rust:\n\n```shell\n# to install Go\nmise install golang\n\n# to install Node.js\nmise install node\n\n# to install Ruby\nmise install ruby\n\n# to install Rust\nmise install rust\n\n# to reshim/add these tool to our path...\nmise reshim\n```\n\nEventually, I used Mise to install kubectl (boo) and yarn (hiss). Here is a list of everything on my older MacBook Pro that Mise is managing for me. \n\n```shell\n$ mise list\nPlugin   Version  Config Source    Requested\ngo       1.22.2\nkubectl  1.22.2\nnode     20.10.0  ~/.tool-versions 20.10.0\nruby     3.3.0\nrust     1.77.1\nyarn     1.22.19\n```\n\nAnother nice feature of Mise is that you can list the versions of each tool that you want Mise to install and manage for you in a `.tool-versions` file.\n\n```shell\n$ cat ~/.tool-versions\n# direnv latest\n# golang latest\n# kubectl 1.22.2\n# nodejs 18.9.1\n# nodejs lts\n# ruby 3.1.2\n# starship latest\n# yarn 1.22.19\nnodejs 20.10.0\n```\n\nAs a nice bonus, I discovered I could use Mise to manage the `direnv` and `starship` tools. In theory, Mise can also replace `direnv` with their built-in [environment](https://mise.jdx.dev/environments.html) support), but I haven't tried that feature yet. \n\n## Results\n\nMise is a nice win. I cut my new iTerm2 tab/session time down to close to 1/4 of a second, and I have more granular control over which exact versions of each tool I'm using. \n\nOverall, I still prefer to use [`pyenv`](https://github.com/pyenv/pyenv) to manage my Python versions, so I'm keeping that for now mainly because I use `pyenv-virtualenvwrapper` and a few other nice-to-haves. See my [Python Development on macOS Notes: pyenv and pyenv-virtualenvwrapper](https://micro.webology.dev/2024/02/10/python-development-on.html) article on why and how I manage those. \n",
				"date_published": "2024-04-03T19:27:03-05:00",
				"url": "https://micro.webology.dev/2024/04/03/mise-is-really.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/02/til-brandolinis-law.html",
				
				"content_html": "<p>TIL: Brandolini&rsquo;s law</p>\n<p>üí¨ The amount of energy needed to refute bullshit is an order of magnitude bigger than that needed to produce it.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Brandolini%27s_law\">en.wikipedia.org/wiki/Bran&hellip;</a></p>\n",
				"content_text": "TIL: Brandolini's law\r\n\r\nüí¨ The amount of energy needed to refute bullshit is an order of magnitude bigger than that needed to produce it.\r\n\r\n[en.wikipedia.org/wiki/Bran...](https://en.wikipedia.org/wiki/Brandolini%27s_law)\n",
				"date_published": "2024-04-02T11:49:55-05:00",
				"url": "https://micro.webology.dev/2024/04/02/til-brandolinis-law.html"
			},
			{
				"id": "http://webology.micro.blog/2024/04/01/an-update-on.html",
				"title": "üî• An update on OpenSSF's XZ fumble",
				"content_html": "<h2 id=\"openssfs-scorecards-is-going-just-great-\">OpenSSF&rsquo;s Scorecards is Going Just Great üî•</h2>\n<p>While I&rsquo;m happy that OpenSSF updated their blog post to remove all mentions of their scorecards, they forgot to mention why, apologize, or publicly acknowledge that they messed up.</p>\n<p>Since they rushed their first blog post and spent so little time on it, I wanted to point out the changes and equally spend very little time on why their scorecard is actively harmful to projects that handle security well.</p>\n<p>Today was a rare day off for me, and documenting the numerous red flags of OpenSSF&rsquo;s Scorecards isn&rsquo;t how I spent my Monday night, nor will I spend my Tuesday or any night on this.</p>\n<p>Instead, check out the Scorecards for these three popular projects.</p>\n<ul>\n<li><a href=\"https://securityscorecards.dev/viewer/?uri=github.com/pallets/flask\">Flask</a> scores a 6.9</li>\n<li><a href=\"https://securityscorecards.dev/viewer/?uri=github.com/python/cpython\">cpython</a> scores a 7.0</li>\n<li><a href=\"https://securityscorecards.dev/viewer/?uri=github.com/django/django\">Django</a> scores a 7.2</li>\n</ul>\n<p>If you aren&rsquo;t sure where to start, compare the &ldquo;Pinned-Dependencies&rdquo; and &ldquo;Best-Practices&rdquo; over the three projects. Then, look at the reference files and see if you agree.</p>\n<p>ü§∑</p>\n<h2 id=\"updates\">Updates</h2>\n<p>This <a href=\"https://mastodon.social/@davidism@mas.to/112198968259149635\">post by David Lord</a> is worth a star.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "## OpenSSF's Scorecards is Going Just Great üî•\n\nWhile I'm happy that OpenSSF updated their blog post to remove all mentions of their scorecards, they forgot to mention why, apologize, or publicly acknowledge that they messed up. \n\nSince they rushed their first blog post and spent so little time on it, I wanted to point out the changes and equally spend very little time on why their scorecard is actively harmful to projects that handle security well. \n\nToday was a rare day off for me, and documenting the numerous red flags of OpenSSF's Scorecards isn't how I spent my Monday night, nor will I spend my Tuesday or any night on this. \n\nInstead, check out the Scorecards for these three popular projects. \n\n- [Flask](https://securityscorecards.dev/viewer/?uri=github.com/pallets/flask) scores a 6.9\n- [cpython](https://securityscorecards.dev/viewer/?uri=github.com/python/cpython) scores a 7.0\n- [Django](https://securityscorecards.dev/viewer/?uri=github.com/django/django) scores a 7.2\n\nIf you aren't sure where to start, compare the \"Pinned-Dependencies\" and \"Best-Practices\" over the three projects. Then, look at the reference files and see if you agree. \n\nü§∑\n\n## Updates\n\nThis [post by David Lord](https://mastodon.social/@davidism@mas.to/112198968259149635) is worth a star. \n\n<iframe src=\"https://mas.to/@davidism/112198968229660761/embed\" width=\"400\" allowfullscreen=\"allowfullscreen\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-forms\"></iframe>\n",
				"date_published": "2024-04-01T22:07:39-05:00",
				"url": "https://micro.webology.dev/2024/04/01/an-update-on.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/31/sixty-days-of.html",
				"title": "6Ô∏è‚É£0Ô∏è‚É£ Sixty days of blogging ‚úçÔ∏è ",
				"content_html": "<p>Sixty days ago, I started blogging daily with my <a href=\"https://wiggle.work\">Wiggle Work</a> friends. Our goal was to blog every day in February, and I&rsquo;m happy to report that <a href=\"https://micro.webology.dev/2024/03/01/we-did-it.html\">all five of us</a> did.</p>\n<p>When March rolled around, I had a dozen+ drafts that I never fully fleshed out, so I decided to keep going. I have over two dozen drafts in various states that I never published. I feel good about having plenty of content and ideas to keep writing. I don&rsquo;t know what April will be like, but I feel comfortable about where I&rsquo;m going.</p>\n<p>Truthfully, the second month was much easier than the first, and there was no pressure to continue or not <a href=\"https://micro.webology.dev/2024/03/30/xz-update-dont.html\">say what I want to say</a> about something.</p>\n<p>Friends, I encourage you to write and publish more on your blog. If you struggle with editing (I sure as hell do), copy and paste your work into Grammarly or LanguageTool to minimally edit and publish them. That process has been good enough for me. You don&rsquo;t have to write daily, but I encourage you to publish more.</p>\n",
				"content_text": "Sixty days ago, I started blogging daily with my [Wiggle Work](https://wiggle.work) friends. Our goal was to blog every day in February, and I'm happy to report that [all five of us](https://micro.webology.dev/2024/03/01/we-did-it.html) did. \r\n\r\nWhen March rolled around, I had a dozen+ drafts that I never fully fleshed out, so I decided to keep going. I have over two dozen drafts in various states that I never published. I feel good about having plenty of content and ideas to keep writing. I don't know what April will be like, but I feel comfortable about where I'm going. \r\n\r\nTruthfully, the second month was much easier than the first, and there was no pressure to continue or not [say what I want to say](https://micro.webology.dev/2024/03/30/xz-update-dont.html) about something. \r\n\r\nFriends, I encourage you to write and publish more on your blog. If you struggle with editing (I sure as hell do), copy and paste your work into Grammarly or LanguageTool to minimally edit and publish them. That process has been good enough for me. You don't have to write daily, but I encourage you to publish more. \n",
				"date_published": "2024-03-31T22:44:53-05:00",
				"url": "https://micro.webology.dev/2024/03/31/sixty-days-of.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/30/xz-update-dont.html",
				"title": "xz update: Don't do this",
				"content_html": "<p>Don&rsquo;t do this. Compromised packages because of burned-out maintainers aren&rsquo;t a time to shill your scorecards that no one cares about.</p>\n<blockquote>\n<p>A malicious or compromised maintainer is extremely difficult to guard against using automated tools or supply chain security technologies. Looking back at the last OpenSSF Scorecard report on the xz repository, we do see a number of best practices such as Code-Review, Token-Permissions, Branch-Protection, and Static-Analysis were not enabled, nor did xz have the OpenSSF Best Practices badge. It&rsquo;s difficult to predict whether these settings on their own would have prevented this backdoor, however, security best practices were not followed.</p>\n</blockquote>\n<p>OpenSSF&rsquo;s Scorecard shows that the Django project is barely rated higher than xz. Django is a good test of the quality of rating systems and scorecards. When Django ranks poorly or average, you are measuring the wrong things.</p>\n<p>This isn&rsquo;t a mistake that only OpenSSF makes. I have seen a half dozen other services ding them for things like not having a Code of Conduct and then linking two or three examples that attribute Django&rsquo;s Code of Conduct.</p>\n<p>Pointing out that someone who is already burned out and never knew your best practices existed is a bad PR move.</p>\n<p>Even worse, we are now paying attention to your best practices, which don&rsquo;t hold water.</p>\n<p>Even worse, if you aren&rsquo;t proactively offering funding to these solo projects you knew were destined to fail, you are actively part of the problem and trying to profit from it. Please stop making it worse for the next burned-out maintainer.</p>\n<p>Also, project maintainers hate being opted into things they have yet to ask or sign up for.</p>\n<p>Do better OpenSSF.</p>\n",
				"content_text": "Don't do this. Compromised packages because of burned-out maintainers aren't a time to shill your scorecards that no one cares about. \r\n\r\n> A malicious or compromised maintainer is extremely difficult to guard against using automated tools or supply chain security technologies. Looking back at the last OpenSSF Scorecard report on the xz repository, we do see a number of best practices such as Code-Review, Token-Permissions, Branch-Protection, and Static-Analysis were not enabled, nor did xz have the OpenSSF Best Practices badge. It's difficult to predict whether these settings on their own would have prevented this backdoor, however, security best practices were not followed. \r\n\r\nOpenSSF's Scorecard shows that the Django project is barely rated higher than xz. Django is a good test of the quality of rating systems and scorecards. When Django ranks poorly or average, you are measuring the wrong things. \r\n\r\nThis isn't a mistake that only OpenSSF makes. I have seen a half dozen other services ding them for things like not having a Code of Conduct and then linking two or three examples that attribute Django's Code of Conduct. \r\n\r\nPointing out that someone who is already burned out and never knew your best practices existed is a bad PR move. \r\n\r\nEven worse, we are now paying attention to your best practices, which don't hold water. \r\n\r\nEven worse, if you aren't proactively offering funding to these solo projects you knew were destined to fail, you are actively part of the problem and trying to profit from it. Please stop making it worse for the next burned-out maintainer. \r\n\r\nAlso, project maintainers hate being opted into things they have yet to ask or sign up for. \r\n\r\nDo better OpenSSF. \n",
				"date_published": "2024-03-30T21:47:47-05:00",
				"url": "https://micro.webology.dev/2024/03/30/xz-update-dont.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/29/update-and-upgrade.html",
				"title": "‚¨ÜÔ∏è Update and upgrade Homebrew and `xz` versions",
				"content_html": "<p>After I left work today, I noticed a flood of messages about a vulnerability in the <code>xz</code> package that a few dozen of my Homebrew packages used.</p>\n<p>I find these <a href=\"https://github.com/orgs/Homebrew/discussions/5243\">security alerts</a> hard to read and understand, but here is what you need to do if you are on macOS and using Homebrew.</p>\n<p>Thankfully, the Homebrew community already has a fix in place, and all we need to do is update Homebrew and install the latest upgrades of any packages linked/built against <code>xz</code> version <code>5.6.x</code>.</p>\n<p>For more details, check out <a href=\"https://hackaday.com/2024/03/29/security-alert-potential-ssh-backdoor-via-liblzma/#respond\">Security Alert: Potential SSH Backdoor via LIBLZMA</a>.</p>\n<h2 id=\"am-i-vulnerable\">Am I vulnerable?</h2>\n<p>From your terminal run:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-bash\" data-lang=\"bash\">brew info xz\n<span style=\"color:#f92672\">==</span>&gt; xz: stable 5.4.6 <span style=\"color:#f92672\">(</span>bottled<span style=\"color:#f92672\">)</span>\n</code></pre></div><p>If your <code>xz</code> version is 5.4.x, you are safe. üëç</p>\n<p>If your <code>xz</code> version is 5.6.x, do not pass; go and update your Homebrew immediately. üëé</p>\n<h2 id=\"to-update-your-homebrew-version\">To update your Homebrew version</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">brew update\nbrew upgrade\n\nbrew info xz\n<span style=\"color:#f92672\">==</span>&gt; xz: stable 5.4.6 <span style=\"color:#f92672\">(</span>bottled<span style=\"color:#f92672\">)</span>\n</code></pre></div><h2 id=\"post-homebrew-upgrade\">Post Homebrew upgrade</h2>\n<p>Once you are done, I recommend rebooting your Mac and installing any recent macOS updates.</p>\n",
				"content_text": "After I left work today, I noticed a flood of messages about a vulnerability in the `xz` package that a few dozen of my Homebrew packages used. \r\n\r\nI find these [security alerts](https://github.com/orgs/Homebrew/discussions/5243) hard to read and understand, but here is what you need to do if you are on macOS and using Homebrew. \r\n\r\nThankfully, the Homebrew community already has a fix in place, and all we need to do is update Homebrew and install the latest upgrades of any packages linked/built against `xz` version `5.6.x`. \r\n\r\nFor more details, check out [Security Alert: Potential SSH Backdoor via LIBLZMA](https://hackaday.com/2024/03/29/security-alert-potential-ssh-backdoor-via-liblzma/#respond). \r\n\r\n## Am I vulnerable?\r\n\r\nFrom your terminal run:\r\n\r\n```bash\r\nbrew info xz\r\n==> xz: stable 5.4.6 (bottled)\r\n```\r\n\r\nIf your `xz` version is 5.4.x, you are safe. üëç\r\n\r\nIf your `xz` version is 5.6.x, do not pass; go and update your Homebrew immediately. üëé\r\n\r\n## To update your Homebrew version\r\n\r\n```shell\r\nbrew update\r\nbrew upgrade\r\n\r\nbrew info xz\r\n==> xz: stable 5.4.6 (bottled)\r\n```\r\n\r\n## Post Homebrew upgrade\r\n\r\nOnce you are done, I recommend rebooting your Mac and installing any recent macOS updates. \r\n",
				"date_published": "2024-03-29T19:00:01-05:00",
				"url": "https://micro.webology.dev/2024/03/29/update-and-upgrade.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/28/no-office-hours.html",
				"title": "üö® No office hours this week due to the holiday üö®",
				"content_html": "<p>üëã Hi friends,</p>\n<p>üö® Sorry to cancel this late, but no office hours this week. üö®</p>\n<p>Something had to give between the holiday weekend, a podcast I&rsquo;m recording, client work, and a few errands I need to run before we go out of town.</p>\n<p>üìÖ We&rsquo;ll be back <em>next week</em> on Friday, April 5th, 2024, from 2 PM to 4:30 PM Central Time (US and Canada) or use the magic link to convert to your timezone <a href=\"https://time.is/compare/200pm_05_April_2024_in_CT\">https://time.is/compare/200pm_05_April_2024_in_CT</a></p>\n",
				"content_text": "üëã Hi friends, \n\nüö® Sorry to cancel this late, but no office hours this week. üö®\n\nSomething had to give between the holiday weekend, a podcast I'm recording, client work, and a few errands I need to run before we go out of town. \n\nüìÖ We'll be back *next week* on Friday, April 5th, 2024, from 2 PM to 4:30 PM Central Time (US and Canada) or use the magic link to convert to your timezone https://time.is/compare/200pm_05_April_2024_in_CT \n",
				"date_published": "2024-03-28T22:26:40-05:00",
				"url": "https://micro.webology.dev/2024/03/28/no-office-hours.html",
				"tags": ["Office Hours"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/28/on-backups-and.html",
				"title": "On backups and building a portable backup drive solution",
				"content_html": "<p>According to ChatGPT, the 3-2-1 backup rule is a simple yet effective strategy for ensuring data safety in case of a loss or disaster. Here&rsquo;s what it stands for:</p>\n<ol>\n<li><strong>3 copies of your data:</strong>  Maintain three copies: the original and two backups.</li>\n<li><strong>2 different media:</strong> Store the backups on two distinct media types or platforms.</li>\n<li><strong>1 off-site backup:</strong> Keep at least one backup in a different physical location.</li>\n</ol>\n<h2 id=\"what-this-means-to-me\">What this means to me</h2>\n<h3 id=\"-three-copies-of-your-data\">‚úÖ Three copies of your data</h3>\n<blockquote>\n<p>Maintain three copies: the original and two backups.</p>\n</blockquote>\n<p>For our first copy, every one of my machines has hourly Time Machine backups via an external NVMe drive. These are quick, noiseless, and reliable. Even though Time Machine keeps copies through time, I consider each drive one copy since a drive can, in theory, become corrupt.</p>\n<p>Our second to third copies are from machine to machine via Syncthing with versioning turned on. If I were to lose a machine, one to three backup copies would automatically be floating on a powered-up machine.</p>\n<p>I keep a third remote copy on a loud Western Digital drive that I can connect for peace of mind. I also periodically clone my boot drive to this machine to have a bootable, working copy of my main work Mac and a Time Machine backup to restore from.</p>\n<h3 id=\"-two-different-media\">‚úÖ Two different media</h3>\n<blockquote>\n<p>Store the backups on two distinct media types or platforms.</p>\n</blockquote>\n<p>My local drives are NMVe drives from two vendors. I bought them when both brands were on sale when I built my last backup drives.</p>\n<p>I also have a Western Digital backup drive that is a noisy, spinning disk.</p>\n<h3 id=\"-one-off-site-backup\">‚úÖ One off-site backup</h3>\n<blockquote>\n<p>Keep at least one backup in a different physical location.</p>\n</blockquote>\n<p>My main machine runs Backblaze, giving me a nightly snapshot if I need it.</p>\n<p>I also have Syncthing between my home and office, giving me backup copies in two physical locations.</p>\n<p>I also keep all of my projects on GitHub and GitLab, which gives me an extra copy.</p>\n<h2 id=\"-my-portable-backup-drive-solution\">üßë‚Äçüç≥ My portable backup drive solution</h2>\n<p>(Links are in the parts list)</p>\n<p>While I can&rsquo;t recommend that you build your backup drive, I did out of necessity because I could not find a reasonably priced solution. I was happy with the large, clunky Western Digital external drives, but they were so loud I started looking for noiseless solutions.</p>\n<p>After reading many reviews, I settled on the Sabrent USB-C enclosure because it is small and barely bigger than the NVMe drives. The machine powers these drives, meaning they only need one USB-C cable to connect and power them.</p>\n<!-- raw HTML omitted -->\n<p>Based on reading review websites, I landed on the Samsung 970 EVO series drives. My first drive was a 250G drive, but I moved to 1 TB and 2 TB drives because I found them for &lt;$100 over the holiday sales.</p>\n<!-- raw HTML omitted -->\n<p>My go-to research tool for buying almost anything is <a href=\"https://camelcamelcamel.com\">camelcamelcamel</a>. The website is free to use, and it can show you historical information so that you know if you are paying average, above, or below cost for a production on Amazon. Registering an account with them can create a price alert and get an email during a periodic sale.</p>\n<!-- raw HTML omitted -->\n<p><strong>Pro tip:</strong> When you have two young kids who keep you home on the weekends, you quickly learn that Friday nights are the cheapest day to buy just about anything. So even if camelcamelcamel doesn&rsquo;t alert you, check out the website and on Amazon, and you&rsquo;ll see a trend. Once again, being a parent who is home on a Friday night is an excellent life hack.</p>\n<h3 id=\"features-of-building-your-own\">Features of building your own</h3>\n<ul>\n<li>Silent because there are no spinning disks or noisy fans</li>\n<li>Portable</li>\n<li>USB-C speed and ease</li>\n<li>Powered over USB-C without a clunky power supply</li>\n<li>They are tiny</li>\n<li>BYOD - Bring your own drive</li>\n<li>It takes less than a minute to assemble</li>\n<li>Cheap to build - If you buy at the right time, you can build a 1 TB or 2 TB backup drive for under &lt;$100</li>\n</ul>\n<h3 id=\"parts-list\">Parts list</h3>\n<ul>\n<li><a href=\"https://camelcamelcamel.com/product/B08RVC6F9Y\">SABRENT USB 3.2 10Gbps Type C Tool Free Enclosure</a> for $26 to $29</li>\n<li>Favorite drive: <a href=\"https://camelcamelcamel.com/product/B07MFZXR1B\">SAMSUNG 970 EVO Plus SSD 2TB - M.2 NVMe</a> for $75 to $129</li>\n<li>Reasonable drive: <a href=\"https://camelcamelcamel.com/product/B09JM8DJNS\">Western Digital 2TB WD Blue SN570 NVMe </a> for $85 to $129</li>\n<li>Longer USB-C cable?</li>\n</ul>\n<p>The USB-C cable with the SABRENT is good enough, but it&rsquo;s short. It&rsquo;s fine on most of my computers, but I bought a longer Anker USB-C cable for my MacBook Pro to keep it out of the way.</p>\n<h2 id=\"results\">Results</h2>\n<p>I didn&rsquo;t expect my backup drives to work as well as they did. I tried my first one out for about a year, and then I built two more last year.</p>\n",
				"content_text": "According to ChatGPT, the 3-2-1 backup rule is a simple yet effective strategy for ensuring data safety in case of a loss or disaster. Here's what it stands for:\n \n 1. **3 copies of your data:**  Maintain three copies: the original and two backups.\n 2. **2 different media:** Store the backups on two distinct media types or platforms.\n 3. **1 off-site backup:** Keep at least one backup in a different physical location.\n\n## What this means to me\n\n### ‚úÖ Three copies of your data\n\n> Maintain three copies: the original and two backups.\n\nFor our first copy, every one of my machines has hourly Time Machine backups via an external NVMe drive. These are quick, noiseless, and reliable. Even though Time Machine keeps copies through time, I consider each drive one copy since a drive can, in theory, become corrupt.\n\nOur second to third copies are from machine to machine via Syncthing with versioning turned on. If I were to lose a machine, one to three backup copies would automatically be floating on a powered-up machine. \n\nI keep a third remote copy on a loud Western Digital drive that I can connect for peace of mind. I also periodically clone my boot drive to this machine to have a bootable, working copy of my main work Mac and a Time Machine backup to restore from. \n\n### ‚úÖ Two different media\n\n> Store the backups on two distinct media types or platforms.\n\nMy local drives are NMVe drives from two vendors. I bought them when both brands were on sale when I built my last backup drives. \n\nI also have a Western Digital backup drive that is a noisy, spinning disk.\n\n### ‚úÖ One off-site backup\n\n> Keep at least one backup in a different physical location.\n\nMy main machine runs Backblaze, giving me a nightly snapshot if I need it. \n\nI also have Syncthing between my home and office, giving me backup copies in two physical locations. \n\nI also keep all of my projects on GitHub and GitLab, which gives me an extra copy. \n\n## üßë‚Äçüç≥ My portable backup drive solution\n\n(Links are in the parts list)\n\nWhile I can't recommend that you build your backup drive, I did out of necessity because I could not find a reasonably priced solution. I was happy with the large, clunky Western Digital external drives, but they were so loud I started looking for noiseless solutions. \n\nAfter reading many reviews, I settled on the Sabrent USB-C enclosure because it is small and barely bigger than the NVMe drives. The machine powers these drives, meaning they only need one USB-C cable to connect and power them. \n\n<img src=\"uploads/2024/1-fullsizerender.jpg\" width=\"600\" height=\"450\" alt=\"Sabrent USB-C drive enclosure\">\n\nBased on reading review websites, I landed on the Samsung 970 EVO series drives. My first drive was a 250G drive, but I moved to 1 TB and 2 TB drives because I found them for <$100 over the holiday sales. \n\n<img src=\"uploads/2024/2-img-1192.jpg\" width=\"450\" height=\"600\" alt=\"Sabrent USB-C drive enclosure open to show a Samsung 970 EVO NVMe drive\">\n\nMy go-to research tool for buying almost anything is [camelcamelcamel](https://camelcamelcamel.com). The website is free to use, and it can show you historical information so that you know if you are paying average, above, or below cost for a production on Amazon. Registering an account with them can create a price alert and get an email during a periodic sale. \n\n<img src=\"uploads/2024/3-img-1194.jpg\" width=\"600\" height=\"450\" alt=\"Sabrent USB-C drive enclosure next to an Apple Watch for scale.\">\n\n**Pro tip:** When you have two young kids who keep you home on the weekends, you quickly learn that Friday nights are the cheapest day to buy just about anything. So even if camelcamelcamel doesn't alert you, check out the website and on Amazon, and you'll see a trend. Once again, being a parent who is home on a Friday night is an excellent life hack. \n\n### Features of building your own\n\n- Silent because there are no spinning disks or noisy fans\n- Portable\n- USB-C speed and ease\n- Powered over USB-C without a clunky power supply\n- They are tiny\n- BYOD - Bring your own drive\n- It takes less than a minute to assemble\n- Cheap to build - If you buy at the right time, you can build a 1 TB or 2 TB backup drive for under <$100\n\n### Parts list\n\n- [SABRENT USB 3.2 10Gbps Type C Tool Free Enclosure](https://camelcamelcamel.com/product/B08RVC6F9Y) for $26 to $29\n- Favorite drive: [SAMSUNG 970 EVO Plus SSD 2TB - M.2 NVMe](https://camelcamelcamel.com/product/B07MFZXR1B) for $75 to $129\n- Reasonable drive: [Western Digital 2TB WD Blue SN570 NVMe ](https://camelcamelcamel.com/product/B09JM8DJNS) for $85 to $129\n- Longer USB-C cable? \n\nThe USB-C cable with the SABRENT is good enough, but it's short. It's fine on most of my computers, but I bought a longer Anker USB-C cable for my MacBook Pro to keep it out of the way. \n\n## Results\n\nI didn't expect my backup drives to work as well as they did. I tried my first one out for about a year, and then I built two more last year. \n",
				"date_published": "2024-03-28T19:22:50-05:00",
				"url": "https://micro.webology.dev/2024/03/28/on-backups-and.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/27/on-syncthing-and.html",
				"title": "On Syncthing and multiple devices",
				"content_html": "<p>When my son started kindergarten last year, I started experiencing a bit of &ldquo;carrying things withdrawal&rdquo;‚Äîfor lack of a better term.</p>\n<p>We had a good routine for his first five years and the first year and a half after my daughter was born. Every Monday, we loaded everyone&rsquo;s backpacks into the car. I drove them to daycare/preschool and then went to work at the office or back home. Every Friday, we hauled the kids' stuff back. After kindergarten started, the sheer number of things multiplied to a daily backpack, water bottles, milk, and snacks, and I juggled all the things, plus carrying my one-year-old.</p>\n<p>For years, I alternated between a backpack and a Satchel to carry my MacBook Pro to the office on days I was going in. I even picked up a much larger tote to bring everything and sort it out when we arrived.</p>\n<p>I was burnt out on carrying things to the point that I dreamed of not having to bring anything with me except for my iPhone and my keys.</p>\n<p>I was overdue for a new work machine, so I used this as an excuse to try a Mac desktop. For the office, I switched to a Mac Studio. For my home office, I picked up a Mac Mini Pro. I started using my MacBook Pro as a floater around the house and taking trips with me.</p>\n<h2 id=\"syncing-files\">Syncing files</h2>\n<p>My only pain point was keeping files and projects synced between machines. I already use Apple&rsquo;s iCloud/iDisk, which takes care of my documents and random desktop files, but I wanted something else that wasn&rsquo;t Dropbox to keep my development projects always in sync.</p>\n<p>I&rsquo;ve been using <a href=\"https://tailscale.com\">Tailscale</a> for a few years. It creates a virtual network that allows all my devices and machines to see each other regardless of location.</p>\n<p>I tried several file-syncing solutions before landing on Syncthing, which is also open-source. Syncthing appealed to me because it&rsquo;s a peer-to-peer application that doesn&rsquo;t require a server to run.</p>\n<p>I wanted control over where my data was physically located, which ruled out Dropbox, iDisk, and others. Most of my projects sync from upstairs to downstairs, and no company&rsquo;s business model sits between me and my data.</p>\n<p>Because all my projects are folder-based, I can share each project folder and choose which machine should have access to them. The process is more manual than I&rsquo;d like, but it&rsquo;s quick, and everything works. This also allows me to control where work and personal files are synced.</p>\n<h2 id=\"hardware\">Hardware</h2>\n<p>I&rsquo;m running Syncthing on four physical machines, which include three Macs and one Intel NUC. My NUC is my main distribution point and is wired directly into my home router, whereas my Macs are connected wirelessly.</p>\n<h2 id=\"setup\">Setup</h2>\n<p>Setup is a breeze on Linux and macOS and only takes a few seconds with your favorite package manager. Once you install Syncthing, you can run the service and copy a key, which you can share with your other nodes so they can communicate and share files.</p>\n<p>The only annoying part is keeping my <code>.stignore</code> files in sync when I find a new pattern. While I primarily develop on M2 Macs, my MacBook Pro is an Intel model. I occasionally run into a weird issue from a cache file tied to one architecture over another.</p>\n<p>So far, I have landed on:</p>\n<pre tabindex=\"0\"><code># .stignore\r\n*.pyc\r\n*.pyi\r\n.*cache/\r\n.DS_Store\r\n.envrc\r\n.nox/\r\n.vendor/\r\ndocker-compose.override.yml\r\n</code></pre><p>I wanted my <code>.git</code> folder excluded from syncing, but I changed my mind. It&rsquo;s nice to be on the same branch, no matter which machine I&rsquo;m developing on.</p>\n<h2 id=\"the-results\">The results</h2>\n<p>My transition back to a desktop machine was 100% worth it. As long as I have my keys and iPhone, I have everything I need to be productive.</p>\n<p>I have never noticed any latency or file syncing delays between devices. It takes less time than it takes me to walk up or down stairs to switch between devices, so that&rsquo;s a win in my book.</p>\n<h2 id=\"bonus\">Bonus</h2>\n<p>I also run Tailscale&rsquo;s <a href=\"https://github.com/tailscale/golink\">golink</a> private short link service on my NUC, which makes remembering how to access Syncing things easier.</p>\n<p>http://go/syncthing will redirect me to http://127.0.0.1:8384 no matter which machine I&rsquo;m on. I never have to remember which port Syncthing&rsquo;s web interface runs on again.</p>\n",
				"content_text": "When my son started kindergarten last year, I started experiencing a bit of \"carrying things withdrawal\"‚Äîfor lack of a better term. \r\n\r\nWe had a good routine for his first five years and the first year and a half after my daughter was born. Every Monday, we loaded everyone's backpacks into the car. I drove them to daycare/preschool and then went to work at the office or back home. Every Friday, we hauled the kids' stuff back. After kindergarten started, the sheer number of things multiplied to a daily backpack, water bottles, milk, and snacks, and I juggled all the things, plus carrying my one-year-old. \r\n\r\nFor years, I alternated between a backpack and a Satchel to carry my MacBook Pro to the office on days I was going in. I even picked up a much larger tote to bring everything and sort it out when we arrived. \r\n\r\nI was burnt out on carrying things to the point that I dreamed of not having to bring anything with me except for my iPhone and my keys. \r\n\r\nI was overdue for a new work machine, so I used this as an excuse to try a Mac desktop. For the office, I switched to a Mac Studio. For my home office, I picked up a Mac Mini Pro. I started using my MacBook Pro as a floater around the house and taking trips with me. \r\n\r\n## Syncing files \r\n\r\nMy only pain point was keeping files and projects synced between machines. I already use Apple's iCloud/iDisk, which takes care of my documents and random desktop files, but I wanted something else that wasn't Dropbox to keep my development projects always in sync. \r\n\r\nI've been using [Tailscale](https://tailscale.com) for a few years. It creates a virtual network that allows all my devices and machines to see each other regardless of location. \r\n\r\nI tried several file-syncing solutions before landing on Syncthing, which is also open-source. Syncthing appealed to me because it's a peer-to-peer application that doesn't require a server to run. \r\n\r\nI wanted control over where my data was physically located, which ruled out Dropbox, iDisk, and others. Most of my projects sync from upstairs to downstairs, and no company's business model sits between me and my data. \r\n\r\nBecause all my projects are folder-based, I can share each project folder and choose which machine should have access to them. The process is more manual than I'd like, but it's quick, and everything works. This also allows me to control where work and personal files are synced. \r\n\r\n## Hardware\r\n\r\nI'm running Syncthing on four physical machines, which include three Macs and one Intel NUC. My NUC is my main distribution point and is wired directly into my home router, whereas my Macs are connected wirelessly. \r\n\r\n## Setup\r\n\r\nSetup is a breeze on Linux and macOS and only takes a few seconds with your favorite package manager. Once you install Syncthing, you can run the service and copy a key, which you can share with your other nodes so they can communicate and share files. \r\n\r\nThe only annoying part is keeping my `.stignore` files in sync when I find a new pattern. While I primarily develop on M2 Macs, my MacBook Pro is an Intel model. I occasionally run into a weird issue from a cache file tied to one architecture over another. \r\n\r\nSo far, I have landed on: \r\n\r\n```\r\n# .stignore\r\n*.pyc\r\n*.pyi\r\n.*cache/\r\n.DS_Store\r\n.envrc\r\n.nox/\r\n.vendor/\r\ndocker-compose.override.yml\r\n```\r\n\r\nI wanted my `.git` folder excluded from syncing, but I changed my mind. It's nice to be on the same branch, no matter which machine I'm developing on. \r\n\r\n## The results\r\n\r\nMy transition back to a desktop machine was 100% worth it. As long as I have my keys and iPhone, I have everything I need to be productive. \r\n\r\nI have never noticed any latency or file syncing delays between devices. It takes less time than it takes me to walk up or down stairs to switch between devices, so that's a win in my book. \r\n\r\n## Bonus\r\n\r\nI also run Tailscale's [golink](https://github.com/tailscale/golink) private short link service on my NUC, which makes remembering how to access Syncing things easier. \r\n\r\nhttp://go/syncthing will redirect me to http://127.0.0.1:8384 no matter which machine I'm on. I never have to remember which port Syncthing's web interface runs on again. \n",
				"date_published": "2024-03-27T21:31:40-05:00",
				"url": "https://micro.webology.dev/2024/03/27/on-syncthing-and.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/26/django-chat-recording.html",
				"title": "Django Chat recording today",
				"content_html": "<p>I was on the  <a href=\"https://djangochat.com\">Django Chat podcast</a> today, but since the episode will not come out for a few more months, I am sharing a few links for upcoming events and deadlines.</p>\n<p><a href=\"https://2024.djangocon.us/speaking/\">DjangoCon US CFP</a> is open through April 24th. I plan to publish my list of ideas soon. If you contact me, I have a gist to share if you would like an advanced preview.</p>\n<p><a href=\"https://www.defna.org\">DEFNA</a> is seeking a new <a href=\"https://www.defna.org/announcements/2024/03/26/defna-board-member-recruitment/\">director/treasurer</a> through April 9th. Our board seats only become available every few years, so this is an excellent opportunity to contribute to a non-profit and to help the Django community.</p>\n<p><a href=\"https://djangonaut.space\">Djangonaut Space</a> <a href=\"https://djangonaut.space/sessions/\">2024 Session 2</a> applications open on April 15th and close on May 13th.</p>\n<p>We covered many topics, and I&rsquo;m curious about what makes the final cut. It was also a long day, so today is my short post. We covered everything today.</p>\n",
				"content_text": "I was on the  [Django Chat podcast](https://djangochat.com) today, but since the episode will not come out for a few more months, I am sharing a few links for upcoming events and deadlines. \r\n\r\n[DjangoCon US CFP](https://2024.djangocon.us/speaking/) is open through April 24th. I plan to publish my list of ideas soon. If you contact me, I have a gist to share if you would like an advanced preview. \r\n\r\n[DEFNA](https://www.defna.org) is seeking a new [director/treasurer](https://www.defna.org/announcements/2024/03/26/defna-board-member-recruitment/) through April 9th. Our board seats only become available every few years, so this is an excellent opportunity to contribute to a non-profit and to help the Django community. \r\n\r\n[Djangonaut Space](https://djangonaut.space) [2024 Session 2](https://djangonaut.space/sessions/) applications open on April 15th and close on May 13th. \r\n\r\nWe covered many topics, and I'm curious about what makes the final cut. It was also a long day, so today is my short post. We covered everything today. \r\n",
				"date_published": "2024-03-26T22:18:09-05:00",
				"url": "https://micro.webology.dev/2024/03/26/django-chat-recording.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/25/things-i-can.html",
				"title": "Things I can never remember how to do: Django Signals edition",
				"content_html": "<p>I am several weeks into working on a project with my colleague, Lacey Henschel. Today, while reviewing one of her pull requests, I was reminded how to test a Django Signal via mocking.</p>\n<p>Testing Django signals is valuable to me because I need help remembering how to test a signal, and even with lots of effort, it never works. So bookmark this one, friends. It works.</p>\n<p>Thankfully, she wrote it up in one of her <a href=\"https://github.com/williln/til/blob/main/django/how_i_added_django_activity_stream_with_test.md\">TIL: How I set up¬†<code>django-activity-stream</code>, including a simple test</a></p>\n<!-- raw HTML omitted -->\n<p><a href=\"https://mastodon.social/@lacey@hachyderm.io\">https://mastodon.social/@lacey@hachyderm.io</a></p>\n",
				"content_text": "I am several weeks into working on a project with my colleague, Lacey Henschel. Today, while reviewing one of her pull requests, I was reminded how to test a Django Signal via mocking. \r\n\r\nTesting Django signals is valuable to me because I need help remembering how to test a signal, and even with lots of effort, it never works. So bookmark this one, friends. It works. \r\n\r\nThankfully, she wrote it up in one of her [TIL: How I set up¬†`django-activity-stream`, including a simple test](https://github.com/williln/til/blob/main/django/how_i_added_django_activity_stream_with_test.md)\r\n\r\n<iframe src=\"https://hachyderm.io/@lacey/112157634161607539/embed\" width=\"400\" allowfullscreen=\"allowfullscreen\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-forms\"></iframe>\r\n\r\nhttps://mastodon.social/@lacey@hachyderm.io\r\n",
				"date_published": "2024-03-25T16:13:15-05:00",
				"url": "https://micro.webology.dev/2024/03/25/things-i-can.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/24/w-weeknotes-for.html",
				"title": "2024-W12 - Weeknotes for Week 12: March 18 to March 24",
				"content_html": "<h2 id=\"family\">Family</h2>\n<p>Spring Break is over for my kids, and they both returned to school. Both kids seemed healthy again, but then we had a doctor&rsquo;s appointment on Thursday and a follow-up appointment on Friday. Everything was fine, and everyone was healthy.</p>\n<h2 id=\"work\">Work</h2>\n<p>It was a short week for us. I spent most of my week working on the green field project again and then on some internal projects.</p>\n<h2 id=\"community\">Community</h2>\n<p>I only had a little time for community projects this week. What little time I did have was spent at the bank getting paperwork for the next DEFNA board.</p>\n<h2 id=\"side-projects\">Side projects</h2>\n<p><strong>Django News Newsletter:</strong>¬†We shipped issue¬†<a href=\"https://django-news.com/issues/224#start\">#224</a>.</p>\n<p><a href=\"https://jobs.django-news.com\">Django News Jobs</a>: I fixed/simplified a few layout issues. I also spoke to a few companies that use the service, changed how jobs are submitted, and cleaned up some of the messaging around it.</p>\n<p>Django News Portal: Django News has a portal I have never publicly launched. I use it for some of my contributions and to double-check that we get all the big releases. I spend some time working on it over my break.</p>\n<p>Django News Browser Extension: We also have an unreleased Browser Extension I have used for three or more years. I used it with Chrome, but since switching to Vivaldi, I have yet to figure out how to make it work as my new page. I might release this in April.</p>\n<p><strong>Django Packages:</strong>¬†We only had a few minor updates this week. I fixed UV, and we improved Sentry profiling.</p>\n<p>Fun projects: I dabbled with a Bootstrap to Tailwind CSS converter project. I also dusted off an old Git Bot project I wrote about in my <a href=\"https://micro.webology.dev/2024/03/23/on-scratching-itches.html\">On Scratching itches with Python</a> post.</p>\n<h2 id=\"writing\">Writing</h2>\n<p>I wrote and published every day.</p>\n<p><a href=\"https://micro.webology.dev/2024/03/23/on-scratching-itches.html\">2024-03-23</a>:¬†<strong>On scratching itches with Python</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/22/automated-python-and.html\">2024-03-22</a>:¬†<strong>Automated Python and Django upgrades</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/21/fixing-a-css.html\">2024-03-21</a>:¬†<strong>Fixing a CSS layout issue</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/20/on-robotstxt.html\">2024-03-20</a>:¬†<strong>ü§ñ On Robots.txt</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/19/justfile-alfred-plugin.html\">2024-03-19</a>:¬†<strong>Justfile Alfred Plugin</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/18/weeknotes-for-week.html\">2024-03-18</a>:¬†<strong>Weeknotes for Week 11: March 11 to March 17</strong>¬†</p>\n<h2 id=\"me-time\">&ldquo;Me&rdquo; time</h2>\n<p>I took my annual March Madness break and watched basketball from Thursday through Sunday.</p>\n<p>My Jayhawks Men&rsquo;s basketball team won the first round but fell in the second round, while the Jayhawks Women&rsquo;s team was still in their respective tournament. Overall, it was a rare down year for the men, and it was great to see the women make the tournament and knock off a good team to advance to the Round of 32.</p>\n<h2 id=\"next-week\">Next week</h2>\n<p>I was asked to appear on two different podcasts, and I&rsquo;ll be recording those next week.</p>\n<p>As of tonight, I plan to host Office Hours next week, but someone mentioned it being a holiday weekend. I will figure that out sooner than later this week.</p>\n",
				"content_text": "## Family\r\n\r\nSpring Break is over for my kids, and they both returned to school. Both kids seemed healthy again, but then we had a doctor's appointment on Thursday and a follow-up appointment on Friday. Everything was fine, and everyone was healthy. \r\n\r\n## Work\r\n\r\nIt was a short week for us. I spent most of my week working on the green field project again and then on some internal projects. \r\n\r\n## Community\r\n\r\nI only had a little time for community projects this week. What little time I did have was spent at the bank getting paperwork for the next DEFNA board. \r\n\r\n## Side projects\r\n\r\n**Django News Newsletter:**¬†We shipped issue¬†[#224](https://django-news.com/issues/224#start).\r\n\r\n[Django News Jobs](https://jobs.django-news.com): I fixed/simplified a few layout issues. I also spoke to a few companies that use the service, changed how jobs are submitted, and cleaned up some of the messaging around it. \r\n\r\nDjango News Portal: Django News has a portal I have never publicly launched. I use it for some of my contributions and to double-check that we get all the big releases. I spend some time working on it over my break. \r\n\r\nDjango News Browser Extension: We also have an unreleased Browser Extension I have used for three or more years. I used it with Chrome, but since switching to Vivaldi, I have yet to figure out how to make it work as my new page. I might release this in April. \r\n\r\n**Django Packages:**¬†We only had a few minor updates this week. I fixed UV, and we improved Sentry profiling. \r\n\r\nFun projects: I dabbled with a Bootstrap to Tailwind CSS converter project. I also dusted off an old Git Bot project I wrote about in my [On Scratching itches with Python](https://micro.webology.dev/2024/03/23/on-scratching-itches.html) post. \r\n\r\n## Writing\r\n\r\nI wrote and published every day.\r\n\r\n[2024-03-23](https://micro.webology.dev/2024/03/23/on-scratching-itches.html):¬†**On scratching itches with Python**¬†\r\n\r\n[2024-03-22](https://micro.webology.dev/2024/03/22/automated-python-and.html):¬†**Automated Python and Django upgrades**¬†\r\n\r\n[2024-03-21](https://micro.webology.dev/2024/03/21/fixing-a-css.html):¬†**Fixing a CSS layout issue**¬†\r\n\r\n[2024-03-20](https://micro.webology.dev/2024/03/20/on-robotstxt.html):¬†**ü§ñ On Robots.txt**¬†\r\n\r\n[2024-03-19](https://micro.webology.dev/2024/03/19/justfile-alfred-plugin.html):¬†**Justfile Alfred Plugin**¬†\r\n\r\n[2024-03-18](https://micro.webology.dev/2024/03/18/weeknotes-for-week.html):¬†**Weeknotes for Week 11: March 11 to March 17**¬†\r\n\r\n## \"Me\" time\r\n\r\nI took my annual March Madness break and watched basketball from Thursday through Sunday. \r\n\r\nMy Jayhawks Men's basketball team won the first round but fell in the second round, while the Jayhawks Women's team was still in their respective tournament. Overall, it was a rare down year for the men, and it was great to see the women make the tournament and knock off a good team to advance to the Round of 32. \r\n\r\n## Next week\r\n\r\nI was asked to appear on two different podcasts, and I'll be recording those next week. \r\n\r\nAs of tonight, I plan to host Office Hours next week, but someone mentioned it being a holiday weekend. I will figure that out sooner than later this week. \r\n",
				"date_published": "2024-03-24T21:02:23-05:00",
				"url": "https://micro.webology.dev/2024/03/24/w-weeknotes-for.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/23/on-scratching-itches.html",
				"title": "On scratching itches with Python",
				"content_html": "<p>Python is such a fantastic glue language. Last night, while watching March Madness basketball games, I had a programming itch I wanted to scratch.</p>\n<p>I dusted off a demo I wrote several years ago. It used Python&rsquo;s subprocess module, which strings together a bunch of shell commands to perform a git checkout, run a few commands, and then commit the results. The script worked, but I struggled to get it fully working in a production environment.</p>\n<p>To clean things up and as an excuse to try out a new third-party package, I converted the script to use:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/gitpython-developers/GitPython\">GitPython</a> - GitPython is a Python library used to interact with Git repositories.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/dgilland/shelmet\">Shelmet</a> - A shell power-up for working with the file system and running subprocess commands.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/django-q2/django-q2\">Django Q2</a> - A multiprocessing distributed task queue for Django based on Django-Q.</p>\n</li>\n</ul>\n<p>Using Django might have been overkill, but having a Repository model to work with felt nice. Django Q2 was also overkill, but if I put this app into production, I&rsquo;ll want a task queue, and Django Q2 has a manageable amount of overhead.</p>\n<p>GitPython was a nice improvement over calling git commands directly because their API makes it easier to see which files were modified and to check against existing branch names. I was happy with the results after porting my subprocess commands to the GitPython API.</p>\n<p>The final package I used is a new package called Shelmet, which was both a nice wrapper around subprocess plus they have a nice API for file system operations in the same vein as Python&rsquo;s Pathlib module.</p>\n<h2 id=\"future-goals\">Future goals</h2>\n<p>I was tempted to cobble together a GitHub bot, but I didn&rsquo;t need one. I might dabble with the GitHub API more to fork a repo, but for now, this landed in a better place, so when I pick it back up again in a year, I&rsquo;m starting in a good place.</p>\n<p>If you want to write a GitHub bot, check out <a href=\"https://github.com/Mariatta\">Mariatta</a>&rsquo;s <a href=\"https://github.com/Mariatta/black_out\">black_out</a> project.</p>\n",
				"content_text": "Python is such a fantastic glue language. Last night, while watching March Madness basketball games, I had a programming itch I wanted to scratch. \r\n\r\nI dusted off a demo I wrote several years ago. It used Python's subprocess module, which strings together a bunch of shell commands to perform a git checkout, run a few commands, and then commit the results. The script worked, but I struggled to get it fully working in a production environment. \r\n\r\nTo clean things up and as an excuse to try out a new third-party package, I converted the script to use: \r\n\r\n- [GitPython](https://github.com/gitpython-developers/GitPython) - GitPython is a Python library used to interact with Git repositories.\r\n\r\n- [Shelmet](https://github.com/dgilland/shelmet) - A shell power-up for working with the file system and running subprocess commands.\r\n\r\n- [Django Q2](https://github.com/django-q2/django-q2) - A multiprocessing distributed task queue for Django based on Django-Q. \r\n\r\nUsing Django might have been overkill, but having a Repository model to work with felt nice. Django Q2 was also overkill, but if I put this app into production, I'll want a task queue, and Django Q2 has a manageable amount of overhead. \r\n\r\nGitPython was a nice improvement over calling git commands directly because their API makes it easier to see which files were modified and to check against existing branch names. I was happy with the results after porting my subprocess commands to the GitPython API. \r\n\r\nThe final package I used is a new package called Shelmet, which was both a nice wrapper around subprocess plus they have a nice API for file system operations in the same vein as Python's Pathlib module. \r\n\r\n## Future goals\r\n\r\nI was tempted to cobble together a GitHub bot, but I didn't need one. I might dabble with the GitHub API more to fork a repo, but for now, this landed in a better place, so when I pick it back up again in a year, I'm starting in a good place. \r\n\r\nIf you want to write a GitHub bot, check out [Mariatta](https://github.com/Mariatta)'s [black_out](https://github.com/Mariatta/black_out) project. \r\n",
				"date_published": "2024-03-23T23:26:41-05:00",
				"url": "https://micro.webology.dev/2024/03/23/on-scratching-itches.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/22/automated-python-and.html",
				"title": "Automated Python and Django upgrades",
				"content_html": "<p>Recently, I have been maintaining forks for several projects that are no longer maintained. Usually, these are a pain to update, but I have found a workflow that takes the edge off by leveraging <a href=\"https://github.com/pre-commit/pre-commit\">pre-commit</a>.</p>\n<p>My process:</p>\n<ul>\n<li>Fork the project on GitHub to whichever organization I work with or my personal account.</li>\n<li>Check out a local copy of my forked copy with git.</li>\n<li>Install <a href=\"https://github.com/pre-commit/pre-commit\">pre-commit</a></li>\n<li>Create a <code>.pre-commit-config.yaml</code> with <em>ZERO</em> formatting or lint changes. This file will only include <a href=\"https://github.com/adamchainz/django-upgrade\">django-upgrade</a> and <a href=\"https://github.com/asottile/pyupgrade\">pyupgrade</a> hooks.</li>\n</ul>\n<p>We skip the formatters and linters to avoid unnecessary changes if we want to open a pull request in the upstream project. If the project isn&rsquo;t abandoned, we will want to do that.</p>\n<ul>\n<li>For <a href=\"https://github.com/adamchainz/django-upgrade\">django-upgrade</a>, change the‚Äî-target-version option to target the latest version of Django I&rsquo;m upgrading to, which is currently 5.0.</li>\n<li>For <a href=\"https://github.com/asottile/pyupgrade\">pyupgrade</a>, update the <code>python</code> settings under <code>default_language_version</code>  to the latest version of Python that I&rsquo;m targetting. Currently, that&rsquo;s 3.12.</li>\n</ul>\n<p>The django-upgrade and pyupgrade projects attempt to run several code formatters and can handle most of the more tedious upgrade steps.</p>\n<ul>\n<li>Run <code>pre-commit autoupdate</code> to ensure we have the latest version of our hooks.</li>\n<li>Run <code>pre-commit run --all-files</code> to run <code>pyupgrade</code> and <code>django-upgrade</code> on our project.</li>\n<li>Run any tests contained in the project and review all changes.</li>\n<li>Once I&rsquo;m comfortable with the changes, I commit them all via git and push them upstream to my branch.</li>\n</ul>\n<h2 id=\"example-pre-commit-configyaml-config\">Example <code>.pre-commit-config.yaml</code> config</h2>\n<p>From my experience, less is more with this bane bones <code>.pre-commit-config.yaml</code> config file.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"color:#75715e\"># .pre-commit-config.yaml</span>\n\n<span style=\"color:#f92672\">default_language_version</span>:\n  <span style=\"color:#f92672\">python</span>: <span style=\"color:#ae81ff\">python3.12</span>\n\n<span style=\"color:#f92672\">repos</span>:\n  - <span style=\"color:#f92672\">repo</span>: <span style=\"color:#ae81ff\">https://github.com/asottile/pyupgrade</span>\n    <span style=\"color:#f92672\">rev</span>: <span style=\"color:#ae81ff\">v3.15.1</span>\n    <span style=\"color:#f92672\">hooks</span>:\n      - <span style=\"color:#f92672\">id</span>: <span style=\"color:#ae81ff\">pyupgrade</span>\n\n  - <span style=\"color:#f92672\">repo</span>: <span style=\"color:#ae81ff\">https://github.com/adamchainz/django-upgrade</span>\n    <span style=\"color:#f92672\">rev</span>: <span style=\"color:#ae81ff\">1.16.0</span>\n    <span style=\"color:#f92672\">hooks</span>:\n      - <span style=\"color:#f92672\">id</span>: <span style=\"color:#ae81ff\">django-upgrade</span>\n        <span style=\"color:#f92672\">args</span>: [--<span style=\"color:#ae81ff\">target-version, &#34;5.0&#34;]</span>\n</code></pre></div><p>If I&rsquo;m comfortable that the project is abandoned, I&rsquo;ll add <a href=\"https://github.com/astral-sh/ruff\">ruff</a> support with a more opinionated config to ease my maintenance burden going forward.</p>\n",
				"content_text": "Recently, I have been maintaining forks for several projects that are no longer maintained. Usually, these are a pain to update, but I have found a workflow that takes the edge off by leveraging [pre-commit](https://github.com/pre-commit/pre-commit). \r\n\r\nMy process:\r\n\r\n- Fork the project on GitHub to whichever organization I work with or my personal account. \r\n- Check out a local copy of my forked copy with git.\r\n- Install [pre-commit](https://github.com/pre-commit/pre-commit)\r\n- Create a `.pre-commit-config.yaml` with *ZERO* formatting or lint changes. This file will only include [django-upgrade](https://github.com/adamchainz/django-upgrade) and [pyupgrade](https://github.com/asottile/pyupgrade) hooks. \r\n\r\nWe skip the formatters and linters to avoid unnecessary changes if we want to open a pull request in the upstream project. If the project isn't abandoned, we will want to do that. \r\n\r\n- For [django-upgrade](https://github.com/adamchainz/django-upgrade), change the‚Äî-target-version option to target the latest version of Django I'm upgrading to, which is currently 5.0.\r\n- For [pyupgrade](https://github.com/asottile/pyupgrade), update the `python` settings under `default_language_version`  to the latest version of Python that I'm targetting. Currently, that's 3.12. \r\n\r\nThe django-upgrade and pyupgrade projects attempt to run several code formatters and can handle most of the more tedious upgrade steps. \r\n\r\n- Run `pre-commit autoupdate` to ensure we have the latest version of our hooks. \r\n- Run `pre-commit run --all-files` to run `pyupgrade` and `django-upgrade` on our project. \r\n- Run any tests contained in the project and review all changes. \r\n- Once I'm comfortable with the changes, I commit them all via git and push them upstream to my branch. \r\n\r\n## Example `.pre-commit-config.yaml` config\r\n\r\nFrom my experience, less is more with this bane bones `.pre-commit-config.yaml` config file. \r\n\r\n```yaml\r\n# .pre-commit-config.yaml\r\n\r\ndefault_language_version:\r\n  python: python3.12\r\n\r\nrepos:\r\n  - repo: https://github.com/asottile/pyupgrade\r\n    rev: v3.15.1\r\n    hooks:\r\n      - id: pyupgrade\r\n\r\n  - repo: https://github.com/adamchainz/django-upgrade\r\n    rev: 1.16.0\r\n    hooks:\r\n      - id: django-upgrade\r\n        args: [--target-version, \"5.0\"]\r\n```\r\n\r\nIf I'm comfortable that the project is abandoned, I'll add [ruff](https://github.com/astral-sh/ruff) support with a more opinionated config to ease my maintenance burden going forward. \r\n",
				"date_published": "2024-03-22T11:02:57-05:00",
				"url": "https://micro.webology.dev/2024/03/22/automated-python-and.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/21/fixing-a-css.html",
				"title": "Fixing a CSS layout issue",
				"content_html": "<h1 id=\"2024-03-fixing-a-css-layout-issue\">2024-03 Fixing a CSS layout issue</h1>\n<p>I noticed a layout issue for one of my website projects while viewing a page with little content. The header and footer&rsquo;s background colors are dark, and the middle/main content area is white.</p>\n<p>Where there isn&rsquo;t enough content in the main/middle content area, the footer will float up, and you&rsquo;ll see the white background behind it. Even if we change the default background color to match the header and the footer, the footer looks weird when stretched out.</p>\n<p>Since I&rsquo;m using <a href=\"https://tailwindcss.com\">Tailwind CSS</a>, I figured there had to be a straightforward fix.</p>\n<h2 id=\"layouthtml-before\">layout.html before</h2>\n<p>I&rsquo;m using Flexbox for my layout set in column mode, which allows my document to grow vertically.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-html\" data-lang=\"html\">&lt;<span style=\"color:#f92672\">body</span> <span style=\"color:#a6e22e\">class</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;flex flex-col&#34;</span>&gt;\n  &lt;<span style=\"color:#f92672\">header</span>&gt;\n    our heading content\n  &lt;/<span style=\"color:#f92672\">header</span>&gt;\n  &lt;<span style=\"color:#f92672\">main</span>&gt;\n    our body content\n  &lt;/<span style=\"color:#f92672\">main</span>&gt;\n  &lt;<span style=\"color:#f92672\">footer</span>&gt;\n    our footer content\n  &lt;/<span style=\"color:#f92672\">footer</span>&gt;\n&lt;/<span style=\"color:#f92672\">body</span>&gt;\n</code></pre></div><h2 id=\"layouthtml-after\">layout.html after</h2>\n<p>My fix involved adding two classes to my html layout. The first was adding the <a href=\"https://tailwindcss.com/docs/min-height\"><code>min-h-screen</code></a> class to the body element of my HTML document, so my page would always be at least the same height as my browser.</p>\n<p>The second fix was adding a <a href=\"https://tailwindcss.com/docs/flex-grow\"><code>flex-grow</code></a> class to the main element of my HTML layout. This tells the main element to fill any available space that&rsquo;s left over.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-html\" data-lang=\"html\">&lt;<span style=\"color:#f92672\">body</span> <span style=\"color:#a6e22e\">class</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;flex flex-col min-h-screen&#34;</span>&gt;\n  &lt;<span style=\"color:#f92672\">header</span>&gt;\n    our heading content\n  &lt;/<span style=\"color:#f92672\">header</span>&gt;\n  &lt;<span style=\"color:#f92672\">main</span> <span style=\"color:#a6e22e\">class</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;flex-grow&#34;</span>&gt;\n    our body content\n  &lt;/<span style=\"color:#f92672\">main</span>&gt;\n  &lt;<span style=\"color:#f92672\">footer</span>&gt;\n    our footer content\n  &lt;/<span style=\"color:#f92672\">footer</span>&gt;\n&lt;/<span style=\"color:#f92672\">body</span>&gt;\n</code></pre></div><h2 id=\"overall\">Overall</h2>\n<p>The fix was really straightforward. One could easily convert this to Vanilla CSS, but it&rsquo;s two classes, and my content works now.</p>\n",
				"content_text": "# 2024-03 Fixing a CSS layout issue\r\n\r\nI noticed a layout issue for one of my website projects while viewing a page with little content. The header and footer's background colors are dark, and the middle/main content area is white. \r\n\r\nWhere there isn't enough content in the main/middle content area, the footer will float up, and you'll see the white background behind it. Even if we change the default background color to match the header and the footer, the footer looks weird when stretched out. \r\n\r\nSince I'm using [Tailwind CSS](https://tailwindcss.com), I figured there had to be a straightforward fix. \r\n\r\n## layout.html before\r\n\r\nI'm using Flexbox for my layout set in column mode, which allows my document to grow vertically. \r\n\r\n```html\r\n<body class=\"flex flex-col\">\r\n  <header>\r\n    our heading content\r\n  </header>\r\n  <main>\r\n    our body content\r\n  </main>\r\n  <footer>\r\n    our footer content\r\n  </footer>\r\n</body>\r\n```\r\n\r\n\r\n## layout.html after\r\n\r\nMy fix involved adding two classes to my html layout. The first was adding the [`min-h-screen`](https://tailwindcss.com/docs/min-height) class to the body element of my HTML document, so my page would always be at least the same height as my browser. \r\n\r\nThe second fix was adding a [`flex-grow`](https://tailwindcss.com/docs/flex-grow) class to the main element of my HTML layout. This tells the main element to fill any available space that's left over. \r\n\r\n```html\r\n<body class=\"flex flex-col min-h-screen\">\r\n  <header>\r\n    our heading content\r\n  </header>\r\n  <main class=\"flex-grow\">\r\n    our body content\r\n  </main>\r\n  <footer>\r\n    our footer content\r\n  </footer>\r\n</body>\r\n```\r\n\r\n## Overall\r\n\r\nThe fix was really straightforward. One could easily convert this to Vanilla CSS, but it's two classes, and my content works now. \r\n",
				"date_published": "2024-03-21T19:44:28-05:00",
				"url": "https://micro.webology.dev/2024/03/21/fixing-a-css.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/20/on-robotstxt.html",
				"title": "ü§ñ On Robots.txt",
				"content_html": "<p>I have spent a lot of mental energy thinking about how to be more defensive with the <code>robots.txt</code> files in my projects.</p>\n<blockquote>\n<p><strong>robots.txt</strong>¬†is the¬†<a href=\"https://en.wikipedia.org/wiki/Filename\" title=\"Filename\">filename</a>¬†used for implementing the¬†<strong>Robots Exclusion Protocol</strong>, a standard used by¬†<a href=\"https://en.wikipedia.org/wiki/Website\" title=\"Website\">websites</a>¬†to indicate to visiting¬†<a href=\"https://en.wikipedia.org/wiki/Web_crawler\" title=\"Web crawler\">web crawlers</a>¬†and other¬†<a href=\"https://en.wikipedia.org/wiki/Internet_bot\" title=\"Internet bot\">web robots</a>¬†which portions of the website they are allowed to visit.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Robots.txt\">https://en.wikipedia.org/wiki/Robots.txt</a></p>\n</blockquote>\n<p>In theory, this file helps control what search engines and AI scrapers are allowed to visit, but I need more confidence in its effectiveness in the post-AI apocalyptic world.</p>\n<p>Over the last few weeks, I have added and updated a static <code>robots.txt</code> file on several projects. Since then, I have noticed the number of known AI scrapers has doubled, and then some. See <a href=\"https://darkvisitors.com\">Dark Visitors</a> for a comprehensive list of known AI agents.</p>\n<p>Today, I decided to switch to the <a href=\"https://github.com/jazzband/django-robots\"><code>django-robots</code></a> project because I can update it from the Django admin. Since <code>django-robot</code>&rsquo;s rules are stored in a database, I can automate updating them.</p>\n<h2 id=\"my-research-so-far\">My research so far</h2>\n<p>These websites and articles have seemed helpful so far.</p>\n<ul>\n<li><a href=\"https://neil-clarke.com/block-the-bots-that-feed-ai-models-by-scraping-your-website/\">Block the Bots that Feed ‚ÄúAI‚Äù Models by Scraping Your Website</a></li>\n<li><a href=\"https://coryd.dev/posts/2024/go-ahead-and-block-ai-web-crawlers/\">Go ahead and block AI web crawlers</a></li>\n<li><a href=\"https://darkvisitors.com\">Dark Visitors</a></li>\n<li><a href=\"https://pika.pika.page/posts/your-pika-robots-txt-file\">Your Pika robots.txt File</a></li>\n</ul>\n<h3 id=\"django-resources\">Django resources</h3>\n<ul>\n<li><a href=\"https://learndjango.com/tutorials/add-robotstxt-django-website\">Add robots.txt to a Django website</a></li>\n<li><a href=\"https://adamj.eu/tech/2020/02/10/robots-txt/\">How to add a robots.txt to your Django site</a></li>\n</ul>\n",
				"content_text": "I have spent a lot of mental energy thinking about how to be more defensive with the `robots.txt` files in my projects. \r\n\r\n> **robots.txt**¬†is the¬†[filename](https://en.wikipedia.org/wiki/Filename \"Filename\")¬†used for implementing the¬†**Robots Exclusion Protocol**, a standard used by¬†[websites](https://en.wikipedia.org/wiki/Website \"Website\")¬†to indicate to visiting¬†[web crawlers](https://en.wikipedia.org/wiki/Web_crawler \"Web crawler\")¬†and other¬†[web robots](https://en.wikipedia.org/wiki/Internet_bot \"Internet bot\")¬†which portions of the website they are allowed to visit.\r\n> \r\n> https://en.wikipedia.org/wiki/Robots.txt\r\n\r\nIn theory, this file helps control what search engines and AI scrapers are allowed to visit, but I need more confidence in its effectiveness in the post-AI apocalyptic world. \r\n\r\nOver the last few weeks, I have added and updated a static `robots.txt` file on several projects. Since then, I have noticed the number of known AI scrapers has doubled, and then some. See [Dark Visitors](https://darkvisitors.com) for a comprehensive list of known AI agents. \r\n\r\nToday, I decided to switch to the [`django-robots`](https://github.com/jazzband/django-robots) project because I can update it from the Django admin. Since `django-robot`'s rules are stored in a database, I can automate updating them. \r\n\r\n## My research so far\r\n\r\nThese websites and articles have seemed helpful so far. \r\n\r\n- [Block the Bots that Feed ‚ÄúAI‚Äù Models by Scraping Your Website](https://neil-clarke.com/block-the-bots-that-feed-ai-models-by-scraping-your-website/)\r\n- [Go ahead and block AI web crawlers](https://coryd.dev/posts/2024/go-ahead-and-block-ai-web-crawlers/)\r\n- [Dark Visitors](https://darkvisitors.com)\r\n- [Your Pika robots.txt File](https://pika.pika.page/posts/your-pika-robots-txt-file)\r\n\r\n### Django resources\r\n\r\n- [Add robots.txt to a Django website](https://learndjango.com/tutorials/add-robotstxt-django-website)\r\n- [How to add a robots.txt to your Django site](https://adamj.eu/tech/2020/02/10/robots-txt/)\r\n",
				"date_published": "2024-03-20T19:36:02-05:00",
				"url": "https://micro.webology.dev/2024/03/20/on-robotstxt.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/19/justfile-alfred-plugin.html",
				"title": "Justfile Alfred Plugin",
				"content_html": "<p>A few years back, I had a productivity conversation with <a href=\"https://kjaymiller.com\">Jay Miller</a> about <a href=\"https://www.alfredapp.com\">Alfred</a> plugins, which led to him sharing his <a href=\"https://github.com/kjaymiller/Bunch_Alfred\">Bunch_Alfred</a> plugin. At the time, I played around with the <a href=\"https://bunchapp.co\">Bunch.app</a>, a macOS automation tool, and Alfred&rsquo;s support was interesting.</p>\n<p>I created my Alfred plugin to run <a href=\"https://github.com/casey/just\">Just</a> command runner commands through my Alfred setup. However, I never got around to packing or writing the plugin&rsquo;s documentation.</p>\n<p>My Alfred plugin runs <a href=\"https://www.alfredapp.com/help/workflows/inputs/script-filter/\">Script Filter Input</a>, which reads from a centrally located <code>justfile</code> and generates JSON output of all of the possible options. This will be displayed, and Alfred will run that command, whichever option you select.</p>\n<!-- raw HTML omitted -->\n<p>I was always unhappy with how the JSON document was generated from my commands, so I dusted off the project over lunch and re-engineered it by adding <a href=\"https://github.com/pydantic/pydantic\">Pydantic</a> support.</p>\n<p>Alfred just announced support for a new User Interface called <a href=\"https://www.alfredapp.com/help/workflows/user-interface/text/\">Text View</a>, which could make text and markdown output from Python an exciting way to handle snippets and other productive use cases. I couldn&rsquo;t quite figure it out over lunch, but now I know it&rsquo;s possible, and I might figure out how to convert my Justfile Alfred plugin to generate better output.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "A few years back, I had a productivity conversation with [Jay Miller](https://kjaymiller.com) about [Alfred](https://www.alfredapp.com) plugins, which led to him sharing his [Bunch_Alfred](https://github.com/kjaymiller/Bunch_Alfred) plugin. At the time, I played around with the [Bunch.app](https://bunchapp.co), a macOS automation tool, and Alfred's support was interesting. \n\nI created my Alfred plugin to run [Just](https://github.com/casey/just) command runner commands through my Alfred setup. However, I never got around to packing or writing the plugin's documentation. \n\nMy Alfred plugin runs [Script Filter Input](https://www.alfredapp.com/help/workflows/inputs/script-filter/), which reads from a centrally located `justfile` and generates JSON output of all of the possible options. This will be displayed, and Alfred will run that command, whichever option you select. \n\n<img src=\"uploads/2024/screenshot-2024-03-19-at-12.37.56-pm.png\" width=\"600\" height=\"403\" alt=\"Alfred plugin showing a Just command with a list of recipe options to pick from.\">\n\nI was always unhappy with how the JSON document was generated from my commands, so I dusted off the project over lunch and re-engineered it by adding [Pydantic](https://github.com/pydantic/pydantic) support. \n\nAlfred just announced support for a new User Interface called [Text View](https://www.alfredapp.com/help/workflows/user-interface/text/), which could make text and markdown output from Python an exciting way to handle snippets and other productive use cases. I couldn't quite figure it out over lunch, but now I know it's possible, and I might figure out how to convert my Justfile Alfred plugin to generate better output. \n\n\n<script src=\"https://gist.github.com/jefftriplett/e7d4eade12e30001065eed2636010772.js\"></script>\n",
				"date_published": "2024-03-19T12:49:25-05:00",
				"url": "https://micro.webology.dev/2024/03/19/justfile-alfred-plugin.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/18/the-gentlemen-i.html",
				
				"content_html": "<p>üì∫ The Gentlemen - I just started episode five, and it has no business being this good.</p>\n<p><a href=\"https://trakt.tv/shows/the-gentlemen\">trakt.tv/shows/the&hellip;</a></p>\n",
				"content_text": "üì∫ The Gentlemen - I just started episode five, and it has no business being this good. \r\n\r\n[trakt.tv/shows/the...](https://trakt.tv/shows/the-gentlemen) \n",
				"date_published": "2024-03-18T21:45:27-05:00",
				"url": "https://micro.webology.dev/2024/03/18/the-gentlemen-i.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/18/weeknotes-for-week.html",
				"title": "Weeknotes for Week 11: March 11 to March 17",
				"content_html": "<h2 id=\"family\">Family</h2>\n<p>This week was Spring Break for both of my kids. My son had all week off, while my daughter had Thursday and Friday off. My son was also sick and hanging out with me the first two days of the week instead of getting to go to day camp.</p>\n<p>I worked on several house projects, including cleaning our smoker and outdoor griddle. I didn&rsquo;t winterize our smoker nearly as well as I thought I had, so it took me much longer to clean than it should have.</p>\n<p>Sunday was cold and windy, so I couldn&rsquo;t do as much outside as I planned.</p>\n<h2 id=\"work\">Work</h2>\n<p>I spent most of my week working on the green field project again.</p>\n<p>I also hosted a rather minute(ish)¬†<a href=\"https://mastodon.social/@webology/112096980187024682\">Office Hours</a> session again.</p>\n<h2 id=\"community\">Community</h2>\n<p>I had two DjangoCon US meetings this week. One is to discuss our online experience, and the other is to kick off our new website and eventual new website framework.</p>\n<h2 id=\"side-projects\">Side projects</h2>\n<p>I spent most of my side project time on <a href=\"https://django-news.com\">Django News</a>, <a href=\"https://jobs.django-news.com\">Django News Jobs</a>, and <a href=\"https://djangopackages.org\">Django Packages</a>. I also upgraded several project configs to use some new <a href=\"https://github.com/astral-sh/uv\">uv</a> options.</p>\n<p><strong>Django Packages:</strong> We updated our profiles to drop support for Google Code and add Bitbucket and GitLab profiles.</p>\n<p><strong>Trailhawks:</strong> My local running club&rsquo;s website has been running on Django since 2009. I upgraded the project from Django 3.2 to 5.0 and to Python 3.1x, including upgrading two outdated third-party packages to Python 3.1x and Django 5. I also changed one of our race websites to Tailwind CSS, which has been in flight for a while.</p>\n<p><strong>Django Packages:</strong> We released an update to our profiles to drop support for Google Code and to add Bitbucket and GitLab profiles. I also broke the website with a wsgi change, which I quickly found a fixed.</p>\n<p>**django-startproject: ** I updated¬†<a href=\"https://github.com/jefftriplett/django-startproject\"><code>django-startproject</code></a>¬†project to have better support for <code>uv</code>.</p>\n<p><strong>Django News Newsletter:</strong>¬†We shipped issue¬†<a href=\"https://django-news.com/issues/223#start\">#223</a>.</p>\n<h2 id=\"writing\">Writing</h2>\n<p>I wrote and published every day.</p>\n<p><a href=\"https://micro.webology.dev/2024/03/17/on-tortilla-pizza.html\">2024-03-17</a>:¬†<strong>üçï On tortilla pizza</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/16/on-gardening.html\">2024-03-16</a>:¬†<strong>üè° On Gardening</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/15/five-for-friyay.html\">2024-03-15</a>:¬†<strong>Five for Friyay</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/14/pythons-uv-tool.html\">2024-03-14</a>:¬†<strong>Python&rsquo;s UV tool is even better</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/13/on-environment-variables.html\">2024-03-13</a>:¬†<strong>On environment variables and dotenv files</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/12/completed-finished-or.html\">2024-03-12</a>:¬†<strong>Completed, finished, or done</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/11/my-python-roots.html\">2024-03-11</a>:¬†<strong>My Python Roots</strong>¬†</p>\n<h2 id=\"me-time\">&ldquo;Me&rdquo; time</h2>\n<p>üèÄ I watched Kansas get swept in the first round of the Big 12 tournament because our best two players were out with injuries. I set aside time on Wednesday and Thursday afternoons to watch some conference tournaments, but they were all blowouts.</p>\n<h2 id=\"next-week\">Next week</h2>\n<p>üö∏ My kids are back in school, and our schedules return to regular routines.</p>\n<p>ü™ö I have more rot repair, and I now have a compound miter saw to cut wood for framing and fixing things. I had to order a portable workbench to attach the miter saw in mid-week.</p>\n<p>üèÄ Next week also starts the NCAA tournament, a sign that the third basketball season has begun. I am taking two days off to enjoy the madness, and I suspect this will be most of my weekend, too.</p>\n<p>üëü I should have to get the other half of the Trailhawks website out the door.</p>\n",
				"content_text": "## Family\n\nThis week was Spring Break for both of my kids. My son had all week off, while my daughter had Thursday and Friday off. My son was also sick and hanging out with me the first two days of the week instead of getting to go to day camp. \n\nI worked on several house projects, including cleaning our smoker and outdoor griddle. I didn't winterize our smoker nearly as well as I thought I had, so it took me much longer to clean than it should have. \n\nSunday was cold and windy, so I couldn't do as much outside as I planned. \n\n## Work\n\nI spent most of my week working on the green field project again. \n\nI also hosted a rather minute(ish)¬†[Office Hours](https://mastodon.social/@webology/112096980187024682) session again.\n\n## Community\n\nI had two DjangoCon US meetings this week. One is to discuss our online experience, and the other is to kick off our new website and eventual new website framework. \n\n## Side projects\n\nI spent most of my side project time on [Django News](https://django-news.com), [Django News Jobs](https://jobs.django-news.com), and [Django Packages](https://djangopackages.org). I also upgraded several project configs to use some new [uv](https://github.com/astral-sh/uv) options. \n\n**Django Packages:** We updated our profiles to drop support for Google Code and add Bitbucket and GitLab profiles. \n\n**Trailhawks:** My local running club's website has been running on Django since 2009. I upgraded the project from Django 3.2 to 5.0 and to Python 3.1x, including upgrading two outdated third-party packages to Python 3.1x and Django 5. I also changed one of our race websites to Tailwind CSS, which has been in flight for a while. \n\n**Django Packages:** We released an update to our profiles to drop support for Google Code and to add Bitbucket and GitLab profiles. I also broke the website with a wsgi change, which I quickly found a fixed. \n\n**django-startproject: ** I updated¬†[`django-startproject`](https://github.com/jefftriplett/django-startproject)¬†project to have better support for `uv`. \n\n**Django News Newsletter:**¬†We shipped issue¬†[#223](https://django-news.com/issues/223#start).\n\n## Writing\n\nI wrote and published every day. \n\n[2024-03-17](https://micro.webology.dev/2024/03/17/on-tortilla-pizza.html):¬†**üçï On tortilla pizza**¬†\n\n[2024-03-16](https://micro.webology.dev/2024/03/16/on-gardening.html):¬†**üè° On Gardening**¬†\n\n[2024-03-15](https://micro.webology.dev/2024/03/15/five-for-friyay.html):¬†**Five for Friyay**¬†\n\n[2024-03-14](https://micro.webology.dev/2024/03/14/pythons-uv-tool.html):¬†**Python's UV tool is even better**¬†\n\n[2024-03-13](https://micro.webology.dev/2024/03/13/on-environment-variables.html):¬†**On environment variables and dotenv files**¬†\n\n[2024-03-12](https://micro.webology.dev/2024/03/12/completed-finished-or.html):¬†**Completed, finished, or done**¬†\n\n[2024-03-11](https://micro.webology.dev/2024/03/11/my-python-roots.html):¬†**My Python Roots**¬†\n\n## \"Me\" time\n\nüèÄ I watched Kansas get swept in the first round of the Big 12 tournament because our best two players were out with injuries. I set aside time on Wednesday and Thursday afternoons to watch some conference tournaments, but they were all blowouts.\n\n## Next week\n\nüö∏ My kids are back in school, and our schedules return to regular routines. \n\nü™ö I have more rot repair, and I now have a compound miter saw to cut wood for framing and fixing things. I had to order a portable workbench to attach the miter saw in mid-week. \n\nüèÄ Next week also starts the NCAA tournament, a sign that the third basketball season has begun. I am taking two days off to enjoy the madness, and I suspect this will be most of my weekend, too. \n\nüëü I should have to get the other half of the Trailhawks website out the door. \n",
				"date_published": "2024-03-18T19:33:40-05:00",
				"url": "https://micro.webology.dev/2024/03/18/weeknotes-for-week.html",
				"tags": ["Weeknotes"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/17/on-tortilla-pizza.html",
				"title": "üçï On tortilla pizza",
				"content_html": "<p>The algorithm kept telling me to make tortilla pizza, so today, over lunch, I caved and made two from a bunch of leftovers we had from the week.</p>\n<p>The proteins and veggies are entirely up to you. We were out of pepperoni, so I used some leftover taco meat and stir-fried veggies (peppers and onions), which worked incredibly well.</p>\n<h2 id=\"ingredients\">Ingredients</h2>\n<ul>\n<li>1 soft flour tortilla</li>\n<li>olive oil</li>\n<li>garlic powder to taste</li>\n<li>salt and ground black pepper to taste</li>\n<li>Trader Joe&rsquo;s Umami seasoning (optional)</li>\n<li>dried oregano to taste</li>\n<li>tomato sauce</li>\n<li>shredded mozzarella cheese</li>\n<li>some veggies</li>\n<li>some protein</li>\n</ul>\n<h2 id=\"directions\">Directions</h2>\n<ol>\n<li>Preheat oven to 425F</li>\n<li>Brush olive oil on the tortilla</li>\n<li>Sprinkle garlic powder, salt, pepper, and Umami seasoning on top</li>\n<li>Bake for 3 to 5 minutes in the preheated oven until golden</li>\n<li>Remove from oven and spread tomato sauce on top. Add proteins and veggies. Sprinkle cheese and oregano on top.</li>\n<li>Bake in the oven until the cheese has melted (about 5 minutes)</li>\n<li>Remove, slice, and enjoy!</li>\n</ol>\n<h2 id=\"the-results\">The results</h2>\n<!-- raw HTML omitted -->\n<p>Overall, it was good, even if my photo does not reflect the taste. I have historically made my pizza dough, but for a quick fix, this was much better than the pizza dough that comes in a tube.</p>\n<p>Clean-up was easy because I prepared mine on pre-cut parchment paper, which I slid on top of my pizza stone in my oven.</p>\n<h2 id=\"other-recipes\">Other recipes</h2>\n<p>A Kagi search bubbled up several pizza recipes which taught me the gist of what I needed to do:</p>\n<ul>\n<li><a href=\"https://www.allrecipes.com/recipe/258013/easy-tortilla-pizza/\">All Recipes: Easy Tortilla Pizza</a></li>\n<li><a href=\"https://freshaprilflours.com/5-minute-personal-tortilla-pizza/\">Fresh April Flours: Tortilla Pizza</a></li>\n<li><a href=\"https://www.budgetbytes.com/quick-fix-salad-bar-pizza/\">Budget Bytes: Quick Fix Salad Bar Pizza</a></li>\n<li><a href=\"https://www.budgetbytes.com/quick-fix-broccoli-pesto-pizza/\">Budget Bytes: &ldquo;Quick Fix&rdquo; Broccoli Pesto Pizza</a></li>\n</ul>\n",
				"content_text": "The algorithm kept telling me to make tortilla pizza, so today, over lunch, I caved and made two from a bunch of leftovers we had from the week. \n\nThe proteins and veggies are entirely up to you. We were out of pepperoni, so I used some leftover taco meat and stir-fried veggies (peppers and onions), which worked incredibly well. \n\n## Ingredients\n\n- 1 soft flour tortilla\n- olive oil\n- garlic powder to taste\n- salt and ground black pepper to taste\n- Trader Joe's Umami seasoning (optional)\n- dried oregano to taste\n- tomato sauce\n- shredded mozzarella cheese\n- some veggies\n- some protein \n\n## Directions\n\n1. Preheat oven to 425F\n2. Brush olive oil on the tortilla\n3. Sprinkle garlic powder, salt, pepper, and Umami seasoning on top\n4. Bake for 3 to 5 minutes in the preheated oven until golden\n5. Remove from oven and spread tomato sauce on top. Add proteins and veggies. Sprinkle cheese and oregano on top.\n6. Bake in the oven until the cheese has melted (about 5 minutes)\n7. Remove, slice, and enjoy!\n\n## The results\n\n<img src=\"uploads/2024/image.jpg\" width=\"600\" height=\"498\" alt=\"A cooked tortilla pizza topped with ground beef, veggies, and cheese.\">\n\nOverall, it was good, even if my photo does not reflect the taste. I have historically made my pizza dough, but for a quick fix, this was much better than the pizza dough that comes in a tube. \n\nClean-up was easy because I prepared mine on pre-cut parchment paper, which I slid on top of my pizza stone in my oven. \n\n## Other recipes\n\nA Kagi search bubbled up several pizza recipes which taught me the gist of what I needed to do:\n\n- [All Recipes: Easy Tortilla Pizza](https://www.allrecipes.com/recipe/258013/easy-tortilla-pizza/)\n- [Fresh April Flours: Tortilla Pizza](https://freshaprilflours.com/5-minute-personal-tortilla-pizza/)\n- [Budget Bytes: Quick Fix Salad Bar Pizza](https://www.budgetbytes.com/quick-fix-salad-bar-pizza/)\n- [Budget Bytes: \"Quick Fix\" Broccoli Pesto Pizza](https://www.budgetbytes.com/quick-fix-broccoli-pesto-pizza/)\n",
				"date_published": "2024-03-17T13:26:10-05:00",
				"url": "https://micro.webology.dev/2024/03/17/on-tortilla-pizza.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/16/on-gardening.html",
				"title": "üè° On Gardening",
				"content_html": "<p>It&rsquo;s springtime in the Midwest, and I took my car to get it washed earlier today. I had my oldest with me, and we decided to try out a newer car wash that we drive by a lot. When we pulled up, I was surprised the service had an app, one-off pricing, and a monthly rate for &ldquo;unlimited&rdquo; washes with four different service levels. The whole setup gave my gym vibes, and while my car was going down the conveyor belt, I wondered how many people paid for unlimited washes and didn&rsquo;t go more than twice a month to justify the cost.</p>\n<p>After we got home, we did some yard work, and I tried to find care information for two of the Abelia bushes we planted last summer. We couldn&rsquo;t tell if they were dead or supposed to look like they did, but after some searching, I found <a href=\"https://www.gardenia.net\">Gardenia</a>, which does a decent job of filling in info about random plants.</p>\n<p>Years ago, after we bought our house, I started using the <a href=\"https://www.getsunday.com\">Sunday</a> service to help me figure out how to keep our lawn healthy. The subscription service is one part lawn analysis, a soil test, bags of fertilizers that come in the mail, and a ton of information on how to keep your lawn healthy.</p>\n<p>While our lawn is healthy, I still feel underwhelmed trying to keep plants and flowers alive and healthy outside our lawn. After using Sunday, why don&rsquo;t we have a similar garden service?</p>\n<p>I want to find my address using &ldquo;not-Google Maps,&rdquo; pick the areas of my yard from the satellite image of my yard, and use a polygon tool to block off areas of my yard where I can grow plants.</p>\n<p>The service could show me which plants will work best based on shade and the side of my house they are planted on. I would like/star the plants I want in my yard, and the service could give me advice, planting, and care details each week or month. I could visit my local nurseries to buy plants, or I would buy seeds or starter plants through the service.</p>\n<p>While I&rsquo;m not immune to feeling tired of subscription service fatigue, I don&rsquo;t mind paying for services that teach me skills like gardening because I will waste more money failing than being shown at least the right way to start.</p>\n<p>A few friends told me about joining a monthly LEGO subscription service that sends them a box of LEGOs every month. They play music or podcasts, lay out the instructions, and build the LEGO kit. Once they complete the build, they mail everything back and get another one. The beauty of LEGOs is that you follow the directions.</p>\n<p>More recently, I started hearing about this trend on a few podcasts, where people like not having to decide and destress by following directions.</p>\n<p>So why can&rsquo;t Gardening be more like building LEGOs?</p>\n",
				"content_text": "It's springtime in the Midwest, and I took my car to get it washed earlier today. I had my oldest with me, and we decided to try out a newer car wash that we drive by a lot. When we pulled up, I was surprised the service had an app, one-off pricing, and a monthly rate for \"unlimited\" washes with four different service levels. The whole setup gave my gym vibes, and while my car was going down the conveyor belt, I wondered how many people paid for unlimited washes and didn't go more than twice a month to justify the cost. \r\n\r\nAfter we got home, we did some yard work, and I tried to find care information for two of the Abelia bushes we planted last summer. We couldn't tell if they were dead or supposed to look like they did, but after some searching, I found [Gardenia](https://www.gardenia.net), which does a decent job of filling in info about random plants. \r\n\r\nYears ago, after we bought our house, I started using the [Sunday](https://www.getsunday.com) service to help me figure out how to keep our lawn healthy. The subscription service is one part lawn analysis, a soil test, bags of fertilizers that come in the mail, and a ton of information on how to keep your lawn healthy. \r\n\r\nWhile our lawn is healthy, I still feel underwhelmed trying to keep plants and flowers alive and healthy outside our lawn. After using Sunday, why don't we have a similar garden service? \r\n\r\nI want to find my address using \"not-Google Maps,\" pick the areas of my yard from the satellite image of my yard, and use a polygon tool to block off areas of my yard where I can grow plants. \r\n\r\nThe service could show me which plants will work best based on shade and the side of my house they are planted on. I would like/star the plants I want in my yard, and the service could give me advice, planting, and care details each week or month. I could visit my local nurseries to buy plants, or I would buy seeds or starter plants through the service. \r\n\r\nWhile I'm not immune to feeling tired of subscription service fatigue, I don't mind paying for services that teach me skills like gardening because I will waste more money failing than being shown at least the right way to start. \r\n\r\nA few friends told me about joining a monthly LEGO subscription service that sends them a box of LEGOs every month. They play music or podcasts, lay out the instructions, and build the LEGO kit. Once they complete the build, they mail everything back and get another one. The beauty of LEGOs is that you follow the directions. \r\n\r\nMore recently, I started hearing about this trend on a few podcasts, where people like not having to decide and destress by following directions. \r\n\r\nSo why can't Gardening be more like building LEGOs? \n",
				"date_published": "2024-03-16T22:32:46-05:00",
				"url": "https://micro.webology.dev/2024/03/16/on-gardening.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/15/five-for-friyay.html",
				"title": "Five for Friyay",
				"content_html": "<p>It&rsquo;s been too long since I posted my five favorite links of the week. Continuing that theme for today, here are five links from my Friyay (Friday).</p>\n<h2 id=\"1-a-new-code-editor\">1. A new code editor</h2>\n<p>Tonight, I installed the <a href=\"https://zed.dev\">Zed</a> code editor on a whim, and to my surprise, my LSP was automatically picked up and just worked. Zed was a surprisingly productive experience. I even spotted a bug in one of my projects that I needed help to figure out earlier today.</p>\n<h2 id=\"2-my-favorite-theme\">2. My favorite theme</h2>\n<p>I wasn&rsquo;t impressed with Zed&rsquo;s default theme, so I searched the <a href=\"https://draculatheme.com\">Dracula</a> website and found a <a href=\"https://draculatheme.com/zed\">Dracula Theme for Zed</a>. Dracula is one of my favorite themes, and they have custom-built themes for over 370 different apps.</p>\n<h2 id=\"3-a-new-to-me-python-library\">3. A new to me Python library</h2>\n<p><a href=\"https://github.com/dgilland/shelmet\">shelmet</a> is a nice wrapper around Python&rsquo;s subprocess. The API is clean, and it has a nice wrapper around using temporary environment variables, which has been helpful for me.</p>\n<h2 id=\"4-the-best-presentation-tool\">4. The best presentation tool</h2>\n<p><a href=\"https://www.deckset.com\">Deckset</a> is the best tool for quickly writing nice-looking presentations using markdown. After years of being in private beta, they released their iOS/iPad version publicly.</p>\n<h2 id=\"5-a-long-read-for-the-weekend\">5. A long read for the weekend</h2>\n<p>This exhaustive review of the <a href=\"https://hugo.blog/2024/03/11/vision-pro/\">Vision Pro</a> is everything I have been looking for and more to get a feel for what the Vision Pro can do.</p>\n<h2 id=\"have-thoughts\">Have thoughts?</h2>\n<!-- raw HTML omitted -->\n",
				"content_text": "It's been too long since I posted my five favorite links of the week. Continuing that theme for today, here are five links from my Friyay (Friday). \n\n## 1. A new code editor\n\nTonight, I installed the [Zed](https://zed.dev) code editor on a whim, and to my surprise, my LSP was automatically picked up and just worked. Zed was a surprisingly productive experience. I even spotted a bug in one of my projects that I needed help to figure out earlier today. \n\n## 2. My favorite theme\n\nI wasn't impressed with Zed's default theme, so I searched the [Dracula](https://draculatheme.com) website and found a [Dracula Theme for Zed](https://draculatheme.com/zed). Dracula is one of my favorite themes, and they have custom-built themes for over 370 different apps. \n\n## 3. A new to me Python library\n\n[shelmet](https://github.com/dgilland/shelmet) is a nice wrapper around Python's subprocess. The API is clean, and it has a nice wrapper around using temporary environment variables, which has been helpful for me. \n\n## 4. The best presentation tool\n\n[Deckset](https://www.deckset.com) is the best tool for quickly writing nice-looking presentations using markdown. After years of being in private beta, they released their iOS/iPad version publicly. \n\n## 5. A long read for the weekend\n\nThis exhaustive review of the [Vision Pro](https://hugo.blog/2024/03/11/vision-pro/) is everything I have been looking for and more to get a feel for what the Vision Pro can do. \n\n\n## Have thoughts?\n\n<iframe src=\"https://mastodon.social/@webology/112102679318546214/embed\" class=\"mastodon-embed\" style=\"max-width: 100%; border: 0\" width=\"400\" allowfullscreen=\"allowfullscreen\"></iframe><script src=\"https://mastodon.social/embed.js\" async=\"async\"></script>\n",
				"date_published": "2024-03-15T20:05:35-05:00",
				"url": "https://micro.webology.dev/2024/03/15/five-for-friyay.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/14/pythons-uv-tool.html",
				"title": "Python's UV tool is even better",
				"content_html": "<p>Last month, I wrote <a href=\"https://micro.webology.dev/2024/02/29/pythons-uv-tool.html\">Python&rsquo;s UV tool is actually pretty good</a> about Astral&rsquo;s new Python package installer and resolver  <a href=\"https://github.com/astral-sh/uv\"><code>uv</code></a>, and this is a follow-up post.</p>\n<p>Since last month, I have added <code>uv</code> to over a dozen projects, and I recently learned that you could skip the <code>venv</code> step for projects that use containers or CI where the environment is already isolated.</p>\n<p>I mistakenly thought <code>uv</code> required a virtual environment (aka venv), but <a href=\"https://joshthomas.dev\">Josh Thomas</a> recently pointed out that it&rsquo;s unnecessary.</p>\n<p>The trick is to pass the <code>--system</code> option, and <code>uv</code> will perform a system-wide install. Here&rsquo;s an example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">uv pip install --system --requirement requirement.txt\n</code></pre></div><p>Now that I have seen this, I wish <code>pip</code> also used this approach to avoid developers accidentally installing third-party packages globally.</p>\n<h2 id=\"local-development\">local development</h2>\n<p>Nothing has changed with my <code>justfile</code> example from last month.</p>\n<p>When I&rsquo;m working with containers, I create a virtual environment (venv) because I will need most of my project requirements installed <em>outside</em> of the container so that my text editor and LSP can resolve dependencies. <code>uv</code>&rsquo;s default behavior of respecting a <code>venv</code> is all we need here.</p>\n<p>Every one of my projects has a <code>justfile</code> (it&rsquo;s like Make but works the same everywhere) with &ldquo;bootstrap&rdquo; and &ldquo;lock&rdquo; recipes. My &ldquo;bootstrap&rdquo; recipe installs everything I need to work with the project locally. I use my &ldquo;lock&rdquo; recipe to lock my <code>requirements.txt</code> file to use the exact requirements locally and in production.</p>\n<h3 id=\"justfile-before\"><code>justfile</code> before</h3>\n<p>My <code>justfile</code> might look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">@<span style=\"color:#ae81ff\">bootstrap</span>\n    <span style=\"color:#ae81ff\">python -m pip install --upgrade pip</span>\n    <span style=\"color:#ae81ff\">python -m pip install --upgrade --requirement requirements.in</span>\n    \n<span style=\"color:#f92672\">@lock *ARGS</span>:\n    <span style=\"color:#ae81ff\">python -m piptools compile {{ ARGS }} ./requirements.in \\</span>\n        --<span style=\"color:#ae81ff\">resolver=backtracking \\</span>\n        --<span style=\"color:#ae81ff\">output-file requirements.txt</span>\n</code></pre></div><h3 id=\"justfile-after\"><code>justfile</code> after</h3>\n<p>For the most part, <code>uv</code> shares most of the same syntax as <code>pip</code> so you can start  by changing your <code>pip</code> references to <code>uv pip</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">@<span style=\"color:#ae81ff\">bootstrap</span>\n    <span style=\"color:#ae81ff\">python -m pip install --upgrade pip uv</span>\n    <span style=\"color:#ae81ff\">python -m uv pip install --upgrade --requirement requirements.in</span>\n    \n<span style=\"color:#f92672\">@lock *ARGS</span>:\n    <span style=\"color:#ae81ff\">python -m uv pip compile {{ ARGS }} requirements.in \\</span>\n        --<span style=\"color:#ae81ff\">resolver=backtracking \\</span>\n        --<span style=\"color:#ae81ff\">output-file requirements.txt</span>\n</code></pre></div><h2 id=\"dockerfiles\">Dockerfiles</h2>\n<p>Everyone&rsquo;s container setup is going to be different, but I use <a href=\"https://www.docker.com\">Docker</a> and <a href=\"https://orbstack.dev\">Orbstack</a>, which use a <code>Dockerfile</code>.</p>\n<h2 id=\"dockerfile-before\"><code>Dockerfile</code> before</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-Dockerfile\" data-lang=\"Dockerfile\"><span style=\"color:#66d9ef\">FROM</span><span style=\"color:#e6db74\"> python:3.12-slim-bookworm</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PIP_DISABLE_PIP_VERSION_CHECK <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONDONTWRITEBYTECODE <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONPATH /srv<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONUNBUFFERED <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> apt-get update<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> pip install --upgrade pip<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">COPY</span> requirements.txt /src/requirements.txt<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> pip install --requirement /src/requirements.txt<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">WORKDIR</span><span style=\"color:#e6db74\"> /src/</span><span style=\"color:#960050;background-color:#1e0010\">\n</span></code></pre></div><h2 id=\"dockerfile-after\"><code>Dockerfile</code> after</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-Dockerfile\" data-lang=\"Dockerfile\"><span style=\"color:#66d9ef\">FROM</span><span style=\"color:#e6db74\"> python:3.12-slim-bookworm</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PIP_DISABLE_PIP_VERSION_CHECK <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONDONTWRITEBYTECODE <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONPATH /srv<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONUNBUFFERED <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> apt-get update<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> pip install --upgrade pip uv  <span style=\"color:#75715e\"># this is updated</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">COPY</span> requirements.txt /src/requirements.txt<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> uv pip install --system --requirement /src/requirements.txt  <span style=\"color:#75715e\"># this is updated</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">WORKDIR</span><span style=\"color:#e6db74\"> /src/</span><span style=\"color:#960050;background-color:#1e0010\">\n</span></code></pre></div><h2 id=\"github-actions\">GitHub Actions</h2>\n<p>GitHub Actions are a little more complicated to explain, but my workflows started similar to this before I made the switch to <code>uv</code>:</p>\n<h3 id=\"mainyml-before\"><code>main.yml</code> before</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Set up Python 3.12</span>\n    <span style=\"color:#f92672\">uses</span>: <span style=\"color:#ae81ff\">actions/setup-python@v5</span>\n    <span style=\"color:#f92672\">with</span>:\n      <span style=\"color:#f92672\">python-version</span>: <span style=\"color:#e6db74\">&#39;3.12&#39;</span>\n\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Install dependencies</span>\n    <span style=\"color:#f92672\">run</span>: |<span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">      </span>      <span style=\"color:#ae81ff\">python -m pip install --requirement requirements.in</span>\n</code></pre></div><h3 id=\"mainyml-after\"><code>main.yml</code> after</h3>\n<p>The most significant pain point I ran into was related to GitHub Issue <a href=\"https://github.com/astral-sh/uv/issues/1386\">#1386</a>, which has a useable workaround.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Set up Python 3.12</span>\n    <span style=\"color:#f92672\">uses</span>: <span style=\"color:#ae81ff\">actions/setup-python@v5</span>\n    <span style=\"color:#f92672\">with</span>:\n      <span style=\"color:#f92672\">python-version</span>: <span style=\"color:#e6db74\">&#39;3.12&#39;</span>\n\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Install dependencies</span>\n    <span style=\"color:#f92672\">run</span>: |<span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">      python -m pip install --upgrade uv  # this is new\n</span><span style=\"color:#e6db74\">      python -m uv pip install --system --requirement requirements.in  # this is updated</span>      \n</code></pre></div><h2 id=\"gotchas\">Gotchas</h2>\n<p>The only gotchas I have encountered with <code>uv</code> is when I&rsquo;m trying to install a Python package from a remote zip file.</p>\n<p>Previously, I could copy and paste the GitHub repo URL, but <code>uv</code> required we use the format <code>package-name @ url-to-zip-file</code></p>\n<h3 id=\"requirementsin-before\"><code>requirements.in</code> before</h3>\n<pre tabindex=\"0\"><code># requirements.in\r\nhttps://github.com/jefftriplett/django-feedreader/archive/main.zip\r\n</code></pre><h3 id=\"requirementsin-after\"><code>requirements.in</code> after</h3>\n<pre tabindex=\"0\"><code># requirements.in\r\ndjango-feedreader @ https://github.com/jefftriplett/django-feedreader/archive/main.zip\r\n</code></pre><h2 id=\"conclusion\">Conclusion</h2>\n<p>This update helps remove a few steps from updating your projects, and it should shave a few minutes off of updating projects to use it.</p>\n<p>I hope this was helpful to anyone who is considering making the switch to <code>uv</code>. I love to hear about how much time it saves you.</p>\n",
				"content_text": "Last month, I wrote [Python's UV tool is actually pretty good](https://micro.webology.dev/2024/02/29/pythons-uv-tool.html) about Astral's new Python package installer and resolver  [`uv`](https://github.com/astral-sh/uv), and this is a follow-up post. \r\n\r\nSince last month, I have added `uv` to over a dozen projects, and I recently learned that you could skip the `venv` step for projects that use containers or CI where the environment is already isolated. \r\n\r\nI mistakenly thought `uv` required a virtual environment (aka venv), but [Josh Thomas](https://joshthomas.dev) recently pointed out that it's unnecessary. \r\n\r\nThe trick is to pass the `--system` option, and `uv` will perform a system-wide install. Here's an example:\r\n\r\n```shell\r\nuv pip install --system --requirement requirement.txt\r\n```\r\n\r\nNow that I have seen this, I wish `pip` also used this approach to avoid developers accidentally installing third-party packages globally. \r\n\r\n## local development\r\n\r\nNothing has changed with my `justfile` example from last month. \r\n\r\nWhen I'm working with containers, I create a virtual environment (venv) because I will need most of my project requirements installed *outside* of the container so that my text editor and LSP can resolve dependencies. `uv`'s default behavior of respecting a `venv` is all we need here. \r\n\r\nEvery one of my projects has a `justfile` (it's like Make but works the same everywhere) with \"bootstrap\" and \"lock\" recipes. My \"bootstrap\" recipe installs everything I need to work with the project locally. I use my \"lock\" recipe to lock my `requirements.txt` file to use the exact requirements locally and in production. \r\n\r\n### `justfile` before\r\n\r\nMy `justfile` might look like this:\r\n\r\n```yaml\r\n@bootstrap\r\n    python -m pip install --upgrade pip\r\n    python -m pip install --upgrade --requirement requirements.in\r\n    \r\n@lock *ARGS:\r\n    python -m piptools compile {{ ARGS }} ./requirements.in \\\r\n        --resolver=backtracking \\\r\n        --output-file requirements.txt\r\n```\r\n\r\n\r\n### `justfile` after \r\n\r\nFor the most part, `uv` shares most of the same syntax as `pip` so you can start  by changing your `pip` references to `uv pip`: \r\n\r\n\r\n```yaml\r\n@bootstrap\r\n    python -m pip install --upgrade pip uv\r\n    python -m uv pip install --upgrade --requirement requirements.in\r\n    \r\n@lock *ARGS:\r\n    python -m uv pip compile {{ ARGS }} requirements.in \\\r\n        --resolver=backtracking \\\r\n        --output-file requirements.txt\r\n```\r\n\r\n\r\n## Dockerfiles\r\n\r\nEveryone's container setup is going to be different, but I use [Docker](https://www.docker.com) and [Orbstack](https://orbstack.dev), which use a `Dockerfile`. \r\n\r\n## `Dockerfile` before\r\n\r\n```Dockerfile\r\nFROM python:3.12-slim-bookworm\r\n\r\nENV PIP_DISABLE_PIP_VERSION_CHECK 1\r\nENV PYTHONDONTWRITEBYTECODE 1\r\nENV PYTHONPATH /srv\r\nENV PYTHONUNBUFFERED 1\r\n\r\nRUN apt-get update\r\n\r\nRUN pip install --upgrade pip\r\n\r\nCOPY requirements.txt /src/requirements.txt\r\n\r\nRUN pip install --requirement /src/requirements.txt\r\n\r\nWORKDIR /src/\r\n```\r\n\r\n## `Dockerfile` after\r\n\r\n```Dockerfile\r\nFROM python:3.12-slim-bookworm\r\n\r\nENV PIP_DISABLE_PIP_VERSION_CHECK 1\r\nENV PYTHONDONTWRITEBYTECODE 1\r\nENV PYTHONPATH /srv\r\nENV PYTHONUNBUFFERED 1\r\n\r\nRUN apt-get update\r\n\r\nRUN pip install --upgrade pip uv  # this is updated\r\n\r\nCOPY requirements.txt /src/requirements.txt\r\n\r\nRUN uv pip install --system --requirement /src/requirements.txt  # this is updated\r\n\r\nWORKDIR /src/\r\n```\r\n\r\n## GitHub Actions \r\n\r\nGitHub Actions are a little more complicated to explain, but my workflows started similar to this before I made the switch to `uv`:\r\n\r\n### `main.yml` before \r\n\r\n```yaml\r\n  - name: Set up Python 3.12\r\n    uses: actions/setup-python@v5\r\n    with:\r\n      python-version: '3.12'\r\n\r\n  - name: Install dependencies\r\n    run: |\r\n      python -m pip install --requirement requirements.in\r\n```\r\n\r\n### `main.yml` after\r\n\r\nThe most significant pain point I ran into was related to GitHub Issue [#1386](https://github.com/astral-sh/uv/issues/1386), which has a useable workaround. \r\n\r\n```yaml\r\n  - name: Set up Python 3.12\r\n    uses: actions/setup-python@v5\r\n    with:\r\n      python-version: '3.12'\r\n\r\n  - name: Install dependencies\r\n    run: |\r\n      python -m pip install --upgrade uv  # this is new\r\n      python -m uv pip install --system --requirement requirements.in  # this is updated\r\n```\r\n\r\n## Gotchas\r\n\r\nThe only gotchas I have encountered with `uv` is when I'm trying to install a Python package from a remote zip file. \r\n\r\nPreviously, I could copy and paste the GitHub repo URL, but `uv` required we use the format `package-name @ url-to-zip-file`\r\n\r\n### `requirements.in` before\r\n\r\n```\r\n# requirements.in\r\nhttps://github.com/jefftriplett/django-feedreader/archive/main.zip\r\n```\r\n\r\n### `requirements.in` after\r\n\r\n```\r\n# requirements.in\r\ndjango-feedreader @ https://github.com/jefftriplett/django-feedreader/archive/main.zip\r\n```\r\n\r\n## Conclusion\r\n\r\nThis update helps remove a few steps from updating your projects, and it should shave a few minutes off of updating projects to use it. \r\n\r\nI hope this was helpful to anyone who is considering making the switch to `uv`. I love to hear about how much time it saves you. \r\n",
				"date_published": "2024-03-14T11:51:21-05:00",
				"url": "https://micro.webology.dev/2024/03/14/pythons-uv-tool.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/13/on-environment-variables.html",
				"title": "On environment variables and dotenv files",
				"content_html": "<p>Brett Cannon recently vented some frustrations about <code>.env</code> files.</p>\n<blockquote>\n<p>I still hate .env files and their lack of a standard</p>\n<p><a href=\"https://mastodon.social/@brettcannon@fosstodon.org/112056455108582204\">https://mastodon.social/@brettcannon@fosstodon.org/112056455108582204</a></p>\n</blockquote>\n<p>Brett&rsquo;s thread and our conversation reminded me that my rule for working with dotenv files is to have my environment load them instead of my Python app trying to read from the <code>.env</code> file directly.</p>\n<h2 id=\"what-is-a-env-dotenv-file\">What is a <code>.env</code> (dotenv) file?</h2>\n<p>A <code>.env</code> (aka dotenv) is a file that contains a list of key-value pairs in the format of <code>{key}=value</code>.</p>\n<p>At a basic level, this is what a bare minimum <code>.env</code> file might look for in a Django project.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># .env</span>\nDEBUG<span style=\"color:#f92672\">=</span>true\nSECRET_KEY<span style=\"color:#f92672\">=</span>you need to change this\n</code></pre></div><p>My go-to library for reading ENV variables is <a href=\"https://github.com/sloria/environs\"><code>environs</code></a>. While the <code>environs</code> library can read directly from a dotenv file, don&rsquo;t do that. I never want my program to read from a file in production because I don&rsquo;t want a physical file with all of my API keys and secrets.</p>\n<p>Most hosting providers, like <a href=\"https://fly.io\">Fly.io</a>, have a command line interface for setting these key-value pairs in production to avoid needing a physical dotenv file.</p>\n<p>Instead, we should default to assuming that the ENV variables will bet in our environment, and we should fall back to either a reasonable default value or fail loudly.</p>\n<p>Using the <code>environs</code> library, my Django <code>settings.py</code> file tends to look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># settings.py</span>\n<span style=\"color:#f92672\">import</span> environs\n\nenv <span style=\"color:#f92672\">=</span> environs<span style=\"color:#f92672\">.</span>Env()\n\n<span style=\"color:#75715e\"># this will default to False if not set.</span>\nDEBUG <span style=\"color:#f92672\">=</span> env<span style=\"color:#f92672\">.</span>bool(<span style=\"color:#e6db74\">&#34;DJANGO_DEBUG&#34;</span>, default<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">False</span>)\n\n<span style=\"color:#75715e\"># this will error loudly if not set</span>\nSECRET_KEY <span style=\"color:#f92672\">=</span> env<span style=\"color:#f92672\">.</span>str(<span style=\"color:#e6db74\">&#34;SECRET_KEY&#34;</span>)\n\n<span style=\"color:#75715e\"># everything else... </span>\n</code></pre></div><p>I lean on Docker Compose for local development when I&rsquo;m building web apps because I might have three to five services running. Compose can read a dotenv file and register them into environment variables.</p>\n<h2 id=\"envrc-files-arent-env-files\"><code>.envrc</code> files aren&rsquo;t <code>.env</code> files</h2>\n<p>On my macOS, when I&rsquo;m not developing in a container, I use the <a href=\"https://direnv.net\"><code>direnv</code></a> application to read an <code>.envrc</code> file which is very similar to a dotenv file.</p>\n<p>A <code>.envrc</code> is very similar to a <code>.env</code> file, but to register the values into memory, you have to use Bash&rsquo;s <code>export</code> convention. If you don&rsquo;t specify <code>export</code>, the environment variables won&rsquo;t be available in your existing Bash environment.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># .envrc</span>\nexport DEBUG<span style=\"color:#f92672\">=</span>true\nexport SECRET_KEY<span style=\"color:#f92672\">=</span>you need to change this\n</code></pre></div><p>I&rsquo;m a fan of <code>direnv</code> because the utility ensures that my environment variables are only set while I am in the same folder or sub-folders that contain the <code>.envrc</code> file. If I move to a different folder location or project, <code>direnv</code> will automatically unload every environment variable that was previously set.</p>\n<p>This has saved me numerous times over the years when I have run a command that might upload a file to s3 and ensure that I&rsquo;m not uploading to the wrong account because an environment variable is still set from another project.</p>\n<p>Clients are generally understanding, but overriding static media for one client with another client&rsquo;s files is not a conversation I want to have with any client.</p>\n<p><code>direnv</code> is excellent insurance against forgetting to unset an environment variable.</p>\n<h2 id=\"seeding-a-env-file\">Seeding a <code>.env</code> file</h2>\n<p>I prefer to ship an example <code>.env.example</code> file in my projects with reasonable defaults and instructions for copying them over.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># .env.example</span>\nDEBUG<span style=\"color:#f92672\">=</span>true\nSECRET_KEY<span style=\"color:#f92672\">=</span>you need to change this\n</code></pre></div><p>If you are a <a href=\"https://github.com/casey/just\"><code>casey/just</code></a> <code>justfile</code> user, I like to ship a <code>just bootstrap</code> recipe that checks if a <code>.env</code> file already exists. If the <code>.env</code> file does not exist, it will copy the example in place.</p>\n<p>My <code>bootstrap</code> recipe typically looks like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"color:#75715e\"># justfile</span>\n<span style=\"color:#f92672\">bootstrap *ARGS</span>:\n    <span style=\"color:#75715e\">#!/usr/bin/env bash</span>\n    <span style=\"color:#ae81ff\">set -euo pipefail</span>\n\n    <span style=\"color:#ae81ff\">if [ ! -f &#34;.env&#34; ]; then</span>\n        <span style=\"color:#ae81ff\">echo &#34;.env created&#34;</span>\n        <span style=\"color:#ae81ff\">cp .env.example .env</span>\n    <span style=\"color:#ae81ff\">fi</span>\n</code></pre></div><h2 id=\"how-do-we-keep-dotenv-files-in-sync\">How do we keep dotenv files in sync?</h2>\n<p>One pain point when working with dotenv files is keeping new environment variables updated when a new variable has been added.</p>\n<p>Thankfully, <a href=\"https://github.com/kurtbuilds/modenv\">modenv</a> is an excellent utility that can do precisely this. I run <code>modenv check</code> and will compare the <code>.env*</code> files in the existing folder. It will tell us which files are missing an environment variable when it exists in one but not one of the other files.</p>\n<p>I use <code>modenv check -f</code> to sync up any missing keys with a blank value. This works well to sync up any new environment variables added to our <code>.env.example</code> file with our local <code>.env</code> file.</p>\n<h2 id=\"alternatives\">Alternatives</h2>\n<p>I recently wrote about <a href=\"https://micro.webology.dev/2024/02/21/using-chamber-with.html\">Using Chamber with Django and managing environment variables</a>, which dives into using Chamber, another tool for managing environment variables.</p>\n<p>If you are working with a team, the <a href=\"https://developer.1password.com/docs/cli/secrets-environment-variables/\">1Password CLI</a>&rsquo;s <code>op run</code> command is an excellent way to share environment variables securely. The tool is straightforward and can be integrated securely with local workflows and CI with just a few steps.</p>\n",
				"content_text": "Brett Cannon recently vented some frustrations about `.env` files.\n\n> I still hate .env files and their lack of a standard\n> \n> https://mastodon.social/@brettcannon@fosstodon.org/112056455108582204\n\nBrett's thread and our conversation reminded me that my rule for working with dotenv files is to have my environment load them instead of my Python app trying to read from the `.env` file directly. \n\n## What is a `.env` (dotenv) file?\n\nA `.env` (aka dotenv) is a file that contains a list of key-value pairs in the format of `{key}=value`. \n\nAt a basic level, this is what a bare minimum `.env` file might look for in a Django project. \n\n```shell\n# .env\nDEBUG=true\nSECRET_KEY=you need to change this\n```\n\nMy go-to library for reading ENV variables is [`environs`](https://github.com/sloria/environs). While the `environs` library can read directly from a dotenv file, don't do that. I never want my program to read from a file in production because I don't want a physical file with all of my API keys and secrets. \n\nMost hosting providers, like [Fly.io](https://fly.io), have a command line interface for setting these key-value pairs in production to avoid needing a physical dotenv file. \n\nInstead, we should default to assuming that the ENV variables will bet in our environment, and we should fall back to either a reasonable default value or fail loudly. \n\nUsing the `environs` library, my Django `settings.py` file tends to look like this:\n\n```python\n# settings.py\nimport environs\n\nenv = environs.Env()\n\n# this will default to False if not set.\nDEBUG = env.bool(\"DJANGO_DEBUG\", default=False)\n\n# this will error loudly if not set\nSECRET_KEY = env.str(\"SECRET_KEY\")\n\n# everything else... \n```\n\nI lean on Docker Compose for local development when I'm building web apps because I might have three to five services running. Compose can read a dotenv file and register them into environment variables. \n\n## `.envrc` files aren't `.env` files\n\nOn my macOS, when I'm not developing in a container, I use the [`direnv`](https://direnv.net) application to read an `.envrc` file which is very similar to a dotenv file. \n\nA `.envrc` is very similar to a `.env` file, but to register the values into memory, you have to use Bash's `export` convention. If you don't specify `export`, the environment variables won't be available in your existing Bash environment. \n\n```shell\n# .envrc\nexport DEBUG=true\nexport SECRET_KEY=you need to change this\n```\n\nI'm a fan of `direnv` because the utility ensures that my environment variables are only set while I am in the same folder or sub-folders that contain the `.envrc` file. If I move to a different folder location or project, `direnv` will automatically unload every environment variable that was previously set. \n\nThis has saved me numerous times over the years when I have run a command that might upload a file to s3 and ensure that I'm not uploading to the wrong account because an environment variable is still set from another project. \n\nClients are generally understanding, but overriding static media for one client with another client's files is not a conversation I want to have with any client. \n\n`direnv` is excellent insurance against forgetting to unset an environment variable. \n\n## Seeding a `.env` file\n\nI prefer to ship an example `.env.example` file in my projects with reasonable defaults and instructions for copying them over. \n\n```shell\n# .env.example\nDEBUG=true\nSECRET_KEY=you need to change this\n```\n\nIf you are a [`casey/just`](https://github.com/casey/just) `justfile` user, I like to ship a `just bootstrap` recipe that checks if a `.env` file already exists. If the `.env` file does not exist, it will copy the example in place. \n\nMy `bootstrap` recipe typically looks like this:\n\n```yaml\n# justfile\nbootstrap *ARGS:\n    #!/usr/bin/env bash\n    set -euo pipefail\n\n    if [ ! -f \".env\" ]; then\n        echo \".env created\"\n        cp .env.example .env\n    fi\n```\n\n## How do we keep dotenv files in sync? \n\nOne pain point when working with dotenv files is keeping new environment variables updated when a new variable has been added. \n\nThankfully, [modenv](https://github.com/kurtbuilds/modenv) is an excellent utility that can do precisely this. I run `modenv check` and will compare the `.env*` files in the existing folder. It will tell us which files are missing an environment variable when it exists in one but not one of the other files. \n\nI use `modenv check -f` to sync up any missing keys with a blank value. This works well to sync up any new environment variables added to our `.env.example` file with our local `.env` file. \n\n## Alternatives\n\nI recently wrote about [Using Chamber with Django and managing environment variables](https://micro.webology.dev/2024/02/21/using-chamber-with.html), which dives into using Chamber, another tool for managing environment variables. \n\nIf you are working with a team, the [1Password CLI](https://developer.1password.com/docs/cli/secrets-environment-variables/)'s `op run` command is an excellent way to share environment variables securely. The tool is straightforward and can be integrated securely with local workflows and CI with just a few steps. \n",
				"date_published": "2024-03-13T21:23:26-05:00",
				"url": "https://micro.webology.dev/2024/03/13/on-environment-variables.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/12/completed-finished-or.html",
				"title": "Completed, finished, or done",
				"content_html": "<p><em>Completed</em> means to have all the necessary parts or elements and lack nothing.</p>\n<p><em>Finished</em> means it&rsquo;s over and done with.</p>\n<p><em>Done</em> means finished or fully baked.</p>\n<p>Eventually, development will <em>stop</em> on a project, and everything around the project will slowly continue to move and change.</p>\n<p>When software development stops, the project begins to rot.</p>\n<p>It could be a new operating system release.</p>\n<p>It could be a new programming language release or paradigm shift.</p>\n<p>It could be a new framework release that has a security update.</p>\n<p>It could be a third-party library on which your project depends.</p>\n<p>It could be a drive fills up from database records or logs overflowing it.</p>\n<p>It could be the machine the software runs on that gets powered off, and no one notices.</p>\n<p>People could stop using the project because it is no longer needed.</p>\n<p>Maybe no one understands how to keep the program running.</p>\n<p>Eventually, the project will stop running because we turn it off or no longer understand how to keep it running.</p>\n",
				"content_text": "*Completed* means to have all the necessary parts or elements and lack nothing. \r\n\r\n*Finished* means it's over and done with. \r\n\r\n*Done* means finished or fully baked.\r\n\r\nEventually, development will *stop* on a project, and everything around the project will slowly continue to move and change. \r\n\r\nWhen software development stops, the project begins to rot. \r\n\r\nIt could be a new operating system release.\r\n\r\nIt could be a new programming language release or paradigm shift. \r\n\r\nIt could be a new framework release that has a security update. \r\n\r\nIt could be a third-party library on which your project depends. \r\n\r\nIt could be a drive fills up from database records or logs overflowing it. \r\n\r\nIt could be the machine the software runs on that gets powered off, and no one notices. \r\n\r\nPeople could stop using the project because it is no longer needed. \r\n\r\nMaybe no one understands how to keep the program running. \r\n\r\nEventually, the project will stop running because we turn it off or no longer understand how to keep it running. \n",
				"date_published": "2024-03-12T23:26:10-05:00",
				"url": "https://micro.webology.dev/2024/03/12/completed-finished-or.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/11/my-python-roots.html",
				"title": "My Python Roots",
				"content_html": "<p>Last week, during office hours, I shared the two libraries that were my gateways to learning Python.</p>\n<h2 id=\"cog\">Cog</h2>\n<p>I stumbled on Ned Batchelder&rsquo;s <a href=\"https://nedbatchelder.com/code/cog/\">Cog</a> while running an ISP in SWMO in the mid-00s. At the time, I was writing lots of PHP code and had a few layers of ORM code that I could generate with Cog&rsquo;s help. This code was mainly boilerplate, and Cog was great at templating code. Thankfully, I didn&rsquo;t need to know Python with Cog to make it work.</p>\n<p>In recent years, I have still used Cog to update docs and to document Justfiles, Click, Typer,  and console apps by grabbing the output and embedding it into docs.</p>\n<h2 id=\"beautiful-soup\">Beautiful Soup</h2>\n<p><a href=\"https://www.crummy.com/software/BeautifulSoup/\">Beautiful Soup</a> is the library that pushed me to learn Python. \nBeautiful Soup motivated me to learn Python and even more advanced feats like installing LXML and processing unparseable HTML or XML. \nI have always liked writing web scrapers and processing HTML documents, which is a weird hobby of mine.</p>\n<h2 id=\"my-first-python-app\">My first Python app</h2>\n<p>My friends and I worked in our first post-college dot com job, and Dell was running an incredible deal on their 20&quot; widescreen monitors over the Christmas holiday.</p>\n<p>Dell ran a daily Dell Elf (Delf) contest where you gave them your email address, and they would give you a discount code for their various products.</p>\n<p>The best code was 50% off of their 20&quot; widescreen displays, which was an incredible deal then. The display retailed for $499, so getting one for $249.50 was great. These codes were random, and the odds were 1 in 25 to get one.</p>\n<p>Using Python and having an email catchall, I wrote my first script to submit a series of email addresses until we found the daily 50% off code. At least four or five of my friends and I stocked up on these monitors that fall, and I have been a fan of Dell displays ever since.</p>\n<h2 id=\"today\">Today</h2>\n<p>I still use Cog and Beautiful Soup 4 in several projects, including a few daily drivers. Last year, during their end-of-year sale, I picked three Dell 27-inch displays, and I still have fond memories of Dell&rsquo;s displays.</p>\n",
				"content_text": "Last week, during office hours, I shared the two libraries that were my gateways to learning Python.\r\n\r\n## Cog\r\n\r\nI stumbled on Ned Batchelder's [Cog](https://nedbatchelder.com/code/cog/) while running an ISP in SWMO in the mid-00s. At the time, I was writing lots of PHP code and had a few layers of ORM code that I could generate with Cog's help. This code was mainly boilerplate, and Cog was great at templating code. Thankfully, I didn't need to know Python with Cog to make it work. \r\n\r\nIn recent years, I have still used Cog to update docs and to document Justfiles, Click, Typer,  and console apps by grabbing the output and embedding it into docs. \r\n\r\n## Beautiful Soup\r\n\r\n[Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/) is the library that pushed me to learn Python. \r\nBeautiful Soup motivated me to learn Python and even more advanced feats like installing LXML and processing unparseable HTML or XML. \r\nI have always liked writing web scrapers and processing HTML documents, which is a weird hobby of mine. \r\n\r\n## My first Python app\r\n\r\nMy friends and I worked in our first post-college dot com job, and Dell was running an incredible deal on their 20\" widescreen monitors over the Christmas holiday. \r\n\r\nDell ran a daily Dell Elf (Delf) contest where you gave them your email address, and they would give you a discount code for their various products. \r\n\r\nThe best code was 50% off of their 20\" widescreen displays, which was an incredible deal then. The display retailed for $499, so getting one for $249.50 was great. These codes were random, and the odds were 1 in 25 to get one. \r\n\r\nUsing Python and having an email catchall, I wrote my first script to submit a series of email addresses until we found the daily 50% off code. At least four or five of my friends and I stocked up on these monitors that fall, and I have been a fan of Dell displays ever since. \r\n\r\n## Today\r\n\r\nI still use Cog and Beautiful Soup 4 in several projects, including a few daily drivers. Last year, during their end-of-year sale, I picked three Dell 27-inch displays, and I still have fond memories of Dell's displays. \r\n",
				"date_published": "2024-03-11T19:49:57-05:00",
				"url": "https://micro.webology.dev/2024/03/11/my-python-roots.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/10/weeknotes-w.html",
				"title": "Weeknotes 2024 W10",
				"content_html": "<p>We were reminded that Winter is still here this week, starting with warmer weather and ending with colder.</p>\n<h2 id=\"family\">Family</h2>\n<p>My oldest was out two days this week at parent-teacher conferences, and next week, he has off for Spring Break. He missed his last basketball practice and game because he&rsquo;s had a bug for a few days with a runny nose and a low fever that keeps coming back.</p>\n<p>My youngest child is firmly in the four to six-word sentence phase. We are up to our eyeballs in potty training, and my daughter&rsquo;s new favorite phrase is, &ldquo;No, not yet,&rdquo; when you suggest we try again.</p>\n<p>The kid&rsquo;s grandfather drove down from Chicago to spend the weekend with us.</p>\n<p>I picked up Oliver&rsquo;s bug on Saturday and spent it more down than up, so my new compound miter saw sat in the box all weekend.</p>\n<h2 id=\"work\">Work</h2>\n<p>We are a few weeks into a new client project, and that&rsquo;s led to several refactors and working with newer tools, including Pydantic and Django Ninja for Model Schemas. I also expect to spend much time in Tailwind CSS land soon.</p>\n<h2 id=\"community\">Community</h2>\n<p>We had our monthly DEFNA meeting, elected officers, and discussed upcoming announcements.</p>\n<p>I had a PSF Code of Conduct WG meeting that conflicted with morning kid drop-offs, but I could join for the last 15 to 20 minutes to help them make a quorum so we could vote to pass a few things.</p>\n<p>I only had time to join the first half of one¬†<a href=\"https://wiggle.work/\">Wiggle Work</a>¬†event this week over lunch.</p>\n<p>This week, I hosted¬†<a href=\"https://mastodon.social/@webology/112049364089333842\">Office Hours</a>.</p>\n<h2 id=\"side-projects\">Side projects</h2>\n<p>I spent most of my side project time on <a href=\"https://django-news.com\">Django News</a>, <a href=\"https://jobs.django-news.com\">Django News Jobs</a>, and <a href=\"https://djangopackages.org\">Django Packages</a> and upgraded several projects to the latest Django 5.0.x security release and Python 3.12 releases. I also moved several projects to use <a href=\"https://github.com/astral-sh/uv\">uv</a> Python package manager, including <a href=\"https://djangopackages.org\">Django Packages</a> and <a href=\"https://jobs.django-news.com\">Django News Jobs</a>, which shaves minutes off of build times.</p>\n<p><strong>Django News Newsletter:</strong>¬†We shipped issue¬†<a href=\"https://django-news.com/issues/222#start\">#222</a>.</p>\n<p>I started on a Bootstrap to Tailwind CSS conversion tool after noticing that several popular tools last updated 3 to 6 years ago. I can brute force about 90% of it, but I have also meant to play around with <a href=\"https://pypi.org/project/cssutils/\"><code>cssutils</code></a> for a while. With <code>cssutils</code>, I think it might be possible to read from the various Bootstrap CSS versions and match up to some Tailwind CSS classes by comparing them via their CSS output.</p>\n<h2 id=\"writing\">Writing</h2>\n<p>I wrote and published every day.</p>\n<p><a href=\"https://micro.webology.dev/2024/03/09/bootstrap-to-tailwind.html\">2024-03-09</a>:¬†<strong>Bootstrap to Tailwind CSS</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/08/dave-the-diver.html\">2024-03-08</a>:¬†<strong>üéÆ Dave the Diver</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/07/how-to-test.html\">2024-03-07</a>:¬†<strong>How to test with Django, parametrize, and lazy fixtures</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/06/importing-data-with.html\">2024-03-06</a>:¬†<strong>Importing data with Django Ninja&rsquo;s ModelSchema</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/04/updating-python-from.html\">2024-03-05</a>:¬†<strong>Upgrading Python from 3.11 to 3.12 notes</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/04/pip-isolation.html\">2024-03-04</a>:¬†<strong>On pip isolation</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/03/03/the-weekend-woodworker.html\">2024-03-03</a>:¬†<strong>The Weekend Woodworker</strong>¬†ü™ö</p>\n<h2 id=\"me-time\">&ldquo;Me&rdquo; time</h2>\n<p>üèÄ I watched two Kansas Basketball games, a bunch of random men&rsquo;s and primarily women&rsquo;s games.</p>\n<h2 id=\"next-week\">Next week</h2>\n<p>I have more rot repair, and I now have a compound miter saw to make cutting wood for framing much more manageable.</p>\n<p>My oldest is off with spring break, so our morning routines start 10 minutes later and last about 40 minutes longer.</p>\n<p>Next week also starts the Big 12 Men&rsquo;s tournament, a sign that the second and third basketball seasons are beginning. I usually take a day off for the start of the Big 12 tournament, and I take a few days off for March Madness.</p>\n",
				"content_text": "We were reminded that Winter is still here this week, starting with warmer weather and ending with colder. \r\n\r\n## Family\r\n\r\nMy oldest was out two days this week at parent-teacher conferences, and next week, he has off for Spring Break. He missed his last basketball practice and game because he's had a bug for a few days with a runny nose and a low fever that keeps coming back. \r\n\r\nMy youngest child is firmly in the four to six-word sentence phase. We are up to our eyeballs in potty training, and my daughter's new favorite phrase is, \"No, not yet,\" when you suggest we try again. \r\n\r\nThe kid's grandfather drove down from Chicago to spend the weekend with us. \r\n\r\nI picked up Oliver's bug on Saturday and spent it more down than up, so my new compound miter saw sat in the box all weekend. \r\n\r\n## Work\r\n\r\nWe are a few weeks into a new client project, and that's led to several refactors and working with newer tools, including Pydantic and Django Ninja for Model Schemas. I also expect to spend much time in Tailwind CSS land soon. \r\n\r\n## Community\r\n\r\nWe had our monthly DEFNA meeting, elected officers, and discussed upcoming announcements. \r\n\r\nI had a PSF Code of Conduct WG meeting that conflicted with morning kid drop-offs, but I could join for the last 15 to 20 minutes to help them make a quorum so we could vote to pass a few things. \r\n\r\nI only had time to join the first half of one¬†[Wiggle Work](https://wiggle.work/)¬†event this week over lunch. \r\n\r\nThis week, I hosted¬†[Office Hours](https://mastodon.social/@webology/112049364089333842).\r\n\r\n## Side projects\r\n\r\nI spent most of my side project time on [Django News](https://django-news.com), [Django News Jobs](https://jobs.django-news.com), and [Django Packages](https://djangopackages.org) and upgraded several projects to the latest Django 5.0.x security release and Python 3.12 releases. I also moved several projects to use [uv](https://github.com/astral-sh/uv) Python package manager, including [Django Packages](https://djangopackages.org) and [Django News Jobs](https://jobs.django-news.com), which shaves minutes off of build times. \r\n\r\n**Django News Newsletter:**¬†We shipped issue¬†[#222](https://django-news.com/issues/222#start).\r\n\r\nI started on a Bootstrap to Tailwind CSS conversion tool after noticing that several popular tools last updated 3 to 6 years ago. I can brute force about 90% of it, but I have also meant to play around with [`cssutils`](https://pypi.org/project/cssutils/) for a while. With `cssutils`, I think it might be possible to read from the various Bootstrap CSS versions and match up to some Tailwind CSS classes by comparing them via their CSS output. \r\n\r\n## Writing\r\n\r\nI wrote and published every day. \r\n\r\n[2024-03-09](https://micro.webology.dev/2024/03/09/bootstrap-to-tailwind.html):¬†**Bootstrap to Tailwind CSS**¬†\r\n\r\n[2024-03-08](https://micro.webology.dev/2024/03/08/dave-the-diver.html):¬†**üéÆ Dave the Diver**¬†\r\n\r\n[2024-03-07](https://micro.webology.dev/2024/03/07/how-to-test.html):¬†**How to test with Django, parametrize, and lazy fixtures**¬†\r\n\r\n[2024-03-06](https://micro.webology.dev/2024/03/06/importing-data-with.html):¬†**Importing data with Django Ninja's ModelSchema**¬†\r\n\r\n[2024-03-05](https://micro.webology.dev/2024/03/04/updating-python-from.html):¬†**Upgrading Python from 3.11 to 3.12 notes**¬†\r\n\r\n[2024-03-04](https://micro.webology.dev/2024/03/04/pip-isolation.html):¬†**On pip isolation**¬†\r\n\r\n[2024-03-03](https://micro.webology.dev/2024/03/03/the-weekend-woodworker.html):¬†**The Weekend Woodworker**¬†ü™ö \r\n\r\n## \"Me\" time\r\n\r\nüèÄ I watched two Kansas Basketball games, a bunch of random men's and primarily women's games. \r\n\r\n## Next week\r\n\r\nI have more rot repair, and I now have a compound miter saw to make cutting wood for framing much more manageable. \r\n\r\nMy oldest is off with spring break, so our morning routines start 10 minutes later and last about 40 minutes longer. \r\n\r\nNext week also starts the Big 12 Men's tournament, a sign that the second and third basketball seasons are beginning. I usually take a day off for the start of the Big 12 tournament, and I take a few days off for March Madness. \n",
				"date_published": "2024-03-10T20:06:03-05:00",
				"url": "https://micro.webology.dev/2024/03/10/weeknotes-w.html",
				"tags": ["Weeknotes"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/09/bootstrap-to-tailwind.html",
				"title": "Bootstrap to Tailwind CSS",
				"content_html": "<p>I spent a few hours tonight weighing my options to port a few websites from Bootstrap to Tailwind CSS.</p>\n<p>I started with what seems to be the original <a href=\"https://github.com/awssat/tailwindo\"><code>awssat/tailwindo</code></a> project is a PHP console app whose goal was to convert any Bootstrap to Tailwind CSS and was last updated three years ago. I couldn&rsquo;t get it to work from the console or via Docker, so I punted and looked at other options.</p>\n<p>This led me to the <a href=\"https://github.com/riazXrazor/node-tailwindo\"><code>node-tailwindo</code></a> project, which did install successfully for me. <code>node-tailwindo</code> project hadn&rsquo;t been updated in six years, so much has changed in both projects.</p>\n<p>Since <code>node-tailwindo</code> was installed successfully and seemed to run OK, I ran it on a few projects, including <a href=\"https://djangopackages.org\">Django Packages</a>, and the results were not terrible. They were not amazing, but things worked.</p>\n<p>I looked at commercial options, and they fall into either Browser Extensions that let you view an existing website with a copy/convert to Tailwind CSS option or tools that rewrite your existing CSS. Neither felt like a good option to me.</p>\n<p>I finally did what any Python developer would and installed <a href=\"https://beautiful-soup-4.readthedocs.io/en/latest/\">BeautifulSoup4</a>. Next, I wrote a script to read all the files in a template folder, and it extracted all the class attributes from the existing HTML. One hundred seventy-six unique classes later, I had my answer.</p>\n<p>Writing my upgrade tool felt like a bigger project that I wanted to take on, but it helped me spot a few issues that <code>node-tailwindo</code> would struggle with.</p>\n<p>This is where BeautifulSoup4 shines, and I could quickly swap out a few classes before I fed them into <code>node-tailwindo</code>, and it fixes several bugs where the project was confused by <code>{% block %}</code> and  <code>&amp;#123;&amp;#123; variable }}</code> tags/blocks.</p>\n<p>This might be a project; I slowly update as I get bored since I can probably add and test 10 to 20 tests over lunch. For a brief minute, I debated if this would be my first Rust app. Spoiler: It is not.</p>\n",
				"content_text": "I spent a few hours tonight weighing my options to port a few websites from Bootstrap to Tailwind CSS. \r\n\r\nI started with what seems to be the original [`awssat/tailwindo`](https://github.com/awssat/tailwindo) project is a PHP console app whose goal was to convert any Bootstrap to Tailwind CSS and was last updated three years ago. I couldn't get it to work from the console or via Docker, so I punted and looked at other options. \r\n\r\nThis led me to the [`node-tailwindo`](https://github.com/riazXrazor/node-tailwindo) project, which did install successfully for me. `node-tailwindo` project hadn't been updated in six years, so much has changed in both projects. \r\n\r\nSince `node-tailwindo` was installed successfully and seemed to run OK, I ran it on a few projects, including [Django Packages](https://djangopackages.org), and the results were not terrible. They were not amazing, but things worked. \r\n\r\nI looked at commercial options, and they fall into either Browser Extensions that let you view an existing website with a copy/convert to Tailwind CSS option or tools that rewrite your existing CSS. Neither felt like a good option to me. \r\n\r\nI finally did what any Python developer would and installed [BeautifulSoup4](https://beautiful-soup-4.readthedocs.io/en/latest/). Next, I wrote a script to read all the files in a template folder, and it extracted all the class attributes from the existing HTML. One hundred seventy-six unique classes later, I had my answer. \r\n\r\nWriting my upgrade tool felt like a bigger project that I wanted to take on, but it helped me spot a few issues that `node-tailwindo` would struggle with. \r\n\r\nThis is where BeautifulSoup4 shines, and I could quickly swap out a few classes before I fed them into `node-tailwindo`, and it fixes several bugs where the project was confused by `{% block %}` and  `&#123;&#123; variable }}` tags/blocks. \r\n\r\nThis might be a project; I slowly update as I get bored since I can probably add and test 10 to 20 tests over lunch. For a brief minute, I debated if this would be my first Rust app. Spoiler: It is not. \r\n",
				"date_published": "2024-03-09T23:14:27-05:00",
				"url": "https://micro.webology.dev/2024/03/09/bootstrap-to-tailwind.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/08/dave-the-diver.html",
				"title": "üéÆ Dave the Diver",
				"content_html": "<p>Dave the Diver is a fun game for such a random, quirky, and so many game-styles / mini-games all mashed together. In the game, you play Dave, who dives and explores the sea by day, and you run a sushi restaurant by night.</p>\n<p>It&rsquo;s one of the few games where I pushed to get the endgame out of the way to resume running my sushi restaurant, maxing out my employees, and completing my dive adventures/collecting. Even after a few months, I still enjoy playing day-to-day activities.</p>\n<p>If you are looking for a fun 2D video game to dive into, I have thoroughly enjoyed Dave the Diver.</p>\n<p><a href=\"https://www.backloggd.com/games/dave-the-diver/\">www.backloggd.com/games/dav&hellip;</a></p>\n",
				"content_text": "Dave the Diver is a fun game for such a random, quirky, and so many game-styles / mini-games all mashed together. In the game, you play Dave, who dives and explores the sea by day, and you run a sushi restaurant by night. \n\nIt's one of the few games where I pushed to get the endgame out of the way to resume running my sushi restaurant, maxing out my employees, and completing my dive adventures/collecting. Even after a few months, I still enjoy playing day-to-day activities. \n\nIf you are looking for a fun 2D video game to dive into, I have thoroughly enjoyed Dave the Diver. \n\n[www.backloggd.com/games/dav...](https://www.backloggd.com/games/dave-the-diver/)  \n",
				"date_published": "2024-03-08T21:31:17-05:00",
				"url": "https://micro.webology.dev/2024/03/08/dave-the-diver.html",
				"tags": ["Gaming"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/07/how-to-test.html",
				"title": "How to test with Django, parametrize, and lazy fixtures",
				"content_html": "<p>This article is a follow-up to my post on <a href=\"https://micro.webology.dev/2024/02/05/how-to-test.html\">How to test with Django and pytest fixtures</a>.</p>\n<p>Here are some notes on how I prefer to test views for a Django application with authentication using <a href=\"https://github.com/TvoroG/pytest-lazy-fixture\">pytest-lazy-fixture</a>.</p>\n<h2 id=\"fixtures\">Fixtures</h2>\n<p><code>pytest-django</code> has a <a href=\"https://pytest-django.readthedocs.io/en/latest/helpers.html#django-user-model\"><code>django_user_model</code></a> fixture/shortcut, which I recommend using to create valid Django user accounts for your project.</p>\n<p>This example assumes that there are four levels of users. We have anonymous (not authenticated), &ldquo;user,&rdquo; staff, and superuser levels of permission to work with. Both staff and superusers follow the Django default pattern and have the <code>is_staff</code> and <code>is_superuser</code> boolean fields set appropriately.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># users/tests/fixtures.py</span>\n<span style=\"color:#f92672\">import</span> pytest\n\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>fixture\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">password</span>(db) <span style=\"color:#f92672\">-&gt;</span> str:\n    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#e6db74\">&#34;password&#34;</span>\n\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>fixture\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">staff</span>(db, django_user_model, faker, password):\n    <span style=\"color:#66d9ef\">return</span> django_user_model<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>create_user(\n        email<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;staff@example.com&#34;</span>,\n        first_name<span style=\"color:#f92672\">=</span>faker<span style=\"color:#f92672\">.</span>first_name(),\n        is_staff<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">True</span>,\n        is_superuser<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">False</span>,\n        last_name<span style=\"color:#f92672\">=</span>faker<span style=\"color:#f92672\">.</span>last_name(),\n        password<span style=\"color:#f92672\">=</span>password,\n    )\n\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>fixture()\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">superuser</span>(db, django_user_model, faker, password):\n    <span style=\"color:#66d9ef\">return</span> django_user_model<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>create_user(\n        email<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;superuser@example.com&#34;</span>,\n        first_name<span style=\"color:#f92672\">=</span>faker<span style=\"color:#f92672\">.</span>first_name(),\n        is_staff<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">True</span>,\n        is_superuser<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">True</span>,\n        last_name<span style=\"color:#f92672\">=</span>faker<span style=\"color:#f92672\">.</span>last_name(),\n        password<span style=\"color:#f92672\">=</span>password,\n    )\n\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>fixture()\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">user</span>(db, django_user_model, faker, password):\n    <span style=\"color:#66d9ef\">return</span> django_user_model<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>create_user(\n        email<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;user@example.com&#34;</span>,\n        first_name<span style=\"color:#f92672\">=</span>faker<span style=\"color:#f92672\">.</span>first_name(),\n        last_name<span style=\"color:#f92672\">=</span>faker<span style=\"color:#f92672\">.</span>last_name(),\n        password<span style=\"color:#f92672\">=</span>password,\n    )\n\n</code></pre></div><h2 id=\"testing-our-views-with-different-user-roles\">Testing our views with different User roles</h2>\n<p>We will assume that our website has some working Category pages that can only viewed by staff or superusers. The <code>lazy_fixture</code> library allows us to pass the name of a fixture using parametrize along with the expected status_code that our view should return.</p>\n<p>If you have never seen <code>parametrize</code>, it is a nice pytest convention that will re-run the same test multiple times while passing a list of parameters into the test to be evaluated.</p>\n<p>The <code>tp</code> function variable is a <a href=\"https://github.com/revsys/django-test-plus\">django-test-plus</a> fixture.</p>\n<p><code>user</code>, <code>staff</code>, and <code>superuser</code> are fixtures we created above.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># categories/tests/test_views.py</span>\n<span style=\"color:#f92672\">import</span> pytest\n\n<span style=\"color:#f92672\">from</span> pytest <span style=\"color:#f92672\">import</span> param\n<span style=\"color:#f92672\">from</span> pytest_lazyfixture <span style=\"color:#f92672\">import</span> lazy_fixture\n\n\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">test_category_noauth</span>(db, tp):\n    <span style=\"color:#e6db74\">&#34;&#34;&#34;\n</span><span style=\"color:#e6db74\">    GET &#39;admin/categories/&#39;\n</span><span style=\"color:#e6db74\">    &#34;&#34;&#34;</span>\n    url <span style=\"color:#f92672\">=</span> tp<span style=\"color:#f92672\">.</span>reverse(<span style=\"color:#e6db74\">&#34;admin:category-list&#34;</span>)\n\n    <span style=\"color:#75715e\"># Does this view work with auth?</span>\n    response <span style=\"color:#f92672\">=</span> tp<span style=\"color:#f92672\">.</span>get(url)\n    tp<span style=\"color:#f92672\">.</span>response_401(response)\n\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>mark<span style=\"color:#f92672\">.</span>parametrize(\n    <span style=\"color:#e6db74\">&#34;testing_user,status_code&#34;</span>,\n    [\n        param(lazy_fixture(<span style=\"color:#e6db74\">&#34;user&#34;</span>), <span style=\"color:#ae81ff\">403</span>),\n        param(lazy_fixture(<span style=\"color:#e6db74\">&#34;staff&#34;</span>), <span style=\"color:#ae81ff\">200</span>),\n        param(lazy_fixture(<span style=\"color:#e6db74\">&#34;superuser&#34;</span>), <span style=\"color:#ae81ff\">200</span>),\n    ],\n)\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">test_category_with_auth</span>(db, tp, testing_user, password, status_code):\n    <span style=\"color:#e6db74\">&#34;&#34;&#34;\n</span><span style=\"color:#e6db74\">    GET &#39;admin/categories/&#39;\n</span><span style=\"color:#e6db74\">    &#34;&#34;&#34;</span>\n    url <span style=\"color:#f92672\">=</span> tp<span style=\"color:#f92672\">.</span>reverse(<span style=\"color:#e6db74\">&#34;admin:category-list&#34;</span>)\n\n    <span style=\"color:#75715e\"># Does this view work with auth?</span>\n    tp<span style=\"color:#f92672\">.</span>client<span style=\"color:#f92672\">.</span>login(username<span style=\"color:#f92672\">=</span>testing_user<span style=\"color:#f92672\">.</span>email, password<span style=\"color:#f92672\">=</span>password)\n    response <span style=\"color:#f92672\">=</span> tp<span style=\"color:#f92672\">.</span>get(url)\n    <span style=\"color:#66d9ef\">assert</span> response<span style=\"color:#f92672\">.</span>status_code <span style=\"color:#f92672\">==</span> status_code\n</code></pre></div><h2 id=\"notes\">Notes</h2>\n<p><strong>Please note:</strong> These status codes are more typical for a REST API. So I would adjust any 40x status codes accordingly.</p>\n<p>My goal in sharing these examples is to show that you can get some helpful testing in with a little bit of code, even if the goal isn&rsquo;t to dive deep and cover everything.</p>\n<h2 id=\"updates\">Updates</h2>\n<p>To make my example more consistent, I updated <code>@pytest.mark.django_db()</code> to use a <code>db</code> fixture. Thank you, <a href=\"https://mastodon.social/@bennylope@social.benlopatin.com/112060829098386312\">Ben Lopatin</a>, for the feedback.</p>\n",
				"content_text": "This article is a follow-up to my post on [How to test with Django and pytest fixtures](https://micro.webology.dev/2024/02/05/how-to-test.html). \n\nHere are some notes on how I prefer to test views for a Django application with authentication using [pytest-lazy-fixture](https://github.com/TvoroG/pytest-lazy-fixture). \n\n## Fixtures\n\n`pytest-django` has a [`django_user_model`](https://pytest-django.readthedocs.io/en/latest/helpers.html#django-user-model) fixture/shortcut, which I recommend using to create valid Django user accounts for your project. \n\nThis example assumes that there are four levels of users. We have anonymous (not authenticated), \"user,\" staff, and superuser levels of permission to work with. Both staff and superusers follow the Django default pattern and have the `is_staff` and `is_superuser` boolean fields set appropriately. \n\n```python\n# users/tests/fixtures.py\nimport pytest\n\n\n@pytest.fixture\ndef password(db) -> str:\n    return \"password\"\n\n\n@pytest.fixture\ndef staff(db, django_user_model, faker, password):\n    return django_user_model.objects.create_user(\n        email=\"staff@example.com\",\n        first_name=faker.first_name(),\n        is_staff=True,\n        is_superuser=False,\n        last_name=faker.last_name(),\n        password=password,\n    )\n\n\n@pytest.fixture()\ndef superuser(db, django_user_model, faker, password):\n    return django_user_model.objects.create_user(\n        email=\"superuser@example.com\",\n        first_name=faker.first_name(),\n        is_staff=True,\n        is_superuser=True,\n        last_name=faker.last_name(),\n        password=password,\n    )\n\n\n@pytest.fixture()\ndef user(db, django_user_model, faker, password):\n    return django_user_model.objects.create_user(\n        email=\"user@example.com\",\n        first_name=faker.first_name(),\n        last_name=faker.last_name(),\n        password=password,\n    )\n\n```\n\n## Testing our views with different User roles\n\nWe will assume that our website has some working Category pages that can only viewed by staff or superusers. The `lazy_fixture` library allows us to pass the name of a fixture using parametrize along with the expected status_code that our view should return. \n\nIf you have never seen `parametrize`, it is a nice pytest convention that will re-run the same test multiple times while passing a list of parameters into the test to be evaluated. \n\nThe `tp` function variable is a [django-test-plus](https://github.com/revsys/django-test-plus) fixture.\n\n`user`, `staff`, and `superuser` are fixtures we created above. \n\n```python\n# categories/tests/test_views.py\nimport pytest\n\nfrom pytest import param\nfrom pytest_lazyfixture import lazy_fixture\n\n\ndef test_category_noauth(db, tp):\n    \"\"\"\n    GET 'admin/categories/'\n    \"\"\"\n    url = tp.reverse(\"admin:category-list\")\n\n    # Does this view work with auth?\n    response = tp.get(url)\n    tp.response_401(response)\n\n\n@pytest.mark.parametrize(\n    \"testing_user,status_code\",\n    [\n        param(lazy_fixture(\"user\"), 403),\n        param(lazy_fixture(\"staff\"), 200),\n        param(lazy_fixture(\"superuser\"), 200),\n    ],\n)\ndef test_category_with_auth(db, tp, testing_user, password, status_code):\n    \"\"\"\n    GET 'admin/categories/'\n    \"\"\"\n    url = tp.reverse(\"admin:category-list\")\n\n    # Does this view work with auth?\n    tp.client.login(username=testing_user.email, password=password)\n    response = tp.get(url)\n    assert response.status_code == status_code\n```\n\n## Notes\n\n**Please note:** These status codes are more typical for a REST API. So I would adjust any 40x status codes accordingly. \n\nMy goal in sharing these examples is to show that you can get some helpful testing in with a little bit of code, even if the goal isn't to dive deep and cover everything. \n\n## Updates\n\nTo make my example more consistent, I updated `@pytest.mark.django_db()` to use a `db` fixture. Thank you, [Ben Lopatin](https://mastodon.social/@bennylope@social.benlopatin.com/112060829098386312), for the feedback. \n",
				"date_published": "2024-03-07T20:53:36-05:00",
				"url": "https://micro.webology.dev/2024/03/07/how-to-test.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/06/importing-data-with.html",
				"title": "Importing data with Django Ninja's ModelSchema",
				"content_html": "<p>I have recently been playing with <a href=\"https://github.com/vitalik/django-ninja\">Django Ninja</a> for small APIs and for leveraging Schema. Specifically, <a href=\"https://django-ninja.dev/guides/response/django-pydantic/\">ModelSchema</a> is worth checking out because it&rsquo;s a hidden gem for working with Django models, even if you aren&rsquo;t interested in building a Rest API.</p>\n<blockquote>\n<p>Schemas are very useful to define your validation rules and responses, but sometimes you need to reflect your database models into schemas and keep changes in sync.\n<a href=\"https://django-ninja.dev/guides/response/django-pydantic/\">https://django-ninja.dev/guides/response/django-pydantic/</a></p>\n</blockquote>\n<p>One challenge we face is importing data from one legacy database into a new database with a different structure. While we can map old fields to new fields using a Python dictionary, we also need more control over what the data looks like coming back out.</p>\n<p>Thankfully, ModelSchema is built on top of <a href=\"%5BPydantic%5D(https://docs.pydantic.dev/latest/)\">Pydantic</a>&rsquo;s <a href=\"https://docs.pydantic.dev/2.6/api/base_model/\">BaseModel</a> and supports Pydantic&rsquo;s <a href=\"https://docs.pydantic.dev/latest/api/fields/#pydantic.fields.Field\">Field alias</a> feature.</p>\n<p>This allows us to create a ModelSchema based on a LegacyCategory model, and we can build out <code>Field(alias=&quot;...&quot;)</code> types to change the shape of how the data is returned.</p>\n<p>We can then store the result as a Python dictionary and insert it into our new model. We can also log a JSON representation of the instance to make debugging easier. See <a href=\"https://django-ninja.dev/guides/response/#serializing-outside-of-views\">Serializing Outside of Views</a> for an overview of how the <code>from_orm</code> API works.</p>\n<p>To test this, I built a proof of concept Django management command using <a href=\"https://github.com/GaretJax/django-click\">django-click</a>, which loops through all our legacy category models and prints them.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># management/commands/demo_model_schema.py</span>\n<span style=\"color:#f92672\">import</span> djclick <span style=\"color:#66d9ef\">as</span> click\n\n<span style=\"color:#f92672\">from</span> ninja <span style=\"color:#f92672\">import</span> ModelSchema\n<span style=\"color:#f92672\">from</span> pydantic <span style=\"color:#f92672\">import</span> Field\n\n<span style=\"color:#f92672\">from</span> legacy.models <span style=\"color:#f92672\">import</span> LegacyCategory\n<span style=\"color:#f92672\">from</span> future.models <span style=\"color:#f92672\">import</span> Category\n\n\n<span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">LegacyCategorySchema</span>(ModelSchema):\n    name: str <span style=\"color:#f92672\">=</span> Field(alias<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;cat_name&#34;</span>)\n    description: str <span style=\"color:#f92672\">=</span> Field(alias<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;cat_description&#34;</span>)\n    active: bool <span style=\"color:#f92672\">=</span> Field(alias<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;cat_is_active&#34;</span>)\n\n    <span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">Meta</span>:\n        fields <span style=\"color:#f92672\">=</span> [<span style=\"color:#e6db74\">&#34;id&#34;</span>]\n        model <span style=\"color:#f92672\">=</span> Category\n\n\n<span style=\"color:#a6e22e\">@click</span><span style=\"color:#f92672\">.</span>command()\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">main</span>():\n    categories <span style=\"color:#f92672\">=</span> LegacyCategory<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>all()\n    <span style=\"color:#66d9ef\">for</span> category <span style=\"color:#f92672\">in</span> categories:\n        data <span style=\"color:#f92672\">=</span> LegacyCategorySchema<span style=\"color:#f92672\">.</span>from_orm(category)<span style=\"color:#f92672\">.</span>dict()\n        print(data)\n        <span style=\"color:#75715e\"># save to a database or do something useful here</span>\n</code></pre></div><h2 id=\"more-resources\">More resources</h2>\n<p>If you are curious about what Django Ninja is about, I recommend starting with their <a href=\"https://django-ninja.dev/tutorial/other/crud/#final-code\">CRUD example: Final Code</a>, and working backward. This will give you a good idea of what a finished CRUD Rest API looks like with Django Ninja.</p>\n",
				"content_text": "I have recently been playing with [Django Ninja](https://github.com/vitalik/django-ninja) for small APIs and for leveraging Schema. Specifically, [ModelSchema](https://django-ninja.dev/guides/response/django-pydantic/) is worth checking out because it's a hidden gem for working with Django models, even if you aren't interested in building a Rest API. \n\n> Schemas are very useful to define your validation rules and responses, but sometimes you need to reflect your database models into schemas and keep changes in sync.\n> https://django-ninja.dev/guides/response/django-pydantic/\n\nOne challenge we face is importing data from one legacy database into a new database with a different structure. While we can map old fields to new fields using a Python dictionary, we also need more control over what the data looks like coming back out. \n\nThankfully, ModelSchema is built on top of [Pydantic]([Pydantic](https://docs.pydantic.dev/latest/))'s [BaseModel](https://docs.pydantic.dev/2.6/api/base_model/) and supports Pydantic's [Field alias](https://docs.pydantic.dev/latest/api/fields/#pydantic.fields.Field) feature.\n\nThis allows us to create a ModelSchema based on a LegacyCategory model, and we can build out `Field(alias=\"...\")` types to change the shape of how the data is returned. \n\nWe can then store the result as a Python dictionary and insert it into our new model. We can also log a JSON representation of the instance to make debugging easier. See [Serializing Outside of Views](https://django-ninja.dev/guides/response/#serializing-outside-of-views) for an overview of how the `from_orm` API works. \n\nTo test this, I built a proof of concept Django management command using [django-click](https://github.com/GaretJax/django-click), which loops through all our legacy category models and prints them. \n\n```python\n# management/commands/demo_model_schema.py\nimport djclick as click\n\nfrom ninja import ModelSchema\nfrom pydantic import Field\n\nfrom legacy.models import LegacyCategory\nfrom future.models import Category\n\n\nclass LegacyCategorySchema(ModelSchema):\n    name: str = Field(alias=\"cat_name\")\n    description: str = Field(alias=\"cat_description\")\n    active: bool = Field(alias=\"cat_is_active\")\n\n    class Meta:\n        fields = [\"id\"]\n        model = Category\n\n\n@click.command()\ndef main():\n    categories = LegacyCategory.objects.all()\n    for category in categories:\n        data = LegacyCategorySchema.from_orm(category).dict()\n        print(data)\n        # save to a database or do something useful here\n```\n\n## More resources \n\nIf you are curious about what Django Ninja is about, I recommend starting with their [CRUD example: Final Code](https://django-ninja.dev/tutorial/other/crud/#final-code), and working backward. This will give you a good idea of what a finished CRUD Rest API looks like with Django Ninja. \n",
				"date_published": "2024-03-06T22:54:11-05:00",
				"url": "https://micro.webology.dev/2024/03/06/importing-data-with.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/04/updating-python-from.html",
				"title": "Upgrading Python from 3.11 to 3.12 notes",
				"content_html": "<p>Recently, I have been slowly moving several of my side projects and client projects from various Python versions to Python 3.12.</p>\n<p>I never see people write about this, so it might be nice to write and share some notes.</p>\n<h2 id=\"where-to-start\">Where to start</h2>\n<p>The first thing we do with a relatively simple upgrade is figure out what Python version we use. Thankfully, the project we picked mentioned in the README.md that it was using Python 3.11.</p>\n<p>Once we know which version of Python we are using, we can open up iTerm and get a git checkout of the project.</p>\n<p>Next, we will run <code>git grep 11</code>, where &ldquo;11&rdquo; is the shortened form of the Python version that we are running. There are so many variations of <code>3.11</code> and <code>311</code> that using the minor version tends to be about right.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-bash\" data-lang=\"bash\">$ git grep <span style=\"color:#ae81ff\">11</span>\n... really long list...\n.github/workflows/actions.yml:      - name: Set up Python 3.11\n.github/workflows/actions.yml:          python-version: <span style=\"color:#e6db74\">&#39;3.11&#39;</span>\n.github/workflows/actions.yml:      - name: Set up Python 3.11\n.github/workflows/actions.yml:          python-version: <span style=\"color:#e6db74\">&#39;3.11&#39;</span>\n.pre-commit-config.yaml:  python: python311\n.pre-commit-config.yaml:        args: <span style=\"color:#f92672\">[</span>--py311-plus<span style=\"color:#f92672\">]</span>\nREADME.md:This project will use Python 3.11, Docker, and Docker Compose.\nREADME.md:Make a Python 3.11.x virtualenv.\ndocker/Dockerfile:FROM python:3.11-slim as builder-py\ndocker/Dockerfile:FROM python:3.11-slim AS release\npyproject.toml:requires-python <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;&gt;= 3.11&#34;</span>\npyproject.toml:# Assume Python &gt;<span style=\"color:#f92672\">=</span>3.11.\npyproject.toml:target-version <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;py311&#34;</span>\nrequirements.txt:# This file is autogenerated by pip-compile with Python 3.11\n... lots and lots of files...\n</code></pre></div><p>This output will give us a long list of files. Usually, this is 100s or 1000s of files we will pipe or copy into our code editor. We will make a few passes to remove all of the CSS, SVG, and HTML files in the list, and that pairs down the results to half a dozen or a dozen files.</p>\n<h2 id=\"create-a-new-git-branch\">Create a new git branch</h2>\n<p>Next, we will create a new git branch called <code>upgrade-to-python-3.12</code>, and we will open each file one by one, and replace every &ldquo;3.11&rdquo; and &ldquo;311&rdquo; reference with &ldquo;3.12&rdquo; and &ldquo;312&rdquo; respectively.</p>\n<h2 id=\"lintformat-our-code-base\">Lint/format our code base</h2>\n<p>Once we have all of our files updated, we will commit everything. Then we will note special files like <code>.pre-commit-config.yaml</code> and <code>pyproject.toml</code>, impacting how my Python files are linted and formatted. Then, we will run <code>pre-commit</code> immediately after and commit any formatting changes.</p>\n<h2 id=\"rebuild-our-docker-image\">Rebuild our Docker image</h2>\n<p>Since this project contains <code>docker/Dockerfile</code> that tells us the project uses Docker, we will need to rebuild our container image and note anything that breaks.</p>\n<h2 id=\"re-pinfreeze-our-python-dependencies\">Re-pin/freeze our Python dependencies</h2>\n<p>Next, we will run <code>pip-tools</code> <code>compile</code> from within our newly rebuilt Docker container to build a new <code>requirements.txt</code> using Python 3.12.</p>\n<h2 id=\"re-rebuild-our-docker-image-again\">Re-rebuild our Docker image (again)</h2>\n<p><strong>&ldquo;Insert Xzibit Yo Dawg meme.&quot;</strong> Next, we rebuild our Docker image using the newly pinned <code>requirements.txt</code> file, and this should be our final image.</p>\n<h2 id=\"did-our-tests-pass\">Did our tests pass?</h2>\n<p>Assuming Docker builds cleanly, we will run my test suite using <code>pytest</code>. Once our tests pass, we&rsquo;ll commit any uncommitted changes, <code>git push</code> our branch to GitHub, and open a Pull Request for review.</p>\n<h2 id=\"did-our-tests-pass-in-ci\">Did our tests pass in CI?</h2>\n<p>If our tests pass on GitHub Actions in CI, then we know our upgrade was successful, and we are reasonably confident that</p>\n<h2 id=\"when-things-dont-just-work\">When things don&rsquo;t &ldquo;just work.&rdquo;</h2>\n<p>If you keep up with your upgrades, most of the time, everything works. Half a dozen projects did work for me, but I had one that did not work on Monday. There was a sub-dependency issue, so I closed my branch and opened a new issue to revisit this upgrade once the next version of Python 3.12.3 is released.</p>\n<p>Even though this wasn&rsquo;t a Python 3.12.2 bug, it takes the Python ecosystem time to catch up with newer versions. Since Python 3.11 is still supported for another <a href=\"https://endoflife.date/python\">3 years and 7 months</a> (as of this writing), it won&rsquo;t hurt to wait a few weeks or months and revisit these changes.</p>\n<p>If you are curious about how I decide when to adopt a new version, I wrote about that last month: <a href=\"https://micro.webology.dev/2024/02/01/choosing-the-right.html\">Choosing the Right Python and Django Versions for Your Projects</a></p>\n",
				"content_text": "Recently, I have been slowly moving several of my side projects and client projects from various Python versions to Python 3.12. \n\nI never see people write about this, so it might be nice to write and share some notes.\n\n## Where to start\n\nThe first thing we do with a relatively simple upgrade is figure out what Python version we use. Thankfully, the project we picked mentioned in the README.md that it was using Python 3.11. \n\nOnce we know which version of Python we are using, we can open up iTerm and get a git checkout of the project. \n\nNext, we will run `git grep 11`, where \"11\" is the shortened form of the Python version that we are running. There are so many variations of `3.11` and `311` that using the minor version tends to be about right. \n\n```bash\n$ git grep 11\n... really long list...\n.github/workflows/actions.yml:      - name: Set up Python 3.11\n.github/workflows/actions.yml:          python-version: '3.11'\n.github/workflows/actions.yml:      - name: Set up Python 3.11\n.github/workflows/actions.yml:          python-version: '3.11'\n.pre-commit-config.yaml:  python: python311\n.pre-commit-config.yaml:        args: [--py311-plus]\nREADME.md:This project will use Python 3.11, Docker, and Docker Compose.\nREADME.md:Make a Python 3.11.x virtualenv.\ndocker/Dockerfile:FROM python:3.11-slim as builder-py\ndocker/Dockerfile:FROM python:3.11-slim AS release\npyproject.toml:requires-python = \">= 3.11\"\npyproject.toml:# Assume Python >=3.11.\npyproject.toml:target-version = \"py311\"\nrequirements.txt:# This file is autogenerated by pip-compile with Python 3.11\n... lots and lots of files...\n```\n\nThis output will give us a long list of files. Usually, this is 100s or 1000s of files we will pipe or copy into our code editor. We will make a few passes to remove all of the CSS, SVG, and HTML files in the list, and that pairs down the results to half a dozen or a dozen files. \n\n## Create a new git branch\n\nNext, we will create a new git branch called `upgrade-to-python-3.12`, and we will open each file one by one, and replace every \"3.11\" and \"311\" reference with \"3.12\" and \"312\" respectively.\n\n## Lint/format our code base\n\nOnce we have all of our files updated, we will commit everything. Then we will note special files like `.pre-commit-config.yaml` and `pyproject.toml`, impacting how my Python files are linted and formatted. Then, we will run `pre-commit` immediately after and commit any formatting changes.\n\n## Rebuild our Docker image\n\nSince this project contains `docker/Dockerfile` that tells us the project uses Docker, we will need to rebuild our container image and note anything that breaks. \n\n## Re-pin/freeze our Python dependencies\n\nNext, we will run `pip-tools` `compile` from within our newly rebuilt Docker container to build a new `requirements.txt` using Python 3.12. \n\n## Re-rebuild our Docker image (again)\n\n**\"Insert Xzibit Yo Dawg meme.\"** Next, we rebuild our Docker image using the newly pinned `requirements.txt` file, and this should be our final image. \n\n## Did our tests pass? \n\nAssuming Docker builds cleanly, we will run my test suite using `pytest`. Once our tests pass, we'll commit any uncommitted changes, `git push` our branch to GitHub, and open a Pull Request for review. \n\n## Did our tests pass in CI? \n\nIf our tests pass on GitHub Actions in CI, then we know our upgrade was successful, and we are reasonably confident that \n\n## When things don't \"just work.\"\n\nIf you keep up with your upgrades, most of the time, everything works. Half a dozen projects did work for me, but I had one that did not work on Monday. There was a sub-dependency issue, so I closed my branch and opened a new issue to revisit this upgrade once the next version of Python 3.12.3 is released. \n\nEven though this wasn't a Python 3.12.2 bug, it takes the Python ecosystem time to catch up with newer versions. Since Python 3.11 is still supported for another [3 years and 7 months](https://endoflife.date/python) (as of this writing), it won't hurt to wait a few weeks or months and revisit these changes. \n\nIf you are curious about how I decide when to adopt a new version, I wrote about that last month: [Choosing the Right Python and Django Versions for Your Projects](https://micro.webology.dev/2024/02/01/choosing-the-right.html)\n",
				"date_published": "2024-03-05T10:15:40-05:00",
				"url": "https://micro.webology.dev/2024/03/04/updating-python-from.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/04/pip-isolation.html",
				"title": "On pip isolation",
				"content_html": "<p>I saw this <a href=\"https://mastodon.social/@treyhunner/112032637878747686\">post</a> by <a href=\"https://mastodon.social/@treyhunner\">Trey Hunner</a> about pip isolation, and I wanted to share a third method.</p>\n<blockquote>\n<p>I&rsquo;ve just updated my ~/.config/pip/pip.conf &amp; my dotfiles repo to disallow pip installing outside virtual environments! üéâ</p>\n<p>TIL 2 things about #Python&rsquo;s pip:</p>\n<ol>\n<li>\n<p>pip has a config file. If I ever knew this, I&rsquo;d forgotten.</p>\n</li>\n<li>\n<p>pip has an option that stops it from working outside of a virtual environment!</p>\n</li>\n</ol>\n<p><a href=\"https://mastodon.social/@treyhunner/112032637878747686\">https://mastodon.social/@treyhunner/112032637878747686</a></p>\n</blockquote>\n<p>To Trey&rsquo;s point, I never pip to install to easily install anything globally. If I want something installed globally, I can jump through a few hoops to avoid polluting my global pip cache.</p>\n<p>My preferred way of disallowing pip installation outside virtual environments is to use the <code>PIP_REQUIRE_VIRTUALENV</code> environment variable.</p>\n<p>I have <code>export PIP_REQUIRE_VIRTUALENV=true</code> set in my <code>.bash_profile</code>, which is part of my <a href=\"https://github.com/jefftriplett/dotfiles\"><code>dotfiles</code></a>. I prefer the ENV approach because I share my files over many computers, and it&rsquo;s one less file to keep up with.</p>\n<p>When I want to <code>pip install</code> something globally, I use <a href=\"https://pipx.pypa.io/stable/\"><code>pipx</code></a>, which installs each Python application into its isolated environment.</p>\n<p>For the few times that I do need to install a Python application globally, I use:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">PIP_REQUIRE_VIRTUALENV<span style=\"color:#f92672\">=</span>false python -m pip install <span style=\"color:#ae81ff\">\\\n</span><span style=\"color:#ae81ff\"></span>    --upgrade <span style=\"color:#ae81ff\">\\\n</span><span style=\"color:#ae81ff\"></span>    pip <span style=\"color:#ae81ff\">\\\n</span><span style=\"color:#ae81ff\"></span>    pipx\n</code></pre></div><p>I have this recipe baked into my <a href=\"https://github.com/jefftriplett/dotfiles/blob/f59e2884daace42be404c1f028ea7312fed0bab2/home/justfile#L159-L168\">global justfile</a> so I can quickly apply upgrades.</p>\n",
				"content_text": "I saw this [post](https://mastodon.social/@treyhunner/112032637878747686) by [Trey Hunner](https://mastodon.social/@treyhunner) about pip isolation, and I wanted to share a third method. \n\n> I've just updated my ~/.config/pip/pip.conf & my dotfiles repo to disallow pip installing outside virtual environments! üéâ\n> \n> TIL 2 things about #Python's pip:\n>\n> 1. pip has a config file. If I ever knew this, I'd forgotten.\n>\n> 2. pip has an option that stops it from working outside of a virtual environment!\n>\n> https://mastodon.social/@treyhunner/112032637878747686\n\n\nTo Trey's point, I never pip to install to easily install anything globally. If I want something installed globally, I can jump through a few hoops to avoid polluting my global pip cache. \n\nMy preferred way of disallowing pip installation outside virtual environments is to use the `PIP_REQUIRE_VIRTUALENV` environment variable. \n\nI have `export PIP_REQUIRE_VIRTUALENV=true` set in my `.bash_profile`, which is part of my [`dotfiles`](https://github.com/jefftriplett/dotfiles). I prefer the ENV approach because I share my files over many computers, and it's one less file to keep up with. \n\nWhen I want to `pip install` something globally, I use [`pipx`](https://pipx.pypa.io/stable/), which installs each Python application into its isolated environment. \n\nFor the few times that I do need to install a Python application globally, I use: \n\n```shell\nPIP_REQUIRE_VIRTUALENV=false python -m pip install \\\n    --upgrade \\\n    pip \\\n    pipx\n```\n\nI have this recipe baked into my [global justfile](https://github.com/jefftriplett/dotfiles/blob/f59e2884daace42be404c1f028ea7312fed0bab2/home/justfile#L159-L168) so I can quickly apply upgrades. \n",
				"date_published": "2024-03-04T09:50:39-05:00",
				"url": "https://micro.webology.dev/2024/03/04/pip-isolation.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/03/the-weekend-woodworker.html",
				"title": "The Weekend Woodworker",
				"content_html": "<p>ü™ö It&rsquo;s that time of year when I dust off my copy of &ldquo;Equip Your Woodworking Shop For Less Than $1000&rdquo; by Steve Ramsey, <a href=\"https://theweekendwoodworker.com\">The Weekend Woodworker</a>, appreciate all ten of my fingers, and print a fresh copy.</p>\n<p>One set of my grandparents lived next door to me when I was a kid, and they had a fantastic wood shop. Everything is quick work when you have the right tool.</p>\n<p>When starting from scratch, every project feels like it should be easy until you hit a wall of existential dread because you don&rsquo;t have the right power tool, saw blade, or shop essential to complete it.</p>\n<p>Steve&rsquo;s guide is approachable, and I already have a few recommended tools, which takes the edge off. I need a good miter saw and, eventually, a table saw, for which Steve provides recommendations and links.</p>\n<p>So here goes nothing. I just ordered my first compound miter saw and combination square. This is the one time I am okay with someone making an Amazon affiliate sale off of my clicking a link.</p>\n",
				"content_text": "ü™ö It's that time of year when I dust off my copy of \"Equip Your Woodworking Shop For Less Than $1000\" by Steve Ramsey, [The Weekend Woodworker](https://theweekendwoodworker.com), appreciate all ten of my fingers, and print a fresh copy.\r\n\r\nOne set of my grandparents lived next door to me when I was a kid, and they had a fantastic wood shop. Everything is quick work when you have the right tool. \r\n\r\nWhen starting from scratch, every project feels like it should be easy until you hit a wall of existential dread because you don't have the right power tool, saw blade, or shop essential to complete it. \r\n\r\nSteve's guide is approachable, and I already have a few recommended tools, which takes the edge off. I need a good miter saw and, eventually, a table saw, for which Steve provides recommendations and links. \r\n\r\nSo here goes nothing. I just ordered my first compound miter saw and combination square. This is the one time I am okay with someone making an Amazon affiliate sale off of my clicking a link. \n",
				"date_published": "2024-03-03T14:39:03-05:00",
				"url": "https://micro.webology.dev/2024/03/03/the-weekend-woodworker.html"
			},
			{
				"id": "http://webology.micro.blog/2024/03/02/new-djangostartproject-update.html",
				"title": "New `django-startproject` update",
				"content_html": "<p>I updated my <a href=\"https://github.com/jefftriplett/django-startproject\"><code>django-startproject</code></a> project today to support the latest versions of Django, Python, Compose, and other tools I&rsquo;m a fan of. I use <code>django-startproject</code> to spin up projects that need some batteries quickly, but not every battery.</p>\n<p>Features:</p>\n<ul>\n<li>Django 5.0</li>\n<li>Python 3.12</li>\n<li>Docker Compose 3</li>\n<li>Adds <a href=\"https://github.com/casey/just\">casey/just</a> recipes/workflows (Just is a command runner, not a build tool)</li>\n<li>Adds <a href=\"https://github.com/astral-sh/uv\">uv</a> support</li>\n</ul>\n<p><code>uv</code> is the newest addition, which is a Python package installer and <a href=\"https://github.com/jazzband/pip-tools/\">pip-tools</a> replacement. It&rsquo;s not a 100% drop-in replacement for pip and pip-tools, but it cuts my build times in half, and I have yet to hit any significant show-stoppers.</p>\n",
				"content_text": "I updated my [`django-startproject`](https://github.com/jefftriplett/django-startproject) project today to support the latest versions of Django, Python, Compose, and other tools I'm a fan of. I use `django-startproject` to spin up projects that need some batteries quickly, but not every battery. \n\nFeatures: \n- Django 5.0\n- Python 3.12\n- Docker Compose 3\n- Adds [casey/just](https://github.com/casey/just) recipes/workflows (Just is a command runner, not a build tool)\n- Adds [uv](https://github.com/astral-sh/uv) support \n\n`uv` is the newest addition, which is a Python package installer and [pip-tools](https://github.com/jazzband/pip-tools/) replacement. It's not a 100% drop-in replacement for pip and pip-tools, but it cuts my build times in half, and I have yet to hit any significant show-stoppers. \n",
				"date_published": "2024-03-02T23:27:42-05:00",
				"url": "https://micro.webology.dev/2024/03/02/new-djangostartproject-update.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/01/spaceman-i-am.html",
				
				"content_html": "<p>üì∫ Spaceman - I am walking into this with ZERO expectations, and yet my gut is telling me that even that might be too high. üòÑ</p>\n<p><a href=\"https://trakt.tv/movies/spaceman-2024\">trakt.tv/movies/sp&hellip;</a></p>\n",
				"content_text": "üì∫ Spaceman - I am walking into this with ZERO expectations, and yet my gut is telling me that even that might be too high. üòÑ\n\n[trakt.tv/movies/sp...](https://trakt.tv/movies/spaceman-2024) \n",
				"date_published": "2024-03-01T21:28:10-05:00",
				"url": "https://micro.webology.dev/2024/03/01/spaceman-i-am.html",
				"tags": ["Movies"]
			},
			{
				"id": "http://webology.micro.blog/2024/03/01/we-did-it.html",
				"title": "We did it, and what's next",
				"content_html": "<p>My February goal was to publish an article every day for the entire month, and I&rsquo;m happy to have completed it.</p>\n<p>Shout out to the wonderful <a href=\"https://wiggle.work\">Wiggle Work</a> community who started this Winter Writing Workshop. As someone who prides themself on never succumbing to peer pressure, the joke is on me! I finished and only used my <strong>phone a friend</strong> lifeline once.</p>\n<p>Shoutout to my Wiggle Work friends, and thank you to everyone who joined this month and everyone who cheered us on from the Discord. Your emojis of support were the true friends we made along the way.</p>\n<p>The other four who finished:</p>\n<ul>\n<li><a href=\"https://www.breakfastletters.com/archives\">Joni</a></li>\n<li><a href=\"https://garden.mattstein.com/notes\">Matt</a></li>\n<li><a href=\"https://nicksimson.com/posts/\">Nick</a></li>\n<li><a href=\"https://www.sarahgebauer.com/post/\">Sarah</a></li>\n</ul>\n<h2 id=\"writing-tools\">Writing tools</h2>\n<p>Every year, I put &ldquo;write more&rdquo; on my list of goals, and every year, I look back and realize some invisible barrier gets in my way. I get easily frustrated with every writing tool I have ever used, and my brain obsesses over the platform&rsquo;s limitations.</p>\n<p>I had a little bit of new writing tool productivity with both <a href=\"https://obsidian.md\">Obsidian</a> and <a href=\"https://micro.blog\">Micro.blog</a> which were both invaluable to me.</p>\n<p>Writing every day in February instilled in me that Obsidian is the best writing platform for me. I even paid for a <a href=\"https://help.obsidian.md/Licenses+and+payment/Catalyst+license\">Catalyst license</a> to support Obsidian&rsquo;s development.</p>\n<p><a href=\"https://micro.blog\">Micro.blog</a> also made it easy to post every day, and I suspect it will shape and heavily influence my blog platform going forward. I&rsquo;m still annoyed that I can&rsquo;t upload images or edit my social media posts with it, but once I understood the service&rsquo;s limitations, it never got in my way.</p>\n<h2 id=\"going-forward\">Going forward</h2>\n<p>My existing blog uses GitHub Pages and Jekyll, but I&rsquo;m ready to return to Django with a basic REST API for posting new blog posts and links.</p>\n<p>My existing blog is built with Frontmatter, Markdown, and Yaml, which makes importing and editing everything doable with Python and a text editor.</p>\n<p>I plan to use a mix of Obsidian with a custom Python script that can publish and sync to my website until I find a nice JS writing interface that I like.</p>\n<p>Now that Obsidian supports <a href=\"https://help.obsidian.md/Editing+and+formatting/Properties\">Properties</a> via Frontmatter, I can store my Post metadata between my text files and my blog to sync between the two.</p>\n<p>I also want a slick <a href=\"https://typefully.com\">Typefully</a>-like experience for quick posts. Just one big markdown-friendly writing area that can handle dragging and dropping images to it. I want to pick where I am publishing when I choose to publish.</p>\n<p>That&rsquo;s where I plan to go next.</p>\n",
				"content_text": "My February goal was to publish an article every day for the entire month, and I'm happy to have completed it. \r\n\r\nShout out to the wonderful [Wiggle Work](https://wiggle.work) community who started this Winter Writing Workshop. As someone who prides themself on never succumbing to peer pressure, the joke is on me! I finished and only used my **phone a friend** lifeline once. \r\n\r\nShoutout to my Wiggle Work friends, and thank you to everyone who joined this month and everyone who cheered us on from the Discord. Your emojis of support were the true friends we made along the way. \r\n\r\nThe other four who finished: \r\n\r\n- [Joni](https://www.breakfastletters.com/archives)\r\n- [Matt](https://garden.mattstein.com/notes)\r\n- [Nick](https://nicksimson.com/posts/)\r\n- [Sarah](https://www.sarahgebauer.com/post/)\r\n\r\n## Writing tools\r\n\r\nEvery year, I put \"write more\" on my list of goals, and every year, I look back and realize some invisible barrier gets in my way. I get easily frustrated with every writing tool I have ever used, and my brain obsesses over the platform's limitations. \r\n\r\nI had a little bit of new writing tool productivity with both [Obsidian](https://obsidian.md) and [Micro.blog](https://micro.blog) which were both invaluable to me. \r\n\r\nWriting every day in February instilled in me that Obsidian is the best writing platform for me. I even paid for a [Catalyst license](https://help.obsidian.md/Licenses+and+payment/Catalyst+license) to support Obsidian's development. \r\n\r\n[Micro.blog](https://micro.blog) also made it easy to post every day, and I suspect it will shape and heavily influence my blog platform going forward. I'm still annoyed that I can't upload images or edit my social media posts with it, but once I understood the service's limitations, it never got in my way. \r\n\r\n## Going forward\r\n\r\nMy existing blog uses GitHub Pages and Jekyll, but I'm ready to return to Django with a basic REST API for posting new blog posts and links. \r\n\r\nMy existing blog is built with Frontmatter, Markdown, and Yaml, which makes importing and editing everything doable with Python and a text editor. \r\n\r\nI plan to use a mix of Obsidian with a custom Python script that can publish and sync to my website until I find a nice JS writing interface that I like. \r\n\r\nNow that Obsidian supports [Properties](https://help.obsidian.md/Editing+and+formatting/Properties) via Frontmatter, I can store my Post metadata between my text files and my blog to sync between the two. \r\n\r\nI also want a slick [Typefully](https://typefully.com)-like experience for quick posts. Just one big markdown-friendly writing area that can handle dragging and dropping images to it. I want to pick where I am publishing when I choose to publish. \r\n\r\nThat's where I plan to go next. \n",
				"date_published": "2024-03-01T21:07:26-05:00",
				"url": "https://micro.webology.dev/2024/03/01/we-did-it.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/29/pythons-uv-tool.html",
				"title": "Python's UV tool is actually pretty good",
				"content_html": "<p>I carved out some time recently to start playing with the new Python package installer and resolver, <a href=\"https://github.com/astral-sh/uv\"><code>uv</code></a>.</p>\n<p><code>uv</code> makes big promises and claims to be 10-100x faster than pip and pip-tools. From my experiments over the last few weeks, it lives up to this promise.</p>\n<p>I&rsquo;m using it locally for my virtual environments, in my Dockerfiles to rebuild my containers, and for CI using GitHub Actions. Across the board, anything I do with <code>pip</code> or <code>pip-tools</code> is remarkably faster.</p>\n<p>My average GitHub Actions CI workflows dropped from ~2 minutes to 50 seconds. This cuts the minutes I use in half and, in theory, my monthly bill in half.</p>\n<p>My goal in sharing my configs is more &ldquo;show&rdquo; than &ldquo;tell' because I will copy and paste these for weeks and months to come.</p>\n<h2 id=\"local-development\">local development</h2>\n<p>Every one of my projects has a <code>justfile</code> (it&rsquo;s like Make but works the same everywhere) with &ldquo;bootstrap&rdquo; and &ldquo;lock&rdquo; recipes. My &ldquo;bootstrap&rdquo; recipe installs everything I need to work with the project locally. I use my &ldquo;lock&rdquo; recipe to lock my requirements.txt file so that I&rsquo;m using the exact requirements locally and in production.</p>\n<h3 id=\"justfile-before\"><code>justfile</code> before</h3>\n<p>My <code>justfile</code> might look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">@<span style=\"color:#ae81ff\">bootstrap</span>\n    <span style=\"color:#ae81ff\">python -m pip install --upgrade pip</span>\n    <span style=\"color:#ae81ff\">python -m pip install --upgrade --requirement requirements.in</span>\n    \n<span style=\"color:#f92672\">@lock *ARGS</span>:\n    <span style=\"color:#ae81ff\">python -m piptools compile {{ ARGS }} ./requirements.in \\</span>\n        --<span style=\"color:#ae81ff\">resolver=backtracking \\</span>\n        --<span style=\"color:#ae81ff\">output-file ./requirements.txt</span>\n</code></pre></div><h3 id=\"justfile-after\"><code>justfile</code> after</h3>\n<p>For the most part, <code>uv</code> shares most of the same syntax as <code>pip</code> so you can start  by changing your <code>pip</code> references to <code>uv pip</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">@<span style=\"color:#ae81ff\">bootstrap</span>\n    <span style=\"color:#ae81ff\">python -m pip install --upgrade pip uv</span>\n    <span style=\"color:#ae81ff\">python -m uv pip install --upgrade --requirement requirements.in</span>\n    \n<span style=\"color:#f92672\">@lock *ARGS</span>:\n    <span style=\"color:#ae81ff\">python -m uv pip compile {{ ARGS }} ./requirements.in \\</span>\n        --<span style=\"color:#ae81ff\">resolver=backtracking \\</span>\n        --<span style=\"color:#ae81ff\">output-file ./requirements.txt</span>\n</code></pre></div><h2 id=\"dockerfiles\">Dockerfiles</h2>\n<p>Everyone&rsquo;s container setup is going to be different, but I use <a href=\"https://www.docker.com\">Docker</a> and <a href=\"https://orbstack.dev\">Orbstack</a>, which use a Dockerfile.</p>\n<h2 id=\"dockerfile-before\"><code>Dockerfile</code> before</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-Dockerfile\" data-lang=\"Dockerfile\"><span style=\"color:#66d9ef\">FROM</span><span style=\"color:#e6db74\"> python:3.12-slim-bookworm</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PIP_DISABLE_PIP_VERSION_CHECK <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONDONTWRITEBYTECODE <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONPATH /srv<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONUNBUFFERED <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> apt-get update<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> pip install --upgrade pip<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">COPY</span> requirements.txt /src/requirements.txt<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> pip install --requirement /src/requirements.txt<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">WORKDIR</span><span style=\"color:#e6db74\"> /src/</span><span style=\"color:#960050;background-color:#1e0010\">\n</span></code></pre></div><h2 id=\"dockerfile-after\"><code>Dockerfile</code> after</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-Dockerfile\" data-lang=\"Dockerfile\"><span style=\"color:#66d9ef\">FROM</span><span style=\"color:#e6db74\"> python:3.12-slim-bookworm</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PATH /venv/bin:$PATH. <span style=\"color:#75715e\"># this is new</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PIP_DISABLE_PIP_VERSION_CHECK <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONDONTWRITEBYTECODE <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONPATH /srv<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENV</span> PYTHONUNBUFFERED <span style=\"color:#ae81ff\">1</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> apt-get update<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> pip install --upgrade pip uv  <span style=\"color:#75715e\"># this is updated</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> python -m uv venv /venv  <span style=\"color:#75715e\"># this is new</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">COPY</span> requirements.txt /src/requirements.txt<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">RUN</span> uv pip install --requirement /src/requirements.txt  <span style=\"color:#75715e\"># this is updated</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">WORKDIR</span><span style=\"color:#e6db74\"> /src/</span><span style=\"color:#960050;background-color:#1e0010\">\n</span></code></pre></div><h2 id=\"github-actions\">GitHub Actions</h2>\n<p>GitHub Actions are a little harder to explain, but my workflows started off similar to this before I made the switch to <code>uv</code>:</p>\n<h3 id=\"mainyml-before\"><code>main.yml</code> before</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Set up Python 3.12</span>\n    <span style=\"color:#f92672\">uses</span>: <span style=\"color:#ae81ff\">actions/setup-python@v5</span>\n    <span style=\"color:#f92672\">with</span>:\n      <span style=\"color:#f92672\">python-version</span>: <span style=\"color:#e6db74\">&#39;3.12&#39;</span>\n\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Install dependencies</span>\n    <span style=\"color:#f92672\">run</span>: |<span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">      </span>      <span style=\"color:#ae81ff\">python -m pip install --requirement requirements.in</span>\n\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Collect Static Assets</span>\n    <span style=\"color:#f92672\">run</span>: |<span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">      </span>      <span style=\"color:#ae81ff\">python -m manage collectstatic --noinput</span>\n</code></pre></div><h3 id=\"mainyml-after\"><code>main.yml</code> after</h3>\n<p>The biggest pain point that I ran into along the way was related to GitHub Issue <a href=\"https://github.com/astral-sh/uv/issues/1386\">#1386</a>, which has a useable workaround.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yaml\" data-lang=\"yaml\">\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Set up Python 3.12</span>\n    <span style=\"color:#f92672\">uses</span>: <span style=\"color:#ae81ff\">actions/setup-python@v5</span>\n    <span style=\"color:#f92672\">with</span>:\n      <span style=\"color:#f92672\">python-version</span>: <span style=\"color:#e6db74\">&#39;3.12&#39;</span>\n\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Install dependencies</span>\n    <span style=\"color:#f92672\">run</span>: |<span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">      python -m pip install uv\n</span><span style=\"color:#e6db74\">      python -m uv venv .venv\n</span><span style=\"color:#e6db74\">      echo &#34;VIRTUAL_ENV=.venv&#34; &gt;&gt; $GITHUB_ENV\n</span><span style=\"color:#e6db74\">      echo &#34;$PWD/.venv/bin&#34; &gt;&gt; $GITHUB_PATH\n</span><span style=\"color:#e6db74\">      python -m uv pip install --requirement requirements.in</span>      \n\n  - <span style=\"color:#f92672\">name</span>: <span style=\"color:#ae81ff\">Collect Static Assets</span>\n    <span style=\"color:#f92672\">run</span>: |<span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">      . .venv/bin/activate\n</span><span style=\"color:#e6db74\">      python -m manage collectstatic --noinput</span>      \n</code></pre></div><h2 id=\"conclusion\">Conclusion</h2>\n<p>I hope this was helpful to anyone who is considering making the switch to <code>uv</code>. I love to hear about how much time it saves you.</p>\n<h2 id=\"updates\">Updates</h2>\n<p>2024-03-08 - I modified the ENV PATH statement to prepend instead of replacing the value.</p>\n",
				"content_text": "I carved out some time recently to start playing with the new Python package installer and resolver, [`uv`](https://github.com/astral-sh/uv). \n\n`uv` makes big promises and claims to be 10-100x faster than pip and pip-tools. From my experiments over the last few weeks, it lives up to this promise. \n\nI'm using it locally for my virtual environments, in my Dockerfiles to rebuild my containers, and for CI using GitHub Actions. Across the board, anything I do with `pip` or `pip-tools` is remarkably faster. \n\nMy average GitHub Actions CI workflows dropped from ~2 minutes to 50 seconds. This cuts the minutes I use in half and, in theory, my monthly bill in half. \n\nMy goal in sharing my configs is more \"show\" than \"tell' because I will copy and paste these for weeks and months to come. \n\n## local development\n\nEvery one of my projects has a `justfile` (it's like Make but works the same everywhere) with \"bootstrap\" and \"lock\" recipes. My \"bootstrap\" recipe installs everything I need to work with the project locally. I use my \"lock\" recipe to lock my requirements.txt file so that I'm using the exact requirements locally and in production. \n\n### `justfile` before\n\nMy `justfile` might look like this:\n\n\n```yaml\n@bootstrap\n    python -m pip install --upgrade pip\n    python -m pip install --upgrade --requirement requirements.in\n    \n@lock *ARGS:\n    python -m piptools compile {{ ARGS }} ./requirements.in \\\n        --resolver=backtracking \\\n        --output-file ./requirements.txt\n```\n\n\n### `justfile` after \n\nFor the most part, `uv` shares most of the same syntax as `pip` so you can start  by changing your `pip` references to `uv pip`: \n\n\n```yaml\n@bootstrap\n    python -m pip install --upgrade pip uv\n    python -m uv pip install --upgrade --requirement requirements.in\n    \n@lock *ARGS:\n    python -m uv pip compile {{ ARGS }} ./requirements.in \\\n        --resolver=backtracking \\\n        --output-file ./requirements.txt\n```\n\n\n## Dockerfiles\n\nEveryone's container setup is going to be different, but I use [Docker](https://www.docker.com) and [Orbstack](https://orbstack.dev), which use a Dockerfile. \n\n## `Dockerfile` before\n\n```Dockerfile\nFROM python:3.12-slim-bookworm\n\nENV PIP_DISABLE_PIP_VERSION_CHECK 1\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONPATH /srv\nENV PYTHONUNBUFFERED 1\n\nRUN apt-get update\n\nRUN pip install --upgrade pip\n\nCOPY requirements.txt /src/requirements.txt\n\nRUN pip install --requirement /src/requirements.txt\n\nWORKDIR /src/\n```\n\n## `Dockerfile` after\n\n```Dockerfile\nFROM python:3.12-slim-bookworm\n\nENV PATH /venv/bin:$PATH. # this is new\nENV PIP_DISABLE_PIP_VERSION_CHECK 1\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONPATH /srv\nENV PYTHONUNBUFFERED 1\n\nRUN apt-get update\n\nRUN pip install --upgrade pip uv  # this is updated\n\nRUN python -m uv venv /venv  # this is new\n\nCOPY requirements.txt /src/requirements.txt\n\nRUN uv pip install --requirement /src/requirements.txt  # this is updated\n\nWORKDIR /src/\n```\n\n## GitHub Actions \n\nGitHub Actions are a little harder to explain, but my workflows started off similar to this before I made the switch to `uv`:\n\n### `main.yml` before \n\n```yaml\n\n  - name: Set up Python 3.12\n    uses: actions/setup-python@v5\n    with:\n      python-version: '3.12'\n\n  - name: Install dependencies\n    run: |\n      python -m pip install --requirement requirements.in\n\n  - name: Collect Static Assets\n    run: |\n      python -m manage collectstatic --noinput\n```\n\n### `main.yml` after\n\nThe biggest pain point that I ran into along the way was related to GitHub Issue [#1386](https://github.com/astral-sh/uv/issues/1386), which has a useable workaround. \n\n```yaml\n\n  - name: Set up Python 3.12\n    uses: actions/setup-python@v5\n    with:\n      python-version: '3.12'\n\n  - name: Install dependencies\n    run: |\n      python -m pip install uv\n      python -m uv venv .venv\n      echo \"VIRTUAL_ENV=.venv\" >> $GITHUB_ENV\n      echo \"$PWD/.venv/bin\" >> $GITHUB_PATH\n      python -m uv pip install --requirement requirements.in\n\n  - name: Collect Static Assets\n    run: |\n      . .venv/bin/activate\n      python -m manage collectstatic --noinput\n```\n\n## Conclusion\n\nI hope this was helpful to anyone who is considering making the switch to `uv`. I love to hear about how much time it saves you. \n\n## Updates\n\n2024-03-08 - I modified the ENV PATH statement to prepend instead of replacing the value. \n",
				"date_published": "2024-02-29T14:31:04-05:00",
				"url": "https://micro.webology.dev/2024/02/29/pythons-uv-tool.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/28/the-definition-of.html",
				"title": "The definition of digital chaos",
				"content_html": "<p>A few months ago, PayPal reached out to me via my backup email address to let me know that my primary email address no longer worked.</p>\n<p>I knew fixing this would be painful, so I wrote down the steps as I walked through it.</p>\n<h2 id=\"checks-fastmail\">Checks Fastmail</h2>\n<ul>\n<li>Logs in via 1Password</li>\n<li>Uses YubiKey</li>\n</ul>\n<h2 id=\"checks-cloudflare\">Checks Cloudflare</h2>\n<ul>\n<li>Logs in via 1Password</li>\n<li>Uses Auth app</li>\n<li>After logging in, I realized my domain was not hosted here.</li>\n</ul>\n<h2 id=\"checks-dynadot\">Checks Dynadot</h2>\n<ul>\n<li>Logs in via 1Password</li>\n<li>Uses Auth app</li>\n<li>After logging in and checking my DNS settings, I realized my DNS was hosted with AWS.</li>\n</ul>\n<h2 id=\"checks-aws\">Checks AWS</h2>\n<ul>\n<li>Logs in via 1Password (fails three times for Amazon security reasons)</li>\n<li>Uses Auth app because YubiKey fails</li>\n<li>Everything seems normal</li>\n</ul>\n<h2 id=\"back-to-gmail\">Back to Gmail</h2>\n<ul>\n<li>Sends a few test emails from Gmail</li>\n</ul>\n<h2 id=\"back-to-fastmail\">Back to Fastmail</h2>\n<p>After poking around, I noticed that Fastmail dropped my alias for &ldquo;I can&rsquo;t find with search reasons.&rdquo;</p>\n<p>I re-added my alias and double check that <code>*@domain.com</code> was still set to forward email.</p>\n<p>I send a few more test emails, get a few failures, and I notice it&rsquo;s back up and working again.</p>\n<h2 id=\"back-to-paypal\">Back to PayPal</h2>\n<ul>\n<li>I return to PayPal to re-add my email address, which triggers another test SMS/email.</li>\n<li>I pull the code and re-enter into PayPal to verify my email address works again.</li>\n</ul>\n<h2 id=\"fastmail-support\">Fastmail support</h2>\n<ul>\n<li>I contacted Fastmail&rsquo;s support, who told me this email address had never existed in their system. I have used it every month, dating back over 14 years, and it has existed since the late 90s.</li>\n<li>I re-create the email address.</li>\n</ul>\n<h2 id=\"back-to-gmail-1\">Back to Gmail</h2>\n<ul>\n<li>I tested sending an email from Gmail again, and it works.</li>\n</ul>\n<h2 id=\"back-to-paypal-1\">Back to PayPal</h2>\n<ul>\n<li>I re-try the email address from PayPal, and it works again.</li>\n</ul>\n<h2 id=\"back-to-fastmail-1\">Back to Fastmail</h2>\n<ul>\n<li>I re-tested from Fastmail, and now everything is working again.</li>\n</ul>\n<h2 id=\"fin\">Fin</h2>\n<p>This should have ended with me throwing everything away and quitting the Internet, but here we are months later.</p>\n<p>Instead, I have consolidated more of my DNS and domain services so that everything is easier to find and manage, but what a mess.</p>\n<p>I lost a ton of faith in Fastmail, but I also needed more patience to push back on support to understand how and why my email forwarders and backup catchall were deleted.</p>\n",
				"content_text": "A few months ago, PayPal reached out to me via my backup email address to let me know that my primary email address no longer worked. \r\n\r\nI knew fixing this would be painful, so I wrote down the steps as I walked through it. \r\n\r\n## Checks Fastmail\r\n\r\n- Logs in via 1Password\r\n- Uses YubiKey\r\n\r\n## Checks Cloudflare\r\n\r\n- Logs in via 1Password\r\n- Uses Auth app\r\n- After logging in, I realized my domain was not hosted here.\r\n\r\n## Checks Dynadot\r\n\r\n- Logs in via 1Password\r\n- Uses Auth app\r\n- After logging in and checking my DNS settings, I realized my DNS was hosted with AWS.\r\n\r\n## Checks AWS\r\n\r\n- Logs in via 1Password (fails three times for Amazon security reasons)\r\n- Uses Auth app because YubiKey fails\r\n- Everything seems normal\r\n\r\n## Back to Gmail\r\n\r\n- Sends a few test emails from Gmail\r\n\r\n## Back to Fastmail \r\n\r\nAfter poking around, I noticed that Fastmail dropped my alias for \"I can't find with search reasons.\"\r\n\r\nI re-added my alias and double check that `*@domain.com` was still set to forward email. \r\n\r\nI send a few more test emails, get a few failures, and I notice it's back up and working again. \r\n\r\n## Back to PayPal\r\n\r\n- I return to PayPal to re-add my email address, which triggers another test SMS/email. \r\n- I pull the code and re-enter into PayPal to verify my email address works again. \r\n\r\n## Fastmail support\r\n\r\n- I contacted Fastmail's support, who told me this email address had never existed in their system. I have used it every month, dating back over 14 years, and it has existed since the late 90s. \r\n- I re-create the email address.\r\n\r\n## Back to Gmail \r\n\r\n- I tested sending an email from Gmail again, and it works.\r\n\r\n## Back to PayPal\r\n\r\n- I re-try the email address from PayPal, and it works again.\r\n\r\n## Back to Fastmail \r\n\r\n- I re-tested from Fastmail, and now everything is working again.\r\n\r\n## Fin\r\n\r\nThis should have ended with me throwing everything away and quitting the Internet, but here we are months later. \r\n\r\nInstead, I have consolidated more of my DNS and domain services so that everything is easier to find and manage, but what a mess. \r\n\r\nI lost a ton of faith in Fastmail, but I also needed more patience to push back on support to understand how and why my email forwarders and backup catchall were deleted. \n",
				"date_published": "2024-02-28T16:35:54-05:00",
				"url": "https://micro.webology.dev/2024/02/28/the-definition-of.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/27/using-django-q.html",
				"title": "Using Django Q2",
				"content_html": "<p>I&rsquo;m long overdue to write about how <a href=\"https://github.com/django-q2/django-q2\">Django Q2</a> has become part of my development toolkit. As the maintained successor to <a href=\"https://github.com/Koed00/django-q\">Django Q</a>, Django Q2 extends Django to handle background tasks and scheduled jobs.</p>\n<p>Django Q2 is flexible in managing tasks, whether sending out daily emails or performing hourly tasks like checking RSS feeds. The project works seamlessly with Django, making it one of the more straightforward background task solutions to integrate into your projects.</p>\n<p>Using Django Q2 involves passing a method or a string reference to a method to an <a href=\"https://django-q2.readthedocs.io/en/master/tasks.html#async-task\"><code>async_task()</code></a> function, which will run in the background.</p>\n<p>One feature of Django Q2 that particularly impresses me is its adaptability to various databases. Whether your project uses the default Django database or something more scalable like Redis, Django Q2 fits perfectly. This flexibility means that a database queue suffices without any hiccups for most of my projects, even those that are small to medium.</p>\n<p>Unlike other task queues that require managing multiple processes or services, Django Q2 keeps it simple. The only necessity is to have the <code>qcluster</code> management command running, which is a breeze compared to other task queues because you only need to run one service to handle everything.</p>\n<p>Django Q2&rsquo;s flexibility, ease of use, and seamless integration with Django make it an excellent tool to reach for when you need background tasks.</p>\n",
				"content_text": "I'm long overdue to write about how [Django Q2](https://github.com/django-q2/django-q2) has become part of my development toolkit. As the maintained successor to [Django Q](https://github.com/Koed00/django-q), Django Q2 extends Django to handle background tasks and scheduled jobs. \n\nDjango Q2 is flexible in managing tasks, whether sending out daily emails or performing hourly tasks like checking RSS feeds. The project works seamlessly with Django, making it one of the more straightforward background task solutions to integrate into your projects. \n\nUsing Django Q2 involves passing a method or a string reference to a method to an [`async_task()`](https://django-q2.readthedocs.io/en/master/tasks.html#async-task) function, which will run in the background. \n\nOne feature of Django Q2 that particularly impresses me is its adaptability to various databases. Whether your project uses the default Django database or something more scalable like Redis, Django Q2 fits perfectly. This flexibility means that a database queue suffices without any hiccups for most of my projects, even those that are small to medium.\n\nUnlike other task queues that require managing multiple processes or services, Django Q2 keeps it simple. The only necessity is to have the `qcluster` management command running, which is a breeze compared to other task queues because you only need to run one service to handle everything. \n\nDjango Q2's flexibility, ease of use, and seamless integration with Django make it an excellent tool to reach for when you need background tasks. \n",
				"date_published": "2024-02-27T23:23:33-05:00",
				"url": "https://micro.webology.dev/2024/02/27/using-django-q.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/26/things-i-do.html",
				"title": "Things I do every time I start a Django project",
				"content_html": "<p>In the spirit of Brenton Cleeland&rsquo;s <a href=\"https://brntn.me/blog/six-things-i-do-every-time-i-start-a-django-project/\">Six things I do every time I start a Django project</a>, my goal is to document and share my process since this often comes up.</p>\n<p>Like Brenton, I have a lot of projects, and their scope may range from quick one-offs that might last a few hours to projects I have worked on for a decade or more.</p>\n<h2 id=\"overview-and-upfront-notes\">Overview and upfront notes</h2>\n<p>I use <a href=\"https://github.com/pyenv/pyenv\">pyenv</a> to manage my Python versions, but I don&rsquo;t go into any details here.</p>\n<p>I use <a href=\"https://github.com/pyenv/pyenv-virtualenvwrapper\">pyenv-virtualenvwrapper</a> to manage what Python calls a &ldquo;virtual environment,&rdquo; which copies and symlinks files and folders where they need to be so that your Python projects are isolated from one another.</p>\n<p><code>pyenv-virtualenvwrapper</code> is also a <code>pyenv</code>-friendly fork of <a href=\"https://github.com/python-virtualenvwrapper/virtualenvwrapper\">virtualenvwrapper</a>.</p>\n<p><strong>Please note:</strong> To avoid even more confusion, please assume that at any time in this article, when I mention <code>virtualenvwrapper</code> or its various commands, I mean the <code>pyenv-virtualenvwrapper</code> version of these tools.</p>\n<p>For more detail, see my article <a href=\"https://micro.webology.dev/2024/02/10/python-development-on.html\">Python Development on macOS Notes: pyenv and pyenv-virtualenvwrapper</a>.</p>\n<h2 id=\"creating-a-new-project\">Creating a new project</h2>\n<p>First, I need a folder to store all my project files. One nice feature of <code>virtualenvwrapper</code> is it can manage both my virtualenvs and where my projects live.</p>\n<p>So my first step for a new project is to run <code>mkvirtualenv {project_name}</code>, where <code>project_name</code> is the name of the domain name or client that I&rsquo;m working with. <code>mkvirtualenv</code> will then create a new virtual environment (<code>virtualenv</code> or <code>venv</code> is fine too) for me, make a new project folder for me to put my files into, and then transport me to this new project folder.</p>\n<p><code>virtualenvwrapper</code> also supports custom hooks, which is a fancy way of saying it runs a series of commands I tell it I want to run after it creates a <code>virtualenv</code>. These are a few of the custom steps that I run for my projects:</p>\n<ul>\n<li>Create a <a href=\"https://www.sublimetext.com/blog/articles/sublime-text-4\">Sublime Text</a> project file so <a href=\"https://www.alfredapp.com/\">Alfred</a> can detect it.</li>\n<li>Create a <a href=\"https://www.sublimetext.com/blog/articles/sublime-text-4\">Sublime Text</a> <code>pyrightconfig.json</code> file, which enables LSP support for the project so that my code autocompletion works.</li>\n<li>Create a <a href=\"https://syncthing.net\">Syncthing</a> <code>.stignore</code>  file.</li>\n<li>Create a <a href=\"https://direnv.net\">direnv</a> <code>.envrc</code> file that loads my project&rsquo;s environment variables.</li>\n<li>Transports me into my projects folder.</li>\n<li>Activate the new <code>virtualenv</code>, so Python is ready.</li>\n<li>Install the latest version of <code>pip</code>, Python&rsquo;s package manager.</li>\n<li>Install the latest version of <a href=\"https://github.com/jazzband/pip-tools/\">pip-tools</a>, which I like to use for managing my project Python requirements.</li>\n<li><strong>Soon:</strong> Install the latest version of <a href=\"https://github.com/astral-sh/uv\">uv</a>, which will soon replace pip-tools for me.</li>\n</ul>\n<p>Even though most of my projects use Docker Compose, I still install my Python dependencies outside of Docker in the virtual environment so that my text editors and <a href=\"https://github.com/microsoft/pyright\">pyright</a> can read them.</p>\n<h2 id=\"create-my-django-app\">Create my Django app</h2>\n<p>Once I have a project folder and <code>virtualenv</code> set up, I must create a Django project.\nI use either my <a href=\"https://github.com/jefftriplett/django-startproject\">django-startproject</a> or <a href=\"https://revsys.com\">REVSYS</a>&rsquo;s Django starter template, which we call AlphaKit.\nBoth projects aim to start jumpstart development and spend zero time configuring projects.\nSince my stater project is public, I will run this snippet to jumpstart it.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">django-admin startproject <span style=\"color:#ae81ff\">\\\n</span><span style=\"color:#ae81ff\"></span>    --extension<span style=\"color:#f92672\">=</span>ini,py,yml <span style=\"color:#ae81ff\">\\\n</span><span style=\"color:#ae81ff\"></span>    --template<span style=\"color:#f92672\">=</span>https://github.com/jefftriplett/django-startproject/archive/main.zip <span style=\"color:#ae81ff\">\\\n</span><span style=\"color:#ae81ff\"></span>    config\n</code></pre></div><p>I landed on <code>config</code> for my projects because I like consistency when switching between projects, and over a decade and a half, I have never had a naming collision with config. The name config tends to sort to the top of my folder listings, making copying and pasting configs from project to project easier.</p>\n<h2 id=\"setup-git\">Setup Git</h2>\n<ol>\n<li>Now that I have my project started, I will run <code>git init</code> inside the project folder.</li>\n<li><code>bunx gitignore python</code> to set standard files to ignore</li>\n<li>I will create a new repo on Git(Hub|Lab) and set it as a remote source for my project</li>\n<li>I will run <code>gittower .</code>, select which files I&rsquo;m ready to commit, and write my initial commit message.</li>\n<li>I will <code>git push</code> from my terminal or <a href=\"https://www.git-tower.com/mac\">GitTower</a> and confirm that my new project is set up.</li>\n</ol>\n<h2 id=\"switching-projects\">Switching projects</h2>\n<p>When I want to work on an existing project, I use <code>virtualenv</code>&rsquo;s <code>workon</code> command to switch projects. <code>workon {project_name}</code> will transport me to the correct project folder and will activate my Python virtual environment so that I&rsquo;m ready to work.</p>\n<h2 id=\"do-i-need-templates\">Do I need templates?</h2>\n<p>If my project needs templates, I&rsquo;ll use a starter <code>templates/base.html</code> and the <a href=\"https://tailwindcss.com/docs/installation/play-cdn\">Tailwind CSS Play CDN</a>.</p>\n<p>I am a few years into using Tailwind CSS, and it&rsquo;s my first choice for quickly bootstrapping a project. Despite the masto-hate, Tailwind CSS works for me and is vanilla CSS-friendly.</p>\n<p>I like their Play CDN because I can start fiddling with Tailwind CSS with zero runtime and only one script tag to include in my HTML docs head.</p>\n",
				"content_text": "In the spirit of Brenton Cleeland's [Six things I do every time I start a Django project][], my goal is to document and share my process since this often comes up. \n\nLike Brenton, I have a lot of projects, and their scope may range from quick one-offs that might last a few hours to projects I have worked on for a decade or more. \n\n## Overview and upfront notes\n\nI use [pyenv](https://github.com/pyenv/pyenv) to manage my Python versions, but I don't go into any details here. \n\nI use [pyenv-virtualenvwrapper](https://github.com/pyenv/pyenv-virtualenvwrapper) to manage what Python calls a \"virtual environment,\" which copies and symlinks files and folders where they need to be so that your Python projects are isolated from one another. \n\n`pyenv-virtualenvwrapper` is also a `pyenv`-friendly fork of [virtualenvwrapper](https://github.com/python-virtualenvwrapper/virtualenvwrapper). \n\n**Please note:** To avoid even more confusion, please assume that at any time in this article, when I mention `virtualenvwrapper` or its various commands, I mean the `pyenv-virtualenvwrapper` version of these tools. \n\nFor more detail, see my article [Python Development on macOS Notes: pyenv and pyenv-virtualenvwrapper](https://micro.webology.dev/2024/02/10/python-development-on.html). \n\n## Creating a new project\n\nFirst, I need a folder to store all my project files. One nice feature of `virtualenvwrapper` is it can manage both my virtualenvs and where my projects live. \n\nSo my first step for a new project is to run `mkvirtualenv {project_name}`, where `project_name` is the name of the domain name or client that I'm working with. `mkvirtualenv` will then create a new virtual environment (`virtualenv` or `venv` is fine too) for me, make a new project folder for me to put my files into, and then transport me to this new project folder. \n\n`virtualenvwrapper` also supports custom hooks, which is a fancy way of saying it runs a series of commands I tell it I want to run after it creates a `virtualenv`. These are a few of the custom steps that I run for my projects: \n\n- Create a [Sublime Text][] project file so [Alfred][] can detect it. \n- Create a [Sublime Text][] `pyrightconfig.json` file, which enables LSP support for the project so that my code autocompletion works. \n- Create a [Syncthing](https://syncthing.net) `.stignore`  file.\n- Create a [direnv](https://direnv.net) `.envrc` file that loads my project's environment variables.\n- Transports me into my projects folder.\n- Activate the new `virtualenv`, so Python is ready.\n- Install the latest version of `pip`, Python's package manager.\n- Install the latest version of [pip-tools](https://github.com/jazzband/pip-tools/), which I like to use for managing my project Python requirements. \n- **Soon:** Install the latest version of [uv](https://github.com/astral-sh/uv), which will soon replace pip-tools for me. \n\nEven though most of my projects use Docker Compose, I still install my Python dependencies outside of Docker in the virtual environment so that my text editors and [pyright](https://github.com/microsoft/pyright) can read them. \n\n## Create my Django app\n\nOnce I have a project folder and `virtualenv` set up, I must create a Django project. \nI use either my [django-startproject][] or [REVSYS][]'s Django starter template, which we call AlphaKit. \nBoth projects aim to start jumpstart development and spend zero time configuring projects. \nSince my stater project is public, I will run this snippet to jumpstart it. \n\n```shell\ndjango-admin startproject \\\n    --extension=ini,py,yml \\\n    --template=https://github.com/jefftriplett/django-startproject/archive/main.zip \\\n    config\n```\n\nI landed on `config` for my projects because I like consistency when switching between projects, and over a decade and a half, I have never had a naming collision with config. The name config tends to sort to the top of my folder listings, making copying and pasting configs from project to project easier. \n\n## Setup Git\n\n1. Now that I have my project started, I will run `git init` inside the project folder.\n2. `bunx gitignore python` to set standard files to ignore\n3. I will create a new repo on Git(Hub|Lab) and set it as a remote source for my project\n4. I will run `gittower .`, select which files I'm ready to commit, and write my initial commit message.\n5. I will `git push` from my terminal or [GitTower][] and confirm that my new project is set up.\n\n## Switching projects\n\nWhen I want to work on an existing project, I use `virtualenv`'s `workon` command to switch projects. `workon {project_name}` will transport me to the correct project folder and will activate my Python virtual environment so that I'm ready to work. \n\n## Do I need templates?\n\nIf my project needs templates, I'll use a starter `templates/base.html` and the [Tailwind CSS Play CDN][].\n\nI am a few years into using Tailwind CSS, and it's my first choice for quickly bootstrapping a project. Despite the masto-hate, Tailwind CSS works for me and is vanilla CSS-friendly. \n\nI like their Play CDN because I can start fiddling with Tailwind CSS with zero runtime and only one script tag to include in my HTML docs head. \n\n[Alfred]: https://www.alfredapp.com/\n[Copier]: https://copier.readthedocs.io/en/stable/\n[django-startproject]: https://github.com/jefftriplett/django-startproject\n[GitTower]: https://www.git-tower.com/mac\n[Just]: https://github.com/casey/just\n[REVSYS]: https://revsys.com\n[Six things I do every time I start a Django project]: https://brntn.me/blog/six-things-i-do-every-time-i-start-a-django-project/\n[Sublime Text]: https://www.sublimetext.com/blog/articles/sublime-text-4\n[Tailwind CSS Play CDN]: https://tailwindcss.com/docs/installation/play-cdn\n[virtualenvwrapper]: https://github.com/python-virtualenvwrapper/virtualenvwrapper\n",
				"date_published": "2024-02-26T20:15:29-05:00",
				"url": "https://micro.webology.dev/2024/02/26/things-i-do.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/25/weeknotes-w.html",
				"title": "Weeknotes 2024 W08",
				"content_html": "<p>It warmed up this week, and we started our mornings out in the 30s and ended them in the 60s and even 70s all week. Our neighbors started putting their furniture back out on their porches, which is a local sign that winter is almost over.</p>\n<h2 id=\"family\">Family</h2>\n<p>We found a small gas leak in our &gt;100-year-old house and hired someone to fix it. If you ever smell gas, friends, please call and have it fixed as soon as possible.</p>\n<p>I have been working with my son every day on his basketball skills. He missed his first game Saturday because of a stomach bug but bounced back enough Sunday to join me at the gym to practice. He went from zero dribbling skills to leading the team in dribbling drills, which he is pretty proud of.</p>\n<p>My youngest child is firmly in the three to four-word sentence phase. My other half returned to work this week after being off for a procedure.</p>\n<h2 id=\"work\">Work</h2>\n<p>I started a new client project this week, which involved spinning up a new green field project, taking a bunch of CSV files, and importing millions of records. The goal is to use Django, HTMX, and a lot of neat tech to build a vast parts catalog.</p>\n<h2 id=\"community\">Community</h2>\n<p>We met to discuss our <a href=\"https://2024.djangocon.us\">DjangoCon US</a> website options as we try to figure out what we want in a new platform. We had a follow-up meeting about our Health and Safety policies, and I also had a meeting to help onboard someone to assist with our automation projects.</p>\n<p>I joined the <a href=\"https://www.conferencechats.org\">Conference Chats</a> meetup this week and spent a few hours discussing conferences with other community organizers.</p>\n<p>I joined two <a href=\"https://wiggle.work\">Wiggle Work</a> events this week over lunch with the same group that had been writing this month.</p>\n<p>I hosted <a href=\"https://mastodon.social/@webology/111983160101281972\">Office Hours</a> again this week.</p>\n<h2 id=\"side-projects\">Side Projects</h2>\n<p>I spent most of my side project time on <a href=\"https://django-news.com\">Django News</a>, <a href=\"https://jobs.django-news.com\">Django News Jobs</a>, and <a href=\"https://djangopackages.org\">Django Packages</a>.</p>\n<p><strong>Django News Jobs:</strong> I fixed several bugs, styled some message notifications, and refactored how various job status states work. We have different workflows for when a human submits a job versus jobs we collect from RSS feeds, APIs, or scraped. Most of these jobs are collected but have yet to be displayed. They should start seeing the light of day once I get a better handle on a moderation queue.</p>\n<p><strong>Django Packages:</strong> The website now runs on <a href=\"https://github.com/djangopackages/djangopackages/pull/1105\">Django 5.0</a> thanks to <a href=\"https://github.com/saadmk11\">Maksudul Haque</a>. I merged in several rounds of dependency updates and pre-commit updates.</p>\n<p><strong>Django News Newsletter:</strong> We shipped issue <a href=\"https://django-news.com/issues/220#start\">#220</a>. I worked on our secret backend project, which helps us collect news and makes updating the newsletter easier. I migrated our Tweet model to a Drafts model and dusted off some code that would post via the <a href=\"https://typefully.com\">Typefully</a> API.</p>\n<p>All three projects received security updates, and I created a new blog app called the Changelog, which we&rsquo;ll slowly roll out over the next few weeks or months. That should help us blog about project updates and release and share thoughts.</p>\n<p>I started using the <a href=\"https://astral.sh/blog/uv\"><code>uv</code></a> project to shave a minute or more off local updates and some Docker rebuilds. I&rsquo;m trying it out for a week and then rolling it out.</p>\n<h2 id=\"me-time\">&ldquo;Me&rdquo; time</h2>\n<p>I finished <a href=\"https://trakt.tv/shows/true-detective/seasons/4\">True Detective: Season 4: Night Country</a></p>\n<p>I watched the first two seasons of <a href=\"https://trakt.tv/shows/resident-alien\">Resident Alien</a></p>\n<p>I watched two Kansas Basketball games and a bunch of random games.</p>\n<p>I wrote seven blog posts, part of my goal to blog daily in February with the <a href=\"https://wiggle.work\">Wiggle Work</a> Discord community I&rsquo;m part of.</p>\n<p><a href=\"https://micro.webology.dev/2024/02/24/fetch-the-contents.html\">2024-02-24</a>:¬†<strong>Fetch the contents of a URL with Django service</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/02/23/three-years-later.html\">2024-02-23</a>:¬†<strong>Three years later, email is less of a pain</strong></p>\n<p><a href=\"https://micro.webology.dev/2024/02/22/scratching-itches-with.html\">2024-02-22</a>:¬†<strong>Scratching Itches with Python and ChatGPT</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/02/21/using-chamber-with.html\">2024-02-21</a>:¬†<strong>Using Chamber with Django and managing environment variables</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/02/20/transferred-djangorqemailbackend-found.html\">2024-02-20</a>:¬†<strong>Transferred - django-rq-email-backend found a new home</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/02/19/django-ninja.html\">2024-02-19</a>:¬†<strong>ü•∑ Django Ninja</strong>¬†</p>\n<p><a href=\"https://micro.webology.dev/2024/02/18/my-development-setup.html\">2024-02-18</a>:¬†<strong>My 2024 Development Setup</strong>¬†</p>\n<h2 id=\"next-week\">Next week</h2>\n<p>I&rsquo;ll finally take down those Christmas lights. I must repair rot damage on the front porch and our back steps. It&rsquo;s almost time to start reseeding our yard and removing the extra sticks that have accumulated over the winter.</p>\n",
				"content_text": "It warmed up this week, and we started our mornings out in the 30s and ended them in the 60s and even 70s all week. Our neighbors started putting their furniture back out on their porches, which is a local sign that winter is almost over. \n\n## Family\n\nWe found a small gas leak in our >100-year-old house and hired someone to fix it. If you ever smell gas, friends, please call and have it fixed as soon as possible. \n\nI have been working with my son every day on his basketball skills. He missed his first game Saturday because of a stomach bug but bounced back enough Sunday to join me at the gym to practice. He went from zero dribbling skills to leading the team in dribbling drills, which he is pretty proud of. \n\nMy youngest child is firmly in the three to four-word sentence phase. My other half returned to work this week after being off for a procedure. \n\n## Work\n\nI started a new client project this week, which involved spinning up a new green field project, taking a bunch of CSV files, and importing millions of records. The goal is to use Django, HTMX, and a lot of neat tech to build a vast parts catalog. \n\n## Community\n\nWe met to discuss our [DjangoCon US](https://2024.djangocon.us) website options as we try to figure out what we want in a new platform. We had a follow-up meeting about our Health and Safety policies, and I also had a meeting to help onboard someone to assist with our automation projects.  \n\nI joined the [Conference Chats](https://www.conferencechats.org) meetup this week and spent a few hours discussing conferences with other community organizers. \n\nI joined two [Wiggle Work](https://wiggle.work) events this week over lunch with the same group that had been writing this month. \n\nI hosted [Office Hours](https://mastodon.social/@webology/111983160101281972) again this week. \n\n## Side Projects\n\nI spent most of my side project time on [Django News](https://django-news.com), [Django News Jobs](https://jobs.django-news.com), and [Django Packages](https://djangopackages.org). \n\n**Django News Jobs:** I fixed several bugs, styled some message notifications, and refactored how various job status states work. We have different workflows for when a human submits a job versus jobs we collect from RSS feeds, APIs, or scraped. Most of these jobs are collected but have yet to be displayed. They should start seeing the light of day once I get a better handle on a moderation queue. \n\n**Django Packages:** The website now runs on [Django 5.0](https://github.com/djangopackages/djangopackages/pull/1105) thanks to [Maksudul Haque](https://github.com/saadmk11). I merged in several rounds of dependency updates and pre-commit updates. \n\n**Django News Newsletter:** We shipped issue [#220](https://django-news.com/issues/220#start). I worked on our secret backend project, which helps us collect news and makes updating the newsletter easier. I migrated our Tweet model to a Drafts model and dusted off some code that would post via the [Typefully](https://typefully.com) API. \n\nAll three projects received security updates, and I created a new blog app called the Changelog, which we'll slowly roll out over the next few weeks or months. That should help us blog about project updates and release and share thoughts. \n\nI started using the [`uv`](https://astral.sh/blog/uv) project to shave a minute or more off local updates and some Docker rebuilds. I'm trying it out for a week and then rolling it out. \n\n## \"Me\" time\n\nI finished [True Detective: Season 4: Night Country](https://trakt.tv/shows/true-detective/seasons/4)\n\nI watched the first two seasons of [Resident Alien](https://trakt.tv/shows/resident-alien)\n\nI watched two Kansas Basketball games and a bunch of random games. \n\nI wrote seven blog posts, part of my goal to blog daily in February with the [Wiggle Work](https://wiggle.work) Discord community I'm part of. \n\n[2024-02-24](https://micro.webology.dev/2024/02/24/fetch-the-contents.html):¬†**Fetch the contents of a URL with Django service**¬†\n\n[2024-02-23](https://micro.webology.dev/2024/02/23/three-years-later.html):¬†**Three years later, email is less of a pain**\n\n[2024-02-22](https://micro.webology.dev/2024/02/22/scratching-itches-with.html):¬†**Scratching Itches with Python and ChatGPT**¬†\n\n[2024-02-21](https://micro.webology.dev/2024/02/21/using-chamber-with.html):¬†**Using Chamber with Django and managing environment variables**¬†\n\n[2024-02-20](https://micro.webology.dev/2024/02/20/transferred-djangorqemailbackend-found.html):¬†**Transferred - django-rq-email-backend found a new home**¬†\n\n[2024-02-19](https://micro.webology.dev/2024/02/19/django-ninja.html):¬†**ü•∑ Django Ninja**¬†\n\n[2024-02-18](https://micro.webology.dev/2024/02/18/my-development-setup.html):¬†**My 2024 Development Setup**¬†\n\n## Next week\n\nI'll finally take down those Christmas lights. I must repair rot damage on the front porch and our back steps. It's almost time to start reseeding our yard and removing the extra sticks that have accumulated over the winter. \n",
				"date_published": "2024-02-25T20:42:20-05:00",
				"url": "https://micro.webology.dev/2024/02/25/weeknotes-w.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/24/fetch-the-contents.html",
				"title": "Fetch the contents of a URL with Django service",
				"content_html": "<p>For the last few months, I have been using the <a href=\"https://cooked.wiki\">cooked.wiki</a> recipe-saving website, which initially impressed me because of how easy the website&rsquo;s API is to use.</p>\n<p>To use the service, all one has to do is prepend any website that contains a food recipe with <code>https://cooked.wiki/</code>, and you get the recipe without a coming-of-age discovery story.</p>\n<p>This is a fun pattern, so I wrote my own in Django to illustrate how to build a Django view, which accepts a URL like http://localhost:8000/https://httpbin.org/get/ where <a href=\"https://httpbin.org/get/\">https://httpbin.org/get/</a> will be fetched and the contents stored for processing.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># views.py </span>\n<span style=\"color:#f92672\">import</span> httpx\n\n<span style=\"color:#f92672\">from</span> django.http <span style=\"color:#f92672\">import</span> HttpResponse\n<span style=\"color:#f92672\">from</span> urllib.parse <span style=\"color:#f92672\">import</span> urlparse\n\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">fetch_content_view</span>(request, url: str) <span style=\"color:#f92672\">-&gt;</span> HttpResponse:\n    <span style=\"color:#75715e\"># Ensure the URL starts with http:// or https://</span>\n    parsed_url <span style=\"color:#f92672\">=</span> urlparse(url)\n    <span style=\"color:#66d9ef\">if</span> parsed_url<span style=\"color:#f92672\">.</span>scheme <span style=\"color:#f92672\">in</span> (<span style=\"color:#e6db74\">&#34;http&#34;</span>, <span style=\"color:#e6db74\">&#34;https&#34;</span>):\n        <span style=\"color:#66d9ef\">try</span>:\n            response <span style=\"color:#f92672\">=</span> httpx<span style=\"color:#f92672\">.</span>get(url)\n\n            <span style=\"color:#75715e\"># Check for HTTP request errors</span>\n            httpx<span style=\"color:#f92672\">.</span>raise_for_status()\n            content <span style=\"color:#f92672\">=</span> httpx<span style=\"color:#f92672\">.</span>content\n\n            <span style=\"color:#75715e\"># TODO: do something with content here...</span>\n            <span style=\"color:#66d9ef\">assert</span> content\n            <span style=\"color:#66d9ef\">return</span> HttpResponse(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;</span><span style=\"color:#e6db74\">{</span>url<span style=\"color:#e6db74\">=}</span><span style=\"color:#e6db74\">&#34;</span>)\n\n        <span style=\"color:#66d9ef\">except</span> httpx<span style=\"color:#f92672\">.</span>RequestException <span style=\"color:#66d9ef\">as</span> e:\n            <span style=\"color:#66d9ef\">return</span> HttpResponse(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;Error fetching the requested URL: </span><span style=\"color:#e6db74\">{</span>e<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">&#34;</span>, status<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">500</span>)\n\n    <span style=\"color:#66d9ef\">else</span>:\n        <span style=\"color:#66d9ef\">return</span> HttpResponse(<span style=\"color:#e6db74\">&#34;Invalid URL format.&#34;</span>, status<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">400</span>)\n</code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># urls.py</span>\n\n<span style=\"color:#f92672\">from</span> django.urls <span style=\"color:#f92672\">import</span> path\n<span style=\"color:#f92672\">from</span> . <span style=\"color:#f92672\">import</span> views\n\nurlpatterns <span style=\"color:#f92672\">=</span> [\n    <span style=\"color:#75715e\"># other URL patterns here...</span>\n    <span style=\"color:#f92672\">...</span>\n    \n    path(<span style=\"color:#e6db74\">&#34;&lt;path:url&gt;/&#34;</span>, views<span style=\"color:#f92672\">.</span>fetch_content_view, name<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;fetch_content&#34;</span>),\n]\n</code></pre></div><p>If you create your fetch the contents of a URL-like service, please consider putting it behind authentication to avoid someone discovering it and using it to DDOS someone&rsquo;s website. I recommend throttling the view to prevent overloading a website by spamming requests to it.</p>\n<p><strong>Updated:</strong> I updated the example to switch from the python-requests references to the <a href=\"https://www.python-httpx.org/compatibility/\">HTTPX</a> library.</p>\n",
				"content_text": "For the last few months, I have been using the [cooked.wiki](https://cooked.wiki) recipe-saving website, which initially impressed me because of how easy the website's API is to use. \n\nTo use the service, all one has to do is prepend any website that contains a food recipe with `https://cooked.wiki/`, and you get the recipe without a coming-of-age discovery story.\n\nThis is a fun pattern, so I wrote my own in Django to illustrate how to build a Django view, which accepts a URL like http://localhost:8000/https://httpbin.org/get/ where https://httpbin.org/get/ will be fetched and the contents stored for processing. \n\n```python\n# views.py \nimport httpx\n\nfrom django.http import HttpResponse\nfrom urllib.parse import urlparse\n\ndef fetch_content_view(request, url: str) -> HttpResponse:\n    # Ensure the URL starts with http:// or https://\n    parsed_url = urlparse(url)\n    if parsed_url.scheme in (\"http\", \"https\"):\n        try:\n            response = httpx.get(url)\n\n            # Check for HTTP request errors\n            httpx.raise_for_status()\n            content = httpx.content\n\n            # TODO: do something with content here...\n            assert content\n            return HttpResponse(f\"{url=}\")\n\n        except httpx.RequestException as e:\n            return HttpResponse(f\"Error fetching the requested URL: {e}\", status=500)\n\n    else:\n        return HttpResponse(\"Invalid URL format.\", status=400)\n```\n\n\n\n```python\n# urls.py\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # other URL patterns here...\n    ...\n    \n    path(\"<path:url>/\", views.fetch_content_view, name=\"fetch_content\"),\n]\n```\n\nIf you create your fetch the contents of a URL-like service, please consider putting it behind authentication to avoid someone discovering it and using it to DDOS someone's website. I recommend throttling the view to prevent overloading a website by spamming requests to it. \n\n**Updated:** I updated the example to switch from the python-requests references to the [HTTPX](https://www.python-httpx.org/compatibility/) library. \n",
				"date_published": "2024-02-24T15:21:43-05:00",
				"url": "https://micro.webology.dev/2024/02/24/fetch-the-contents.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/23/three-years-later.html",
				"title": "Three years later, email is less of a pain",
				"content_html": "<p><strong>Disclaimer:</strong>¬†Forward Email did <em>not</em> pay me to write this.¬†</p>\n<p>I wrote about my side projects and how <a href=\"https://jefftriplett.com/2021/side-projects-email-is-a-pain/\">email is a pain</a> a few years ago, and this morning, I saw a <a href=\"https://mastodon.social/@zrail@hachyderm.io/111981176443853726\">Mastodon post</a> that led me back here.¬†</p>\n<p>At the time, I ran into a point with my side projects where they would grow up and eventually need an email address dedicated to them. Instead of trying to manage a dozen email accounts, I stumbled on <a href=\"https://forwardemail.net\">Forward Email</a>, and they solved the problem by allowing me to forward emails to other email accounts. Three years and annual billing cycles later, the service works.¬†</p>\n<p>This morning, I discovered they now support <a href=\"https://forwardemail.net/en/guides/send-email-with-custom-domain-smtp\">outbound SMTP emails</a>, which allowed me to simplify how I configure and send emails for my projects. I used Mailgun and Sendgrid, but my send volume was just low enough that I struggled to keep Sendgrid from closing my account.¬†</p>\n<p>Forward Email also now supports <a href=\"https://forwardemail.net/en/free-email-webhooks\">Email webhooks</a>, and they have an Email API, which could be handy for a few projects.¬†</p>\n<p>If you work on any number of side projects and you find yourself dreading email, as I did, I recommend Forward Email to at least route email to one email account while having the right dials and switches to make the experience not suck.</p>\n",
				"content_text": "**Disclaimer:**¬†Forward Email did *not* pay me to write this.¬†\r\n\r\nI wrote about my side projects and how [email is a pain](https://jefftriplett.com/2021/side-projects-email-is-a-pain/) a few years ago, and this morning, I saw a [Mastodon post](https://mastodon.social/@zrail@hachyderm.io/111981176443853726) that led me back here.¬†\r\n\r\nAt the time, I ran into a point with my side projects where they would grow up and eventually need an email address dedicated to them. Instead of trying to manage a dozen email accounts, I stumbled on [Forward Email](https://forwardemail.net), and they solved the problem by allowing me to forward emails to other email accounts. Three years and annual billing cycles later, the service works.¬†\r\n\r\nThis morning, I discovered they now support [outbound SMTP emails](https://forwardemail.net/en/guides/send-email-with-custom-domain-smtp), which allowed me to simplify how I configure and send emails for my projects. I used Mailgun and Sendgrid, but my send volume was just low enough that I struggled to keep Sendgrid from closing my account.¬†\r\n\r\nForward Email also now supports [Email webhooks](https://forwardemail.net/en/free-email-webhooks), and they have an Email API, which could be handy for a few projects.¬†\r\n\r\nIf you work on any number of side projects and you find yourself dreading email, as I did, I recommend Forward Email to at least route email to one email account while having the right dials and switches to make the experience not suck.\n",
				"date_published": "2024-02-23T14:35:08-05:00",
				"url": "https://micro.webology.dev/2024/02/23/three-years-later.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/22/scratching-itches-with.html",
				"title": "Scratching Itches with Python and ChatGPT",
				"content_html": "<p>A few times a week over the last several months, I have paired with ChatGPT to work on Python scripts that solve problems that I would otherwise have spent less time on. Some might feel too niche or even too tedious that I would otherwise not take the time to work on. Most of the time, these are scratching an itch and solving a problem on my mind.</p>\n<p>Because of the time constraint, I have been impressed with the results. I usually spend 10 to 15 minutes prompting ChatGPT, then I spend 10 to 15 minutes refactoring the script, adding <a href=\"https://typer.tiangolo.com\">Typer</a>, and refining the code. Sometimes, this involved copying all or parts of my script and pasting it back into ChatGPT to have it refine or refactor some section of code.</p>\n<h2 id=\"youtube-playlist-to-markdown-file\">YouTube Playlist to Markdown file</h2>\n<p>My <a href=\"https://gist.github.com/jefftriplett/4bf333453d7cab320aa45767b1949be6\">YouTube playlist to markdown script</a> is helpful for quickly getting a list of video URLs and titles back from a YouTube playlist. I have used this for DjangoCon US and a few other conferences to help collect links for social media and a few times for the <a href=\"https://django-news.com\">Django News Newsletter</a>.</p>\n<p>ChatGPT even documented the process, including links for how to set permissions for the YouTube API.</p>\n<h2 id=\"use-playwright-to-pull-data-out-of-the-django-admin\">Use Playwright to pull data out of the Django Admin</h2>\n<p>I have database access for most projects, but I recently needed to export a list of RSS feeds from the admin of a Django website. ChatGPT could quickly write a Playwright script to log in to the website, access a list page, and pull the feed field from the detail page. The script generated a JSON feed and could understand pagination and how to page through the links.</p>\n<h2 id=\"github-issues-and-pull-request-templates\">GitHub Issues and Pull Request templates</h2>\n<p>For the <a href=\"https://github.com/wsvincent/awesome-django\">Awesome Django project</a>, I asked ChatGPT to generate GitHub Issues and Pull Request templates based on my criteria. Once the templates were complete, I prompted ChatGPT to help me write a script that uses the GitHub API to read a pull request and validate the answers filled out while adding some other contextual data that makes it easier to verify the request.</p>\n<h2 id=\"modeling-html-with-pydantic\">Modeling HTML with PyDantic</h2>\n<p>I am still trying to figure out what to do with the project, but I asked ChatGPT to use <a href=\"https://github.com/pydantic/pydantic\">Pydantic</a> to create a class that could represent HTML tags. Once I was happy with the API, I asked ChatGPT to represent all HTML tags. After a few more prompts, I could read, write, and represent an HTML document using this script using Pydantic.</p>\n<h2 id=\"outro\">Outro</h2>\n<p>I&rsquo;m still determining how useful these scripts are, but I have enjoyed these quick sessions to write a one-off script or to solve problems that come up a few times a year that never seemed worth the time spent trying to write it from scratch.</p>\n",
				"content_text": "A few times a week over the last several months, I have paired with ChatGPT to work on Python scripts that solve problems that I would otherwise have spent less time on. Some might feel too niche or even too tedious that I would otherwise not take the time to work on. Most of the time, these are scratching an itch and solving a problem on my mind. \n\nBecause of the time constraint, I have been impressed with the results. I usually spend 10 to 15 minutes prompting ChatGPT, then I spend 10 to 15 minutes refactoring the script, adding [Typer](https://typer.tiangolo.com), and refining the code. Sometimes, this involved copying all or parts of my script and pasting it back into ChatGPT to have it refine or refactor some section of code. \n\n## YouTube Playlist to Markdown file\n\nMy [YouTube playlist to markdown script](https://gist.github.com/jefftriplett/4bf333453d7cab320aa45767b1949be6) is helpful for quickly getting a list of video URLs and titles back from a YouTube playlist. I have used this for DjangoCon US and a few other conferences to help collect links for social media and a few times for the [Django News Newsletter](https://django-news.com). \n\nChatGPT even documented the process, including links for how to set permissions for the YouTube API. \n\n## Use Playwright to pull data out of the Django Admin\n\nI have database access for most projects, but I recently needed to export a list of RSS feeds from the admin of a Django website. ChatGPT could quickly write a Playwright script to log in to the website, access a list page, and pull the feed field from the detail page. The script generated a JSON feed and could understand pagination and how to page through the links. \n\n## GitHub Issues and Pull Request templates\n\nFor the [Awesome Django project](https://github.com/wsvincent/awesome-django), I asked ChatGPT to generate GitHub Issues and Pull Request templates based on my criteria. Once the templates were complete, I prompted ChatGPT to help me write a script that uses the GitHub API to read a pull request and validate the answers filled out while adding some other contextual data that makes it easier to verify the request. \n\n## Modeling HTML with PyDantic\n\nI am still trying to figure out what to do with the project, but I asked ChatGPT to use [Pydantic](https://github.com/pydantic/pydantic) to create a class that could represent HTML tags. Once I was happy with the API, I asked ChatGPT to represent all HTML tags. After a few more prompts, I could read, write, and represent an HTML document using this script using Pydantic.  \n\n## Outro\n\nI'm still determining how useful these scripts are, but I have enjoyed these quick sessions to write a one-off script or to solve problems that come up a few times a year that never seemed worth the time spent trying to write it from scratch. \n",
				"date_published": "2024-02-22T20:56:38-05:00",
				"url": "https://micro.webology.dev/2024/02/22/scratching-itches-with.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/21/using-chamber-with.html",
				"title": "Using Chamber with Django and managing environment variables",
				"content_html": "<p>One of my favorite hosting setups is getting a cheap slice from Digital Ocean or your favorite provider, installing <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> and <a href=\"https://tailscale.com\">Tailscale</a>, and then fire-walling everything off except for port 443.</p>\n<p>Whenever I want to host a new project, I copy a <code>docker-compose.yml</code> file to the server, and then I start it with `docker compose up -d'.</p>\n<p>I run <a href=\"https://github.com/containrrr/watchtower\">Watchtower</a> in Docker on the server, which looks for new Docker images from GitHub Packages, pulls them, and restarts any updated containers.</p>\n<p>I can update my projects, <code>git push</code> changes, and GitHub Actions will build and store a new container image for me.</p>\n<p>My main pain point was juggling environment variables until someone pointed out <a href=\"https://github.com/segmentio/chamber\">Chamber</a>, which manages environment variables well.</p>\n<p>Since creating this setup, I have shared several GitHub Gists with curious friends, and my goal of this post is to serve as more of an overview of options than it is to be a comprehensive guide to using Chamber.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>You&rsquo;ll need an AWS account, some essential Docker and Compose knowledge, and to follow <a href=\"https://github.com/segmentio/chamber#installing\">Chamber&rsquo;s Installing</a> instructions.</p>\n<h2 id=\"setting-up-my-environment\">Setting up my environment</h2>\n<p>Ironically, my goal of eliminating individual environment variables led me to need four environment variables to bootstrap Chamber itself.\nThe environment variables I&rsquo;m using:</p>\n<ul>\n<li><code>AWS_ACCESS_KEY_ID</code></li>\n<li><code>AWS_REGION</code></li>\n<li><code>AWS_SECRET_ACCESS_KEY</code></li>\n<li><code>CHAMBER_KMS_KEY_ALIAS=aws/ssm</code></li>\n</ul>\n<h2 id=\"dockerfile-setup\">Dockerfile Setup</h2>\n<p>To make running Chamber running more straightforward, I used the <code>segment/chamber</code> Docker image, copied the <code>/bin/chamber</code> binary into my image, and configured it to run it as a <code>ENTRYPOINT</code>.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-dockerfile\" data-lang=\"dockerfile\"><span style=\"color:#66d9ef\">FROM</span><span style=\"color:#e6db74\"> segment/chamber:2.14 AS chamber</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">FROM</span><span style=\"color:#e6db74\"> python:3.11-slim-buster AS dev</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">FROM</span><span style=\"color:#e6db74\"> dev AS production</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>...<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">COPY</span> --from<span style=\"color:#f92672\">=</span>chamber /chamber /bin/chamber<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#66d9ef\">ENTRYPOINT</span> [<span style=\"color:#e6db74\">&#34;/bin/chamber&#34;</span>, <span style=\"color:#e6db74\">&#34;exec&#34;</span>, <span style=\"color:#e6db74\">&#34;django-news.com/production&#34;</span>, <span style=\"color:#e6db74\">&#34;--&#34;</span>]<span style=\"color:#960050;background-color:#1e0010\">\n</span></code></pre></div><p>I prefer to namespace these variables based on the project and the environment I&rsquo;m referencing, like <code>django-news.com/production</code>.</p>\n<p>I am using a Docker entrypoint so that my secrets/environment variables work by default, whether running the image or overriding the default command, so I may shell into my container.</p>\n<h2 id=\"docker-compose-setup\">Docker Compose Setup</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yml\" data-lang=\"yml\"><span style=\"color:#f92672\">services</span>:\n  <span style=\"color:#f92672\">web</span>:\n    <span style=\"color:#f92672\">entrypoint</span>: <span style=\"color:#ae81ff\">/bin/chamber exec django-news.com/production --</span>\n    <span style=\"color:#f92672\">command</span>: <span style=\"color:#ae81ff\">gunicorn config.wsgi --bind 0.0.0.0:8000</span>\n    <span style=\"color:#ae81ff\">...</span>\n</code></pre></div><p>Please note that the <code>entrypoint</code> line is optional if you set it in your <code>ENTRYPOINT</code> setting in your <code>DOCKERFILE</code>.</p>\n<h2 id=\"using-chamber\">Using Chamber</h2>\n<p>Now that you have seen how we use Chamber in Docker and Docker Compose, this is how we get things into Chamber.</p>\n<h3 id=\"listing-our-projects\">Listing our projects</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ chamber list-services\n</code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ chamber list django-news.com/production\n</code></pre></div><h3 id=\"write-new-settings\">Write new settings</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ chamber write django-news.com/production DJANGO_DEBUG true\n</code></pre></div><h3 id=\"delete-an-existing-setting\">Delete an existing setting</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ chamber delete django-news.com/production DJANGO_DEBUG\n</code></pre></div><h3 id=\"export-our-settings-into-a-dotenv-env-file\">Export our settings into a dotenv (.env) file</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">$ chamber export --format<span style=\"color:#f92672\">=</span>dotenv django-news.com/production\n</code></pre></div><h3 id=\"consuming-an-env-variable-from-django\">Consuming an env variable from Django</h3>\n<p>The <a href=\"https://github.com/sloria/environs\"><code>environs</code></a> project is my go-to for parsing environment variables. Here is an example of how to toggle Django&rsquo;s debug mode.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># settings.py</span>\n<span style=\"color:#f92672\">import</span> environs\n\nenv <span style=\"color:#f92672\">=</span> environs<span style=\"color:#f92672\">.</span>Env()\n\nDEBUG <span style=\"color:#f92672\">=</span> env<span style=\"color:#f92672\">.</span>bool(<span style=\"color:#e6db74\">&#34;DJANGO_DEBUG&#34;</span>, default<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">False</span>)\n</code></pre></div><h2 id=\"conclusion\">Conclusion</h2>\n<p>I&rsquo;m happy to manage my environment variables from the command line without syncing files.\nUsing Chamber with KMS increased my monthly AWS bill by $0.01, which is money well spent for the flexibility of using Chamber.</p>\n<h2 id=\"alternatives\">Alternatives</h2>\n<p>I had a good experience using the 1Password CLI for a recent client project to share and load secrets into the environment.\nIf you are working with a team, consider checking it out for your team in case it&rsquo;s a good fit.\nCheck out their <a href=\"https://developer.1password.com/docs/cli/secrets-environment-variables/\">Load secrets into the environment</a> docs.</p>\n",
				"content_text": "One of my favorite hosting setups is getting a cheap slice from Digital Ocean or your favorite provider, installing [Docker Compose](https://docs.docker.com/compose/) and [Tailscale](https://tailscale.com), and then fire-walling everything off except for port 443. \n\nWhenever I want to host a new project, I copy a `docker-compose.yml` file to the server, and then I start it with `docker compose up -d'.\n\nI run [Watchtower][watchtower] in Docker on the server, which looks for new Docker images from GitHub Packages, pulls them, and restarts any updated containers. \n\nI can update my projects, `git push` changes, and GitHub Actions will build and store a new container image for me.\n\nMy main pain point was juggling environment variables until someone pointed out [Chamber][chamber], which manages environment variables well. \n\nSince creating this setup, I have shared several GitHub Gists with curious friends, and my goal of this post is to serve as more of an overview of options than it is to be a comprehensive guide to using Chamber. \n\n## Prerequisites\n\nYou'll need an AWS account, some essential Docker and Compose knowledge, and to follow [Chamber's Installing][chamber-installing] instructions.\n\n## Setting up my environment\n\nIronically, my goal of eliminating individual environment variables led me to need four environment variables to bootstrap Chamber itself.\nThe environment variables I'm using:\n\n- `AWS_ACCESS_KEY_ID`\n- `AWS_REGION`\n- `AWS_SECRET_ACCESS_KEY`\n- `CHAMBER_KMS_KEY_ALIAS=aws/ssm`\n\n## Dockerfile Setup\n\nTo make running Chamber running more straightforward, I used the `segment/chamber` Docker image, copied the `/bin/chamber` binary into my image, and configured it to run it as a `ENTRYPOINT`.\n\n```dockerfile\nFROM segment/chamber:2.14 AS chamber\n\nFROM python:3.11-slim-buster AS dev\n\nFROM dev AS production\n...\nCOPY --from=chamber /chamber /bin/chamber\nENTRYPOINT [\"/bin/chamber\", \"exec\", \"django-news.com/production\", \"--\"]\n```\n\nI prefer to namespace these variables based on the project and the environment I'm referencing, like `django-news.com/production`.\n\nI am using a Docker entrypoint so that my secrets/environment variables work by default, whether running the image or overriding the default command, so I may shell into my container. \n\n## Docker Compose Setup\n\n```yml\nservices:\n  web:\n    entrypoint: /bin/chamber exec django-news.com/production --\n    command: gunicorn config.wsgi --bind 0.0.0.0:8000\n    ...\n```\n\nPlease note that the `entrypoint` line is optional if you set it in your `ENTRYPOINT` setting in your `DOCKERFILE`.\n\n## Using Chamber\n\nNow that you have seen how we use Chamber in Docker and Docker Compose, this is how we get things into Chamber.\n\n### Listing our projects\n\n```shell\n$ chamber list-services\n```\n\n```shell\n$ chamber list django-news.com/production\n```\n\n### Write new settings\n\n```shell\n$ chamber write django-news.com/production DJANGO_DEBUG true\n```\n\n### Delete an existing setting\n\n```shell\n$ chamber delete django-news.com/production DJANGO_DEBUG\n```\n\n### Export our settings into a dotenv (.env) file\n\n```shell\n$ chamber export --format=dotenv django-news.com/production\n```\n\n### Consuming an env variable from Django\n\nThe [`environs`](https://github.com/sloria/environs) project is my go-to for parsing environment variables. Here is an example of how to toggle Django's debug mode. \n\n```python\n# settings.py\nimport environs\n\nenv = environs.Env()\n\nDEBUG = env.bool(\"DJANGO_DEBUG\", default=False)\n```\n\n## Conclusion\n\nI'm happy to manage my environment variables from the command line without syncing files.\nUsing Chamber with KMS increased my monthly AWS bill by $0.01, which is money well spent for the flexibility of using Chamber.\n\n## Alternatives\n\nI had a good experience using the 1Password CLI for a recent client project to share and load secrets into the environment.\nIf you are working with a team, consider checking it out for your team in case it's a good fit. \nCheck out their [Load secrets into the environment](https://developer.1password.com/docs/cli/secrets-environment-variables/) docs.\n\n[chamber-docker]: https://hub.docker.com/r/segment/chamber\n[chamber-installing]: https://github.com/segmentio/chamber#installing\n[chamber]: https://github.com/segmentio/chamber\n[watchtower]: https://github.com/containrrr/watchtower\n",
				"date_published": "2024-02-21T23:01:19-05:00",
				"url": "https://micro.webology.dev/2024/02/21/using-chamber-with.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/20/transferred-djangorqemailbackend-found.html",
				"title": "Transferred - django-rq-email-backend found a new home",
				"content_html": "<p>A decade ago, I created <a href=\"%5Bhttps://github.com/knyghty/django-rq-email-backend%5D(https://github.com/knyghty/django-rq-email-backend)\"><code>django-rq-email-backend</code></a> for a few projects to queue emails to send without blocking one of my web server processes. I used the <a href=\"%5Bhttps://pypi.org/project/django-rq/%5D(https://pypi.org/project/django-rq/)\">Django RQ</a> background queue for a few projects, and it scratched an itch.</p>\n<p>It&rsquo;s a project that worked for a decade+ with only a bug or two over the years. I retired the project I built <code>django-rq-email-backend</code> for, and it&rsquo;s gathered dust ever since. I also stopped using Django RQ.</p>\n<p><a href=\"%5Bhttps://github.com/knyghty%5D(https://github.com/knyghty)\">Tom Carrick</a> reached out to me and asked me if I needed help or was open to giving it a new home. I was thankful to find someone who wanted to continue the project, so I transferred the repo and the <a href=\"%5Bhttps://pypi.org/project/django-rq-email-backend/%5D(https://pypi.org/project/django-rq-email-backend/)\">PyPI</a> publishing rights to Tom.</p>\n<p>Skip forward a few months; Tom has been running with the project and cutting new releases ever since. I felt comfortable transferring the project because I knew Tom from a few of his projects, and the project only appealed to a very niche audience.</p>\n<p>Thank you, Tom, for continuing the project.</p>\n",
				"content_text": "A decade ago, I created [`django-rq-email-backend`]([https://github.com/knyghty/django-rq-email-backend](https://github.com/knyghty/django-rq-email-backend)) for a few projects to queue emails to send without blocking one of my web server processes. I used the [Django RQ]([https://pypi.org/project/django-rq/](https://pypi.org/project/django-rq/)) background queue for a few projects, and it scratched an itch.\n\nIt's a project that worked for a decade+ with only a bug or two over the years. I retired the project I built `django-rq-email-backend` for, and it's gathered dust ever since. I also stopped using Django RQ.\n\n[Tom Carrick]([https://github.com/knyghty](https://github.com/knyghty)) reached out to me and asked me if I needed help or was open to giving it a new home. I was thankful to find someone who wanted to continue the project, so I transferred the repo and the [PyPI]([https://pypi.org/project/django-rq-email-backend/](https://pypi.org/project/django-rq-email-backend/)) publishing rights to Tom. \n\nSkip forward a few months; Tom has been running with the project and cutting new releases ever since. I felt comfortable transferring the project because I knew Tom from a few of his projects, and the project only appealed to a very niche audience. \n\nThank you, Tom, for continuing the project. \n",
				"date_published": "2024-02-20T17:45:48-05:00",
				"url": "https://micro.webology.dev/2024/02/20/transferred-djangorqemailbackend-found.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/19/django-ninja.html",
				"title": "ü•∑ Django Ninja",
				"content_html": "<p>I have heard good things about <a href=\"https://django-ninja.dev\">Django Ninja</a>, and I was looking for an excuse to try it out.</p>\n<p>One pain point is syncing production data to a local Django development website. Most of the time, I can dump a database and restore it locally. Sometimes, creating a REST endpoint and creating a local Django management command to consume that input is easier.</p>\n<p>That&rsquo;s what my example is doing here with Django Ninja.</p>\n<h2 id=\"schemaspy\"><code>schemas.py</code></h2>\n<p>If you have used <a href=\"https://www.django-rest-framework.org\">Django REST framework</a>&rsquo;s <a href=\"https://www.django-rest-framework.org/api-guide/serializers/#modelserializer\">ModelSerializer</a> before, you will feel at home with Django Ninja&rsquo;s <a href=\"https://django-ninja.dev/guides/response/django-pydantic/#modelschema\">ModelSchema</a>.</p>\n<p>A ModelSchema class can generate a schema from a Django model and only needs to know which Django model and which fields you want to be exposed to your endpoint.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#f92672\">from</span> ninja <span style=\"color:#f92672\">import</span> ModelSchema\n\n<span style=\"color:#f92672\">from</span> places.models <span style=\"color:#f92672\">import</span> Place\n\n\n<span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">PlaceSchema</span>(ModelSchema):\n    <span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">Meta</span>:\n        model <span style=\"color:#f92672\">=</span> Place\n        fields <span style=\"color:#f92672\">=</span> [\n            <span style=\"color:#e6db74\">&#34;name&#34;</span>,\n            <span style=\"color:#e6db74\">&#34;slug&#34;</span>,\n            <span style=\"color:#e6db74\">&#34;active&#34;</span>,\n            <span style=\"color:#e6db74\">&#34;place_id&#34;</span>,\n            <span style=\"color:#e6db74\">&#34;address&#34;</span>,\n            <span style=\"color:#f92672\">...</span>\n        ]\n</code></pre></div><h2 id=\"viewspy\"><code>views.py</code></h2>\n<p>Our Django Ninja view is going to going to query our database and return all of the active records in our <code>Place</code> model with respect to their creation date. Django Ninja will do the heavy lifting for us and apply our <code>PlaceSchema</code> which will return JSON data.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#f92672\">from</span> ninja <span style=\"color:#f92672\">import</span> Router\n<span style=\"color:#f92672\">from</span> ninja.pagination <span style=\"color:#f92672\">import</span> LimitOffsetPagination\n<span style=\"color:#f92672\">from</span> ninja.pagination <span style=\"color:#f92672\">import</span> paginate\n\n<span style=\"color:#f92672\">from</span> places.models <span style=\"color:#f92672\">import</span> Place\n<span style=\"color:#f92672\">from</span> places.schemas <span style=\"color:#f92672\">import</span> PlaceSchema\n\n\nrouter <span style=\"color:#f92672\">=</span> Router()\n\n\n<span style=\"color:#a6e22e\">@router</span><span style=\"color:#f92672\">.</span>get(<span style=\"color:#e6db74\">&#34;/places/&#34;</span>, response<span style=\"color:#f92672\">=</span>{<span style=\"color:#ae81ff\">200</span>: list[PlaceSchema]})\n<span style=\"color:#a6e22e\">@paginate</span>(LimitOffsetPagination)\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">list_places</span>(request):\n    qs <span style=\"color:#f92672\">=</span> Place<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>active()<span style=\"color:#f92672\">.</span>order_by(<span style=\"color:#e6db74\">&#34;-created&#34;</span>)\n    <span style=\"color:#66d9ef\">return</span> qs\n</code></pre></div><h2 id=\"routerspy\"><code>routers.py</code></h2>\n<p>This <code>routers.py</code> file is optional, but I prefer to keep my routers separate from my <code>urls.py</code>, and this felt cleaner. I would keep this code for a small app in my <code>urls.py</code> instead.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#f92672\">from</span> ninja <span style=\"color:#f92672\">import</span> NinjaAPI\n\n<span style=\"color:#f92672\">from</span> places.views <span style=\"color:#f92672\">import</span> router <span style=\"color:#66d9ef\">as</span> places_router\n\n<span style=\"color:#75715e\"># API setup</span>\napi <span style=\"color:#f92672\">=</span> NinjaAPI(csrf<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">True</span>, version<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;1.0.0&#34;</span>)\napi<span style=\"color:#f92672\">.</span>add_router(<span style=\"color:#e6db74\">&#34;&#34;</span>, places_router)\n</code></pre></div><h2 id=\"urlspy\"><code>urls.py</code></h2>\n<p>Our <code>urls.py</code> file is where we expose our router to the Internet so that our <code>/apis/places/</code> URI will be accessible to anyone who knows it&rsquo;s there.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#f92672\">...</span>\n<span style=\"color:#f92672\">from</span> places.views <span style=\"color:#f92672\">import</span> api\n<span style=\"color:#f92672\">...</span>\n\n\nurlpatterns <span style=\"color:#f92672\">=</span> [\n    <span style=\"color:#f92672\">...</span>\n    path(<span style=\"color:#e6db74\">&#34;apis/&#34;</span>, api<span style=\"color:#f92672\">.</span>urls),\n    <span style=\"color:#f92672\">...</span> \n]\n</code></pre></div><hr>\n<h2 id=\"import_from_productionpy\"><code>import_from_production.py</code></h2>\n<p>This is a reasonably common Django management command pattern that I write. I prefer to use <a href=\"https://github.com/GaretJax/django-click\">django-click</a> because the <a href=\"https://palletsprojects.com/p/click/\">click</a> simplifies how to write Python command line interfaces.</p>\n<p>We connect to our new endpoint, and if we get a good status code back, we will loop over our results and sync up our database with them.</p>\n<p>Please note: I didn&rsquo;t dive into how to do this security, but you will want to add some protection to your websites unless you are comfortable with it being public.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#f92672\">import</span> djclick <span style=\"color:#66d9ef\">as</span> click\n<span style=\"color:#f92672\">import</span> requests\n<span style=\"color:#f92672\">from</span> rich <span style=\"color:#f92672\">import</span> print\n\n<span style=\"color:#f92672\">from</span> places.models <span style=\"color:#f92672\">import</span> Place\n\n<span style=\"color:#75715e\"># Constants</span>\nAPI_URL <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;https://your-website.com/apis/places/&#34;</span>\n\n\n[<span style=\"color:#a6e22e\">@click</span>](https:<span style=\"color:#f92672\">//</span>micro<span style=\"color:#f92672\">.</span>blog<span style=\"color:#f92672\">/</span>click)()\n<span style=\"color:#a6e22e\">@click</span><span style=\"color:#f92672\">.</span>option(<span style=\"color:#e6db74\">&#34;--limit&#34;</span>, type<span style=\"color:#f92672\">=</span>int, default<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">100</span>)\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">command</span>(limit):\n    <span style=\"color:#75715e\"># Start a requests session</span>\n    <span style=\"color:#66d9ef\">with</span> requests<span style=\"color:#f92672\">.</span>Session() <span style=\"color:#66d9ef\">as</span> session:\n        <span style=\"color:#66d9ef\">try</span>:\n            params <span style=\"color:#f92672\">=</span> {<span style=\"color:#e6db74\">&#34;limit&#34;</span>: limit}\n            response <span style=\"color:#f92672\">=</span> session<span style=\"color:#f92672\">.</span>get(API_URL, params<span style=\"color:#f92672\">=</span>params)\n            response<span style=\"color:#f92672\">.</span>raise_for_status()\n\n            items <span style=\"color:#f92672\">=</span> response<span style=\"color:#f92672\">.</span>json()[<span style=\"color:#e6db74\">&#34;items&#34;</span>]\n            <span style=\"color:#66d9ef\">for</span> item <span style=\"color:#f92672\">in</span> items:\n                <span style=\"color:#66d9ef\">if</span> <span style=\"color:#e6db74\">&#34;name&#34;</span> <span style=\"color:#f92672\">in</span> item:\n                    name <span style=\"color:#f92672\">=</span> item[<span style=\"color:#e6db74\">&#34;name&#34;</span>]\n                    address <span style=\"color:#f92672\">=</span> item[<span style=\"color:#e6db74\">&#34;address&#34;</span>]\n\n                    defaults <span style=\"color:#f92672\">=</span> dict(item)\n\t\t\t\t\t<span style=\"color:#75715e\"># delete foreign keys\t</span>\n                    <span style=\"color:#66d9ef\">del</span> defaults[<span style=\"color:#e6db74\">&#34;cuisines&#34;</span>]\n                    <span style=\"color:#66d9ef\">del</span> defaults[<span style=\"color:#e6db74\">&#34;neighborhood&#34;</span>]\n\n                    <span style=\"color:#66d9ef\">try</span>:\n                        place, created <span style=\"color:#f92672\">=</span> Place<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>update_or_create(\n                            name<span style=\"color:#f92672\">=</span>name, address<span style=\"color:#f92672\">=</span>address, defaults<span style=\"color:#f92672\">=</span>defaults\n                        )\n                        print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;</span><span style=\"color:#e6db74\">{</span>name<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> :: </span><span style=\"color:#e6db74\">{</span>created<span style=\"color:#e6db74\">=}</span><span style=\"color:#e6db74\">&#34;</span>)\n\n                    <span style=\"color:#66d9ef\">except</span> <span style=\"color:#a6e22e\">Exception</span> <span style=\"color:#66d9ef\">as</span> e:\n                        print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;[red]</span><span style=\"color:#e6db74\">{</span>e<span style=\"color:#e6db74\">=}</span><span style=\"color:#e6db74\">[/red]&#34;</span>)\n\n        <span style=\"color:#66d9ef\">except</span> requests<span style=\"color:#f92672\">.</span>HTTPError <span style=\"color:#66d9ef\">as</span> http_err:\n            print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;HTTP error occurred: </span><span style=\"color:#e6db74\">{</span>http_err<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">&#34;</span>)\n\n        <span style=\"color:#66d9ef\">except</span> <span style=\"color:#a6e22e\">Exception</span> <span style=\"color:#66d9ef\">as</span> err:\n            print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;An error occurred: </span><span style=\"color:#e6db74\">{</span>err<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">&#34;</span>)\n</code></pre></div><h2 id=\"fin\">Fin</h2>\n<p>Overall, I&rsquo;m pretty happy with this pattern and Django Ninja. My only nitpick is that I wish that Django Ninja shipped with some class-based view batteries. I find them to be much easier to extend and work from than function-based views, but I&rsquo;m told some third-party apps are starting to help fill in this space.</p>\n",
				"content_text": "I have heard good things about [Django Ninja](https://django-ninja.dev), and I was looking for an excuse to try it out. \n\nOne pain point is syncing production data to a local Django development website. Most of the time, I can dump a database and restore it locally. Sometimes, creating a REST endpoint and creating a local Django management command to consume that input is easier. \n\nThat's what my example is doing here with Django Ninja. \n\n## `schemas.py`\n\nIf you have used [Django REST framework](https://www.django-rest-framework.org)'s [ModelSerializer](https://www.django-rest-framework.org/api-guide/serializers/#modelserializer) before, you will feel at home with Django Ninja's [ModelSchema](https://django-ninja.dev/guides/response/django-pydantic/#modelschema). \n\nA ModelSchema class can generate a schema from a Django model and only needs to know which Django model and which fields you want to be exposed to your endpoint. \n\n```python\nfrom ninja import ModelSchema\n\nfrom places.models import Place\n\n\nclass PlaceSchema(ModelSchema):\n    class Meta:\n        model = Place\n        fields = [\n            \"name\",\n            \"slug\",\n            \"active\",\n            \"place_id\",\n            \"address\",\n            ...\n        ]\n```\n\n## `views.py`\n\nOur Django Ninja view is going to going to query our database and return all of the active records in our `Place` model with respect to their creation date. Django Ninja will do the heavy lifting for us and apply our `PlaceSchema` which will return JSON data. \n\n```python\nfrom ninja import Router\nfrom ninja.pagination import LimitOffsetPagination\nfrom ninja.pagination import paginate\n\nfrom places.models import Place\nfrom places.schemas import PlaceSchema\n\n\nrouter = Router()\n\n\n@router.get(\"/places/\", response={200: list[PlaceSchema]})\n@paginate(LimitOffsetPagination)\ndef list_places(request):\n    qs = Place.objects.active().order_by(\"-created\")\n    return qs\n```\n\n## `routers.py`\n\nThis `routers.py` file is optional, but I prefer to keep my routers separate from my `urls.py`, and this felt cleaner. I would keep this code for a small app in my `urls.py` instead.\n\n```python\nfrom ninja import NinjaAPI\n\nfrom places.views import router as places_router\n\n# API setup\napi = NinjaAPI(csrf=True, version=\"1.0.0\")\napi.add_router(\"\", places_router)\n```\n\n\n## `urls.py`\n\nOur `urls.py` file is where we expose our router to the Internet so that our `/apis/places/` URI will be accessible to anyone who knows it's there. \n\n```python\n...\nfrom places.views import api\n...\n\n\nurlpatterns = [\n    ...\n    path(\"apis/\", api.urls),\n    ... \n]\n```\n\n----\n\n## `import_from_production.py`\n\nThis is a reasonably common Django management command pattern that I write. I prefer to use [django-click](https://github.com/GaretJax/django-click) because the [click](https://palletsprojects.com/p/click/) simplifies how to write Python command line interfaces. \n\nWe connect to our new endpoint, and if we get a good status code back, we will loop over our results and sync up our database with them. \n\nPlease note: I didn't dive into how to do this security, but you will want to add some protection to your websites unless you are comfortable with it being public. \n\n```python\nimport djclick as click\nimport requests\nfrom rich import print\n\nfrom places.models import Place\n\n# Constants\nAPI_URL = \"https://your-website.com/apis/places/\"\n\n\n[@click](https://micro.blog/click)()\n@click.option(\"--limit\", type=int, default=100)\ndef command(limit):\n    # Start a requests session\n    with requests.Session() as session:\n        try:\n            params = {\"limit\": limit}\n            response = session.get(API_URL, params=params)\n            response.raise_for_status()\n\n            items = response.json()[\"items\"]\n            for item in items:\n                if \"name\" in item:\n                    name = item[\"name\"]\n                    address = item[\"address\"]\n\n                    defaults = dict(item)\n\t\t\t\t\t# delete foreign keys\t\n                    del defaults[\"cuisines\"]\n                    del defaults[\"neighborhood\"]\n\n                    try:\n                        place, created = Place.objects.update_or_create(\n                            name=name, address=address, defaults=defaults\n                        )\n                        print(f\"{name} :: {created=}\")\n\n                    except Exception as e:\n                        print(f\"[red]{e=}[/red]\")\n\n        except requests.HTTPError as http_err:\n            print(f\"HTTP error occurred: {http_err}\")\n\n        except Exception as err:\n            print(f\"An error occurred: {err}\")\n```\n\n## Fin\n\nOverall, I'm pretty happy with this pattern and Django Ninja. My only nitpick is that I wish that Django Ninja shipped with some class-based view batteries. I find them to be much easier to extend and work from than function-based views, but I'm told some third-party apps are starting to help fill in this space. \n",
				"date_published": "2024-02-19T17:58:37-05:00",
				"url": "https://micro.webology.dev/2024/02/19/django-ninja.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/18/my-development-setup.html",
				"title": "My 2024 Development Setup",
				"content_html": "<p>I have wanted to document my development setup for a while to revisit it from time to time to see how my setup changes.</p>\n<h2 id=\"hardware\">Hardware</h2>\n<p>I&rsquo;m typing this from my couch on a MacBook Pro Intel/2019 model in Lawrence, KS.</p>\n<p>I&rsquo;m using a Mac Studio (M2/2023 model) at my office.</p>\n<p>I&rsquo;m using a Mac Mini Pro (M2/2023 model) in my home office.</p>\n<p>I&rsquo;m using an Intel Skull NUC (2017) and several Raspberry Pis (3s and 4s) wired to my router.</p>\n<p>After a few decades of working on a laptop, I recently switched to a desktop machine because I wanted to sit down at either machine and work without carrying anything around. With two kids, I&rsquo;m also juggling backpacks, water bottles, and whatever they need at school or preschool that day. Not having to worry about carrying anything is a huge mental weight off my shoulders.</p>\n<p>At home, I run three Dell S2722QC 27-inch 4K USB-C monitors and a 16&quot; portable monitor that I use as a dedicated iTerm display. At work, I use a pair of Monoprice 30&quot; monitors and another 16&quot; portable monitor for iTerm. At some point, I want to pick up the same Dell monitors for work.</p>\n<h2 id=\"software\">Software</h2>\n<p>Since 2007, I have preferred developing on macOS. I&rsquo;m running on macOS Ventura on everything, but I plan to migrate to macOS¬†Sonoma sooner rather than later.</p>\n<p>I use <a href=\"https://tailscale.com\">Tailscale</a>, so I can connect to any of my machines from anywhere. I can even connect from my iPhone or an iPad. If you have more than one machine, even if that machine is a Raspberry Pi, Tailscale is worth the ~5-minute install.</p>\n<p>I use <a href=\"https://www.alfredapp.com\">Alfred</a>, with some custom plugins, as my go-to &ldquo;do everything on macOS&rdquo; tool of choice.</p>\n<h2 id=\"themes\">Themes</h2>\n<p><a href=\"https://draculatheme.com/\">Dracula</a> is my favorite theme because it looks nice, and the community has built a theme for everything.</p>\n<h2 id=\"home\">Home</h2>\n<p>I run <a href=\"https://www.home-assistant.io\">Home Assistant</a> at home and have a love/meh relationship with it. I have a liberal usage of <a href=\"https://www.wyze.com\">Wyze cameras and gear</a>, doubling as kid/baby monitors and external perimeter coverage around our gates and cars.</p>\n<h2 id=\"backups\">Backups</h2>\n<p>Backups should be handled in layers:</p>\n<ul>\n<li>Quick local backups: Every Mac runs TimeMachine and backups to an encrypted, external drive. I built my NVMe backup drive solution that I will write about sometime.</li>\n<li>External, off-sight backups: I store external copies of my data on <a href=\"https://www.backblaze.com\">BackBlaze</a>.</li>\n<li>I keep a few big, noisy 8TB external backup drives for occasional snapshots.</li>\n</ul>\n<h2 id=\"file-syncing\">File Syncing</h2>\n<ul>\n<li>My documents are backed up to iCloud.</li>\n<li>I use <a href=\"https://syncthing.net\">Syncthing</a> to sync my Macs and NUC. I use this to sync projects across machines.</li>\n</ul>\n<h2 id=\"development\">Development</h2>\n<p><a href=\"https://www.sublimetext.com\">SublimeText</a> is my go-to text/code editor. Search is blazingly fast, runs amazingly well on both old and new hardware, and is a stable product.</p>\n<p>Almost every Django project I work on runs in a container using <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> or <a href=\"https://orbstack.dev\">Orbstack</a>. Orbstack is nice and fast, but I have many legacy projects in Docker, and the migration only worked so well.</p>\n<p>I use the <a href=\"https://github.com/github/scripts-to-rule-them-all\">&ldquo;scripts to rule them all&rdquo;</a> pattern because I work on tons of projects, and I never want to think twice about how to start, stop, update, open a console/shell, etc, and it does the job nicely. I will write about this later.</p>\n<p>I prefer to script project workflows using <a href=\"https://github.com/casey/just\">Just</a> because it&rsquo;s a one-file install that doesn&rsquo;t require a large development stack. It runs well both inside and outside of a container.</p>\n<p>I wrote another post about <a href=\"https://micro.webology.dev/2024/02/10/python-development-on.html\">Python Development on macOS Notes: pyenv and pyenv-virtualenvwrapper</a> setup.</p>\n<p>I use <a href=\"https://direnv.net\">direnv</a> to manage my environment variables.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Overall, I&rsquo;m pretty happy with everything. I would like the same Dell monitor setup for the office and a TS4 dock, but everything works.</p>\n",
				"content_text": "I have wanted to document my development setup for a while to revisit it from time to time to see how my setup changes. \n\n## Hardware\n\nI'm typing this from my couch on a MacBook Pro Intel/2019 model in Lawrence, KS. \n\nI'm using a Mac Studio (M2/2023 model) at my office. \n\nI'm using a Mac Mini Pro (M2/2023 model) in my home office. \n\nI'm using an Intel Skull NUC (2017) and several Raspberry Pis (3s and 4s) wired to my router.\n\nAfter a few decades of working on a laptop, I recently switched to a desktop machine because I wanted to sit down at either machine and work without carrying anything around. With two kids, I'm also juggling backpacks, water bottles, and whatever they need at school or preschool that day. Not having to worry about carrying anything is a huge mental weight off my shoulders. \n\nAt home, I run three Dell S2722QC 27-inch 4K USB-C monitors and a 16\" portable monitor that I use as a dedicated iTerm display. At work, I use a pair of Monoprice 30\" monitors and another 16\" portable monitor for iTerm. At some point, I want to pick up the same Dell monitors for work. \n\n## Software\n\nSince 2007, I have preferred developing on macOS. I'm running on macOS Ventura on everything, but I plan to migrate to macOS¬†Sonoma sooner rather than later. \n\nI use [Tailscale](https://tailscale.com), so I can connect to any of my machines from anywhere. I can even connect from my iPhone or an iPad. If you have more than one machine, even if that machine is a Raspberry Pi, Tailscale is worth the ~5-minute install.\n\nI use [Alfred](https://www.alfredapp.com), with some custom plugins, as my go-to \"do everything on macOS\" tool of choice. \n\n## Themes\n\n[Dracula](https://draculatheme.com/) is my favorite theme because it looks nice, and the community has built a theme for everything. \n\n## Home\n\nI run [Home Assistant](https://www.home-assistant.io) at home and have a love/meh relationship with it. I have a liberal usage of [Wyze cameras and gear](https://www.wyze.com), doubling as kid/baby monitors and external perimeter coverage around our gates and cars. \n\n## Backups\n\nBackups should be handled in layers:\n- Quick local backups: Every Mac runs TimeMachine and backups to an encrypted, external drive. I built my NVMe backup drive solution that I will write about sometime.\n- External, off-sight backups: I store external copies of my data on [BackBlaze](https://www.backblaze.com). \n- I keep a few big, noisy 8TB external backup drives for occasional snapshots. \n\n## File Syncing\n\n- My documents are backed up to iCloud.\n- I use [Syncthing](https://syncthing.net) to sync my Macs and NUC. I use this to sync projects across machines.\n\n## Development\n\n[SublimeText](https://www.sublimetext.com) is my go-to text/code editor. Search is blazingly fast, runs amazingly well on both old and new hardware, and is a stable product. \n\nAlmost every Django project I work on runs in a container using [Docker Compose](https://docs.docker.com/compose/) or [Orbstack](https://orbstack.dev). Orbstack is nice and fast, but I have many legacy projects in Docker, and the migration only worked so well. \n\nI use the [\"scripts to rule them all\"](https://github.com/github/scripts-to-rule-them-all) pattern because I work on tons of projects, and I never want to think twice about how to start, stop, update, open a console/shell, etc, and it does the job nicely. I will write about this later. \n\nI prefer to script project workflows using [Just](https://github.com/casey/just) because it's a one-file install that doesn't require a large development stack. It runs well both inside and outside of a container.\n\nI wrote another post about [Python Development on macOS Notes: pyenv and pyenv-virtualenvwrapper](https://micro.webology.dev/2024/02/10/python-development-on.html) setup.\n\nI use [direnv](https://direnv.net) to manage my environment variables. \n\n## Conclusion \n\nOverall, I'm pretty happy with everything. I would like the same Dell monitor setup for the office and a TS4 dock, but everything works. \n",
				"date_published": "2024-02-18T22:39:06-05:00",
				"url": "https://micro.webology.dev/2024/02/18/my-development-setup.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/17/office-hours.html",
				"title": "Office Hours",
				"content_html": "<p>Please note: Just so you know, Grammarly told me my writing is fine. So please blame Grammarly and not me for the typos.</p>\n<p>Last summer, I started hosting Office Hours on Friday afternoons. The basic idea around hosting office hours was an excuse to work on various projects and invite people to join to work on whatever projects they wanted to end their week.</p>\n<p>Friday afternoons work well for me because I will have finished every task I wanted for the week, or anything left over will take me longer than an afternoon to complete, so I might as well start those on Monday instead.</p>\n<p>My first session had 3 to 6 people, and then each week started slowly growing, and our last session had ~15 people. While half of the people who join each week I have known and met outside of a computer, more than half of the people who have joined office hours I have never met in person before. We have had people from all over the world, including Africa, the UK, the Netherlands, India, and Alaska, join in to chat while working on projects.</p>\n<p>My humble goals for this time have always been to keep things light and serve as a welcoming space where people can join to discuss Python and Django, work on whatever project they want, and ask questions.</p>\n<p>My goal wasn&rsquo;t to build a community, even if it feels like one from seeing familiar faces week after week. So there is no Discord channel, mailing list, or iCal invite.</p>\n<p>Instead, I have a private GitHub gist with the invite details, the starting date + time, and a Zoom link. I DM people who ask or people find the link from having accessed it before. I have not optimized my process for growth, but it works.</p>\n<p>On weeks when my son has basketball practice, I have the freedom of moving the time around earlier or later, and to my surprise, a friendly group of people always join and trickle in over the time that I have to keep the Zoom meeting up.</p>\n<p>On weeks when I&rsquo;m out of town or need that Friday afternoon to hit a deadline, I update the gist to let people know that we&rsquo;ll meet again in a few weeks. The success of office hours is not forcing them and letting people know that we have them most weeks but not every week when something is up.</p>\n<p>I intentionally created a space where I don&rsquo;t have the pressure to feel &ldquo;on,&rdquo; which is why it works for me, and I hope people will attend, too. There is no agenda, and I do my best to ensure everyone can talk and feel included while hanging out.</p>\n<p>My stretch goal for 2024 might be to add a page on my website with the date of our next open hours that I can share with anyone curious. Maybe I&rsquo;ll even use a nice font for the page, but for now, I think the gist works as well as anything.</p>\n",
				"content_text": "Please note: Just so you know, Grammarly told me my writing is fine. So please blame Grammarly and not me for the typos. \r\n\r\nLast summer, I started hosting Office Hours on Friday afternoons. The basic idea around hosting office hours was an excuse to work on various projects and invite people to join to work on whatever projects they wanted to end their week. \r\n\r\nFriday afternoons work well for me because I will have finished every task I wanted for the week, or anything left over will take me longer than an afternoon to complete, so I might as well start those on Monday instead. \r\n\r\nMy first session had 3 to 6 people, and then each week started slowly growing, and our last session had ~15 people. While half of the people who join each week I have known and met outside of a computer, more than half of the people who have joined office hours I have never met in person before. We have had people from all over the world, including Africa, the UK, the Netherlands, India, and Alaska, join in to chat while working on projects. \r\n\r\nMy humble goals for this time have always been to keep things light and serve as a welcoming space where people can join to discuss Python and Django, work on whatever project they want, and ask questions. \r\n\r\nMy goal wasn't to build a community, even if it feels like one from seeing familiar faces week after week. So there is no Discord channel, mailing list, or iCal invite. \r\n\r\nInstead, I have a private GitHub gist with the invite details, the starting date + time, and a Zoom link. I DM people who ask or people find the link from having accessed it before. I have not optimized my process for growth, but it works. \r\n\r\nOn weeks when my son has basketball practice, I have the freedom of moving the time around earlier or later, and to my surprise, a friendly group of people always join and trickle in over the time that I have to keep the Zoom meeting up. \r\n\r\nOn weeks when I'm out of town or need that Friday afternoon to hit a deadline, I update the gist to let people know that we'll meet again in a few weeks. The success of office hours is not forcing them and letting people know that we have them most weeks but not every week when something is up. \r\n\r\nI intentionally created a space where I don't have the pressure to feel \"on,\" which is why it works for me, and I hope people will attend, too. There is no agenda, and I do my best to ensure everyone can talk and feel included while hanging out. \r\n\r\nMy stretch goal for 2024 might be to add a page on my website with the date of our next open hours that I can share with anyone curious. Maybe I'll even use a nice font for the page, but for now, I think the gist works as well as anything. \n",
				"date_published": "2024-02-17T20:51:55-05:00",
				"url": "https://micro.webology.dev/2024/02/17/office-hours.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/16/more-funding-and.html",
				"title": "More funding and less shaming",
				"content_html": "<p>Note: I deleted &gt;1000 words and decided to post a summary instead.</p>\n<p>Jacob Kaplan Moss slacked me his <a href=\"https://jacobian.org/2024/feb/16/paying-maintainers-is-good/\">article</a> today because he knew I&rsquo;d like it, and we have both had ongoing conversations for years about open-source Funding. \nIt&rsquo;s worth reading.</p>\n<p>I mistakenly submitted the article to the orange website because I assumed someone else already had it.\n<a href=\"https://news.ycombinator.com/item?id=39402101\">Oops.</a></p>\n<p>I support funding open-source projects.\nWe are trillions of dollars away from providing enough Funding for open-source software before I have the patience to set through any debates about the right or wrong way to fund them. \nLet&rsquo;s make a few decades of overfunding mistakes first and then write about how to fix them after there&rsquo;s enough money flowing to make up for three decades of nothing.</p>\n<p>No one owns the term open source despite the good intentions of organizations that were formed to market open source to businesses. \nWhile the foundations focused their energies on infighting, shaming companies founded on open source projects, fundraising to big tech companies, and refusing to address developer&rsquo;s real needs, developers kept writing and releasing open source projects, and we all moved on.</p>\n<p>I started releasing and licensing projects as GPL in the 90s, MIT in the 00s, BSD in the 10s, and now I lean more towards PolyForm and the licenses that push back against Cloud companies. \nAs an open-source developer, I have rights and never asked for anything outside of attribution. \nThe organizations that claim to understand what open source is lost their way and lost their right to assert that they know and understand what open source software is and means.</p>\n<p>To wrap this up, because it was a long week, we need less shaming and more funding for open source projects and their maintainers.</p>\n",
				"content_text": "Note: I deleted >1000 words and decided to post a summary instead. \r\n\r\nJacob Kaplan Moss slacked me his [article](https://jacobian.org/2024/feb/16/paying-maintainers-is-good/) today because he knew I'd like it, and we have both had ongoing conversations for years about open-source Funding. \r\nIt's worth reading. \r\n\r\nI mistakenly submitted the article to the orange website because I assumed someone else already had it.\r\n[Oops.](https://news.ycombinator.com/item?id=39402101)\r\n\r\nI support funding open-source projects.\r\nWe are trillions of dollars away from providing enough Funding for open-source software before I have the patience to set through any debates about the right or wrong way to fund them. \r\nLet's make a few decades of overfunding mistakes first and then write about how to fix them after there's enough money flowing to make up for three decades of nothing. \r\n\r\nNo one owns the term open source despite the good intentions of organizations that were formed to market open source to businesses. \r\nWhile the foundations focused their energies on infighting, shaming companies founded on open source projects, fundraising to big tech companies, and refusing to address developer's real needs, developers kept writing and releasing open source projects, and we all moved on. \r\n\r\nI started releasing and licensing projects as GPL in the 90s, MIT in the 00s, BSD in the 10s, and now I lean more towards PolyForm and the licenses that push back against Cloud companies. \r\nAs an open-source developer, I have rights and never asked for anything outside of attribution. \r\nThe organizations that claim to understand what open source is lost their way and lost their right to assert that they know and understand what open source software is and means. \r\n\r\nTo wrap this up, because it was a long week, we need less shaming and more funding for open source projects and their maintainers. \n",
				"date_published": "2024-02-17T00:36:34-05:00",
				"url": "https://micro.webology.dev/2024/02/16/more-funding-and.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/15/the-daco-stack.html",
				"title": "The DACO Stack",
				"content_html": "<p>For the last few months, I have used the Django + Adam Johnson + Carlton Gibson + Oliver Andrich stack, or what I&rsquo;m calling the DACO stack. Maybe the DjACO stack rolls off the tongue more easily.</p>\n<p>The DACO stack combines new Django tech with wrappers around libraries like Heroicons, TailwindCSS, and htmx, which integrates a nice modern front-end development experience with Django.</p>\n<h2 id=\"carltongibsonneapolitan\"><code>carltongibson/neapolitan</code></h2>\n<p>The <a href=\"https://github.com/carltongibson/neapolitan\">Neapolitan</a> project brings CRUD views to Django in what feels like a marriage between the Django Admin meets Django Rest Framework&rsquo;s model viewsets but focused on the front-end. Neapolitan gives you CRUD views for your application in a few lines of Python code.</p>\n<p>I have used it on several projects where I wanted to quickly build a front end around some data and give a limited number of people access to help maintain it.</p>\n<h2 id=\"adamchainzdjango-htmx\"><code>adamchainz/django-htmx</code></h2>\n<p>Adam&rsquo;s <code>django-htmx</code> adds htmx support to Django.</p>\n<p><a href=\"https://github.com/adamchainz/django-htmx\">https://github.com/adamchainz/django-htmx</a></p>\n<h2 id=\"carltongibsondjango-template-partials\"><code>carltongibson/django-template-partials</code></h2>\n<p>Carlton&rsquo;s <code>django-template-partials</code> project helps create reusable inline template blocks. When paired with <code>django-htmx</code>, we can render a form, search results, and individual table rows without rewriting the web page.</p>\n<p><a href=\"https://github.com/carltongibson/django-template-partials\">https://github.com/carltongibson/django-template-partials</a></p>\n<h2 id=\"adamchainzheroicons\"><code>adamchainz/heroicons</code></h2>\n<p>Adam brings the <a href=\"https://heroicons.com\">Heroicons</a> library to Django, a series of SVG images that are nice for navigation menus and anywhere you might want to embed an icon image quickly. Heroicons is one of my goto libraries for quickly adding extra polish for apps that I might normally fall back to boring text links.</p>\n<p><a href=\"https://github.com/adamchainz/heroicons\">https://github.com/adamchainz/heroicons</a></p>\n<h2 id=\"oliverandrichdjango-tailwind-cli\"><code>oliverandrich/django-tailwind-cli</code></h2>\n<p>Oliver&rsquo;s <code>django-tailwind-cli</code> project integrates Tailwind CSS\ninto Django, includes a live reload server, and enables <code>python manage.py tailwind</code> to work.</p>\n<p><a href=\"https://github.com/oliverandrich/django-tailwind-cli\">https://github.com/oliverandrich/django-tailwind-cli</a></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Try the DACO stack and let me know if it saves you time and if you find some new tools to add to it.</p>\n",
				"content_text": "For the last few months, I have used the Django + Adam Johnson + Carlton Gibson + Oliver Andrich stack, or what I'm calling the DACO stack. Maybe the DjACO stack rolls off the tongue more easily. \n\nThe DACO stack combines new Django tech with wrappers around libraries like Heroicons, TailwindCSS, and htmx, which integrates a nice modern front-end development experience with Django. \n\n## `carltongibson/neapolitan`\n\nThe [Neapolitan](https://github.com/carltongibson/neapolitan) project brings CRUD views to Django in what feels like a marriage between the Django Admin meets Django Rest Framework's model viewsets but focused on the front-end. Neapolitan gives you CRUD views for your application in a few lines of Python code. \n\nI have used it on several projects where I wanted to quickly build a front end around some data and give a limited number of people access to help maintain it. \n\n## `adamchainz/django-htmx`\n\nAdam's `django-htmx` adds htmx support to Django. \n\nhttps://github.com/adamchainz/django-htmx\n\n## `carltongibson/django-template-partials`\n\nCarlton's `django-template-partials` project helps create reusable inline template blocks. When paired with `django-htmx`, we can render a form, search results, and individual table rows without rewriting the web page. \n\nhttps://github.com/carltongibson/django-template-partials\n\n## `adamchainz/heroicons`\n\nAdam brings the [Heroicons](https://heroicons.com) library to Django, a series of SVG images that are nice for navigation menus and anywhere you might want to embed an icon image quickly. Heroicons is one of my goto libraries for quickly adding extra polish for apps that I might normally fall back to boring text links. \n\nhttps://github.com/adamchainz/heroicons\n\n## `oliverandrich/django-tailwind-cli`\n\nOliver's `django-tailwind-cli` project integrates Tailwind CSS \ninto Django, includes a live reload server, and enables `python manage.py tailwind` to work. \n\nhttps://github.com/oliverandrich/django-tailwind-cli\n\n## Conclusion \n\nTry the DACO stack and let me know if it saves you time and if you find some new tools to add to it. \n",
				"date_published": "2024-02-15T21:36:33-05:00",
				"url": "https://micro.webology.dev/2024/02/15/the-daco-stack.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/14/unrestricted.html",
				"title": "Unrestricted",
				"content_html": "<p>Content warning: Kansas City mass shooting.</p>\n<p>Today, I worked on a post to keep up my February streak going, and then my phone started buzzing from local friends because there was a mass shooting at a pep rally in Kansas City meant to celebrate our recent Super Bowl victory.</p>\n<p>I live in Lawrence, Kansas, just outside of Kansas City. I have friends who commute to Kansas City for jobs and dozens of friends who were at the parade today. Thankfully, none of them that I am aware of were hurt today.</p>\n<blockquote>\n<p>NAME REMOVED said her hospital enacted its mass casualty alert</p>\n</blockquote>\n<blockquote>\n<p>And children&rsquo;s mercy has taken in victims also üòî</p>\n</blockquote>\n<p>At least <a href=\"https://www.kansascity.com/news/local/article285484737.html\">22 people were injured, and at least one person died today</a> in my home state.</p>\n<p><a href=\"https://www.kansascity.com/news/local/article285498797.html#storylink=cpy\">Mass shooting injures 9 children, ages 6 to 15, at Chiefs Super Bowl rally on Wednesday</a></p>\n<p><a href=\"https://www.kansascity.com/news/local/crime/article285494757.html\">Johnson County mom dies in KC parade shooting.</a></p>\n<p>In 2015, Missouri had the <a href=\"https://en.wikipedia.org/wiki/Gun_violence_in_the_United_States_by_state#2015_data\">second-worst murder rate per capita</a> in the United States.</p>\n<p>In 2019, Missouri had the <a href=\"https://en.wikipedia.org/wiki/Gun_violence_in_the_United_States_by_state#2019_data\">4th worst murder rate per capita</a> in the United States despite its murder rate increasing in four years.</p>\n<p>Missouri has some of the <a href=\"https://en.wikipedia.org/wiki/Gun_laws_in_the_United_States_by_state#Missouri\">most unrestricted gun laws</a> in the United States.</p>\n<blockquote>\n<p>Seriously, the idea of going to any large gathering is never appealing anymore and this is the reason.</p>\n</blockquote>\n<p>My six-year-old told us tonight that he hoped he never gets shot and killed like the people in Kansas City were today. He heard about it at school and didn&rsquo;t want to play outside tonight.</p>\n<p>What a fucked up world we have created for kids today and ourselves.</p>\n",
				"content_text": "Content warning: Kansas City mass shooting.\r\n\r\nToday, I worked on a post to keep up my February streak going, and then my phone started buzzing from local friends because there was a mass shooting at a pep rally in Kansas City meant to celebrate our recent Super Bowl victory. \r\n\r\nI live in Lawrence, Kansas, just outside of Kansas City. I have friends who commute to Kansas City for jobs and dozens of friends who were at the parade today. Thankfully, none of them that I am aware of were hurt today. \r\n\r\n> NAME REMOVED said her hospital enacted its mass casualty alert\r\n\r\n> And children's mercy has taken in victims also üòî\r\n\r\nAt least [22 people were injured, and at least one person died today](https://www.kansascity.com/news/local/article285484737.html) in my home state. \r\n\r\n[Mass shooting injures 9 children, ages 6 to 15, at Chiefs Super Bowl rally on Wednesday](https://www.kansascity.com/news/local/article285498797.html#storylink=cpy)\r\n\r\n[Johnson County mom dies in KC parade shooting.](https://www.kansascity.com/news/local/crime/article285494757.html)\r\n\r\nIn 2015, Missouri had the [second-worst murder rate per capita](https://en.wikipedia.org/wiki/Gun_violence_in_the_United_States_by_state#2015_data) in the United States. \r\n\r\nIn 2019, Missouri had the [4th worst murder rate per capita](https://en.wikipedia.org/wiki/Gun_violence_in_the_United_States_by_state#2019_data) in the United States despite its murder rate increasing in four years. \r\n\r\nMissouri has some of the [most unrestricted gun laws](https://en.wikipedia.org/wiki/Gun_laws_in_the_United_States_by_state#Missouri) in the United States.\r\n\r\n> Seriously, the idea of going to any large gathering is never appealing anymore and this is the reason. \r\n\r\nMy six-year-old told us tonight that he hoped he never gets shot and killed like the people in Kansas City were today. He heard about it at school and didn't want to play outside tonight. \r\n\r\nWhat a fucked up world we have created for kids today and ourselves. \n",
				"date_published": "2024-02-14T20:19:09-05:00",
				"url": "https://micro.webology.dev/2024/02/14/unrestricted.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/13/over-lunch.html",
				"title": "Over lunch",
				"content_html": "<p>I caught up on a few videos over lunch while working on a few drafts for the week and wanted to share them.</p>\n<h2 id=\"jon-stewart-is-back-on-the-daily-show\">Jon Stewart is back on The Daily Show</h2>\n<p>The last time I could watch Jon Stewart on The Daily Show over lunch goes back almost a decade. Somehow, here we are again, yet midway through the episode, nothing has changed. Welcome back, Jon.</p>\n<p><a href=\"https://www.youtube.com/watch?v=NpBPm0b9deQ\">www.youtube.com/watch</a></p>\n<!-- raw HTML omitted -->\n<p>I also liked <a href=\"https://www.youtube.com/watch?v=zHLLxc2nuNM\">this interview</a> with Jon Stewart on why he&rsquo;s back.</p>\n<h2 id=\"levar-burtons-banned-book-rainbow\">Levar Burton&rsquo;s Banned Book Rainbow</h2>\n<p>I never thought I&rsquo;d <a href=\"https://www.instagram.com/p/C3CJlOtrql7/\">share a video post</a> from Instagram, yet here we are.</p>\n<p>Levar Burton continues to be America&rsquo;s voice of reason.</p>\n",
				"content_text": "I caught up on a few videos over lunch while working on a few drafts for the week and wanted to share them. \r\n\r\n## Jon Stewart is back on The Daily Show\r\n\r\nThe last time I could watch Jon Stewart on The Daily Show over lunch goes back almost a decade. Somehow, here we are again, yet midway through the episode, nothing has changed. Welcome back, Jon. \r\n\r\n[www.youtube.com/watch](https://www.youtube.com/watch?v=NpBPm0b9deQ)\r\n\r\n\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NpBPm0b9deQ?si=yPCb41JtBjEr84uY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n\r\n\r\nI also liked [this interview](https://www.youtube.com/watch?v=zHLLxc2nuNM) with Jon Stewart on why he's back.\r\n\r\n\r\n## Levar Burton's Banned Book Rainbow\r\n\r\nI never thought I'd [share a video post](https://www.instagram.com/p/C3CJlOtrql7/) from Instagram, yet here we are. \r\n\r\nLevar Burton continues to be America's voice of reason. \r\n\r\n",
				"date_published": "2024-02-13T13:16:47-05:00",
				"url": "https://micro.webology.dev/2024/02/13/over-lunch.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/12/year-in-review.html",
				"title": "Year in review 2023",
				"content_html": "<p>I write one of these posts every year, and I manage never to publish them. Since I&rsquo;m trying to write one post a day for all of February, tonight I was revisiting some of my drafts, and this felt like a very Monday post to dust off and publish.</p>\n<p>If 2023 had a theme, it was stepping down and stepping back.</p>\n<h2 id=\"family\">Family</h2>\n<ul>\n<li>üöô We took our first family trip with most of my immediate family for the first time in too many years in Surfside Beach, Texas</li>\n<li>üöô I bought a 2023 Subaru Ascent to replace my 2001 Nissan Pathfinder</li>\n<li>6Ô∏è‚É£ My oldest turned six and started Kindergarten</li>\n<li>2Ô∏è‚É£ My youngest turned two and started preschool</li>\n</ul>\n<h2 id=\"djangopython\">Django/Python</h2>\n<ul>\n<li>‚úÖ <a href=\"https://www.python.org/psf/board/#id3\">PSF Board</a>: I served two terms over five years and did not run for a third term. During my tenure, I served as Treasurer and then Vice Chair. I&rsquo;m still on the Code of Conduct WG but left the Fiscal and PyCon US Committees.</li>\n<li>‚úÖ <a href=\"https://www.defna.org/about/\">DEFNA</a>: I stepped down as president after eight years on the board. I technically stepped down two or three years ago, but I filled in for a year to help out while we transitioned back to running an in-person conference. I&rsquo;m still on the board and helping with DjangoCon US, but I&rsquo;m doing so with fewer balls in the air.</li>\n<li>üöÄ <a href=\"https://2023.djangocon.us\">DjangoCon US 2023</a>  We held a successful conference in Durham, North Carolina.</li>\n<li>üöÄ Launched <a href=\"https://jobs.django-news.com\">Django News Jobs</a></li>\n</ul>\n<h2 id=\"community\">Community</h2>\n<ul>\n<li>üéôÔ∏è Attended/co-hosted dozens of <a href=\"https://www.conferencechats.org\">Conference Chats</a> meetups</li>\n<li>üöÄ I started weekly(ish) office hours on Fridays as an excuse to work on projects and hang out with community members.</li>\n<li>üéüÔ∏è Attended <a href=\"https://us.pycon.org/2023/\">PyCon US</a> virtually</li>\n<li>üéüÔ∏è Attended <a href=\"https://2023.pygotham.tv\">PyGotham</a> virtually</li>\n<li>üéüÔ∏è Attended <a href=\"https://2023.djangocon.us\">DjangoCon US</a></li>\n<li>‚úèÔ∏è I joined a weekly writing group</li>\n<li>üé´ I joined a bunch of interesting Discord communities</li>\n</ul>\n",
				"content_text": "I write one of these posts every year, and I manage never to publish them. Since I'm trying to write one post a day for all of February, tonight I was revisiting some of my drafts, and this felt like a very Monday post to dust off and publish. \r\n\r\nIf 2023 had a theme, it was stepping down and stepping back.\r\n\r\n## Family \r\n\r\n- üöô We took our first family trip with most of my immediate family for the first time in too many years in Surfside Beach, Texas\r\n- üöô I bought a 2023 Subaru Ascent to replace my 2001 Nissan Pathfinder\r\n- 6Ô∏è‚É£ My oldest turned six and started Kindergarten\r\n- 2Ô∏è‚É£ My youngest turned two and started preschool\r\n\r\n## Django/Python\r\n\r\n- ‚úÖ [PSF Board](https://www.python.org/psf/board/#id3): I served two terms over five years and did not run for a third term. During my tenure, I served as Treasurer and then Vice Chair. I'm still on the Code of Conduct WG but left the Fiscal and PyCon US Committees.  \r\n- ‚úÖ [DEFNA](https://www.defna.org/about/): I stepped down as president after eight years on the board. I technically stepped down two or three years ago, but I filled in for a year to help out while we transitioned back to running an in-person conference. I'm still on the board and helping with DjangoCon US, but I'm doing so with fewer balls in the air. \r\n- üöÄ [DjangoCon US 2023](https://2023.djangocon.us)  We held a successful conference in Durham, North Carolina. \r\n- üöÄ Launched [Django News Jobs](https://jobs.django-news.com)\r\n\r\n## Community\r\n\r\n- üéôÔ∏è Attended/co-hosted dozens of [Conference Chats](https://www.conferencechats.org) meetups\r\n- üöÄ I started weekly(ish) office hours on Fridays as an excuse to work on projects and hang out with community members. \r\n- üéüÔ∏è Attended [PyCon US](https://us.pycon.org/2023/) virtually\r\n- üéüÔ∏è Attended [PyGotham](https://2023.pygotham.tv) virtually\r\n- üéüÔ∏è Attended [DjangoCon US](https://2023.djangocon.us) \r\n-  ‚úèÔ∏è I joined a weekly writing group\r\n- üé´ I joined a bunch of interesting Discord communities\r\n",
				"date_published": "2024-02-12T20:39:38-05:00",
				"url": "https://micro.webology.dev/2024/02/12/year-in-review.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/11/lets-talk-about.html",
				"title": "Let's Talk About Paying for Open Source",
				"content_html": "<p><strong>Disclosure:</strong> I wrote this quickly, proofed it via Grammarly, applied a few suggestions from ChatGPT, and revised it several times. The words and typos are still mine.</p>\n<p>Discussing funding within open-source communities is often a minefield of strong opinions, self-proclaimed expertise, and a need for practical, real-world experience. This landscape is fraught with contention and quick escalations, where the mere mention of project monetization can lead to widespread panic and criticism.</p>\n<p>Jacob Kaplan Moss <a href=\"https://social.jacobian.org/@jacob/111914179201102152\">hit the nail on the head with a post</a> that pretty much sums up the dilemma:</p>\n<blockquote>\n<p>&ldquo;Open source should keep going strong, and the folks behind it deserve a paycheck!&rdquo;</p>\n<p>But then when a maintainer tries adding paid features:<br>\n&ldquo;Hold up, not like that.&rdquo;</p>\n<p>Or when they join a big tech company:<br>\n&ldquo;Eh, still not like that.&rdquo;</p>\n<p>Or even when they accept some investment money:<br>\n&ldquo;Nope, not like that either.&rdquo;</p>\n</blockquote>\n<p>Everyone wants developers to get paid, but we are highly critical no matter their path.</p>\n<h2 id=\"why-im-all-for-paying-developers\">Why I&rsquo;m All for Paying Developers</h2>\n<p>Let me be clear: I&rsquo;m totally on board with developers getting paid for their hard work. Why? Because making open-source software is a lot like any other job‚Äîit takes time, skill, and a lot of effort. And just like any other job, it should come with some financial reward.</p>\n<p>Some folks worry that bringing money into the equation could change the spirit of open-source work. But here&rsquo;s the thing: anyone can pick up open-source projects. If a project starts going in a direction that doesn&rsquo;t sit right with the community, it can be forked. That&rsquo;s the beauty of open-source. Someone else can take the project and run with it in a new direction, ensuring that the project lives on.</p>\n<h2 id=\"the-great-thing-about-forks\">The Great Thing About Forks</h2>\n<p>This ability to fork a project is like a safety net. If a project starts to lose its way after being funded or commercialized, the community can fork the original code, make their version, and chart a new course.</p>\n<h2 id=\"finding-a-middle-ground\">Finding a Middle Ground</h2>\n<p>Let&rsquo;s not shy away from the money talk. Paying developers isn&rsquo;t just good for them and the entire open-source community. By finding ways to make open-source work financially sustainable, we&rsquo;re ensuring it stays strong, vibrant, and, most importantly, around for the long haul.</p>\n<p>The key is to keep talking about it, to be open to new ideas, and to remember that we all want the same thing: to keep open-source software accessible and sustainable.</p>\n",
				"content_text": "**Disclosure:** I wrote this quickly, proofed it via Grammarly, applied a few suggestions from ChatGPT, and revised it several times. The words and typos are still mine. \r\n\r\nDiscussing funding within open-source communities is often a minefield of strong opinions, self-proclaimed expertise, and a need for practical, real-world experience. This landscape is fraught with contention and quick escalations, where the mere mention of project monetization can lead to widespread panic and criticism.\r\n\r\nJacob Kaplan Moss [hit the nail on the head with a post](https://social.jacobian.org/@jacob/111914179201102152) that pretty much sums up the dilemma:\r\n\r\n> \"Open source should keep going strong, and the folks behind it deserve a paycheck!\"\r\n> \r\n> But then when a maintainer tries adding paid features:  \r\n> \"Hold up, not like that.\"\r\n> \r\n> Or when they join a big tech company:  \r\n> \"Eh, still not like that.\"\r\n> \r\n> Or even when they accept some investment money:  \r\n> \"Nope, not like that either.\"\r\n\r\nEveryone wants developers to get paid, but we are highly critical no matter their path. \r\n\r\n## Why I'm All for Paying Developers\r\n\r\nLet me be clear: I'm totally on board with developers getting paid for their hard work. Why? Because making open-source software is a lot like any other job‚Äîit takes time, skill, and a lot of effort. And just like any other job, it should come with some financial reward.\r\n\r\nSome folks worry that bringing money into the equation could change the spirit of open-source work. But here's the thing: anyone can pick up open-source projects. If a project starts going in a direction that doesn't sit right with the community, it can be forked. That's the beauty of open-source. Someone else can take the project and run with it in a new direction, ensuring that the project lives on.\r\n\r\n## The Great Thing About Forks\r\n\r\nThis ability to fork a project is like a safety net. If a project starts to lose its way after being funded or commercialized, the community can fork the original code, make their version, and chart a new course. \r\n\r\n## Finding a Middle Ground\r\n\r\nLet's not shy away from the money talk. Paying developers isn't just good for them and the entire open-source community. By finding ways to make open-source work financially sustainable, we're ensuring it stays strong, vibrant, and, most importantly, around for the long haul.\r\n\r\nThe key is to keep talking about it, to be open to new ideas, and to remember that we all want the same thing: to keep open-source software accessible and sustainable. \r\n",
				"date_published": "2024-02-11T17:09:46-05:00",
				"url": "https://micro.webology.dev/2024/02/11/lets-talk-about.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/10/python-development-on.html",
				"title": "Python Development on macOS Notes: pyenv and pyenv-virtualenvwrapper",
				"content_html": "<p>Here are my notes for using <a href=\"https://github.com/pyenv/pyenv\"><code>pyenv</code></a> and <a href=\"https://github.com/pyenv/pyenv-virtualenvwrapper\"><code>pyenv-virtualenvwrapper</code></a> on macOS.</p>\n<p>I use <code>pyenv</code> to install and manage multiple Python versions on the same machine. <code>pyenv</code> makes it possible to upgrade my default version of Python without breaking every project that was created with the older version until I&rsquo;m ready to upgrade them.</p>\n<p>I use <code>pyenv-virtualenvwrapper</code> to manage my projects. <code>pyenv-virtualenvwrapper</code> is a set of tools that make it easier to create, delete, copy, and manage Python virtual environments.</p>\n<h2 id=\"install-pyenv-through-homebrew\">Install pyenv through Homebrew</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">brew update\nbrew install pyenv\nbrew install pyenv-virtualenvwrapper\n</code></pre></div><h2 id=\"configuring-pyenv-to-work-with-my-shell\">Configuring pyenv to work with my shell</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\">## set a variable for finding pyenv</span>\nexport PYENV_ROOT<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;</span><span style=\"color:#e6db74\">${</span>HOME<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">/.pyenv&#34;</span>\n\n<span style=\"color:#75715e\"># 2024-02 Python  pyenv settings</span>\n<span style=\"color:#66d9ef\">if</span> command -v pyenv &gt; /dev/null; <span style=\"color:#66d9ef\">then</span>\n    eval <span style=\"color:#e6db74\">&#34;</span><span style=\"color:#66d9ef\">$(</span>pyenv init --path<span style=\"color:#66d9ef\">)</span><span style=\"color:#e6db74\">&#34;</span>;\n    eval <span style=\"color:#e6db74\">&#34;</span><span style=\"color:#66d9ef\">$(</span>pyenv init -<span style=\"color:#66d9ef\">)</span><span style=\"color:#e6db74\">&#34;</span>;\n    pyenv virtualenvwrapper_lazy\n<span style=\"color:#66d9ef\">fi</span>\n</code></pre></div><h2 id=\"install-the-latest-python-versions-using-pyenv\">Install the &ldquo;latest&rdquo; Python versions using pyenv</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># install latest Python 3.11</span>\npyenv install 3.11:latest\n\n<span style=\"color:#75715e\"># to see which version of 3.11 was installed</span>\npyenv latest 3.11\n&gt; 3.11.7\n\n<span style=\"color:#75715e\"># install latest Python 3.12</span>\npyenv install 3.12:latest\n\n<span style=\"color:#75715e\"># to see which version of 3.12 was installed</span>\npyenv latest 3.12\n&gt; 3.12.1\n\n<span style=\"color:#75715e\"># set each version globally to our latest python 3.x version</span>\npyenv global 3.11.7 3.12.1\n</code></pre></div><h2 id=\"upgrading-python-versions\">Upgrading Python versions</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">pyenv install --skip-existing 3.11:latest\npyenv install --skip-existing 3.12:latest\n</code></pre></div><h2 id=\"list-every-version-of-python-that-is-installable\">List every version of Python that is installable</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">pyenv install --list\n</code></pre></div><h2 id=\"list-every-installed-version-of-python\">List every installed version of Python</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">pyenv versions\n</code></pre></div>",
				"content_text": "Here are my notes for using [`pyenv`](https://github.com/pyenv/pyenv) and [`pyenv-virtualenvwrapper`](https://github.com/pyenv/pyenv-virtualenvwrapper) on macOS.\n\nI use `pyenv` to install and manage multiple Python versions on the same machine. `pyenv` makes it possible to upgrade my default version of Python without breaking every project that was created with the older version until I'm ready to upgrade them. \n\nI use `pyenv-virtualenvwrapper` to manage my projects. `pyenv-virtualenvwrapper` is a set of tools that make it easier to create, delete, copy, and manage Python virtual environments. \n\n## Install pyenv through Homebrew\n\n```shell\nbrew update\nbrew install pyenv\nbrew install pyenv-virtualenvwrapper\n```\n\n## Configuring pyenv to work with my shell\n\n```shell\n## set a variable for finding pyenv\nexport PYENV_ROOT=\"${HOME}/.pyenv\"\n\n# 2024-02 Python  pyenv settings\nif command -v pyenv > /dev/null; then\n    eval \"$(pyenv init --path)\";\n    eval \"$(pyenv init -)\";\n    pyenv virtualenvwrapper_lazy\nfi\n```\n\n## Install the \"latest\" Python versions using pyenv\n\n```shell\n# install latest Python 3.11\npyenv install 3.11:latest\n\n# to see which version of 3.11 was installed\npyenv latest 3.11\n> 3.11.7\n\n# install latest Python 3.12\npyenv install 3.12:latest\n\n# to see which version of 3.12 was installed\npyenv latest 3.12\n> 3.12.1\n\n# set each version globally to our latest python 3.x version\npyenv global 3.11.7 3.12.1\n```\n\n## Upgrading Python versions\n\n```shell\npyenv install --skip-existing 3.11:latest\npyenv install --skip-existing 3.12:latest\n```\n\n## List every version of Python that is installable\n\n```shell\npyenv install --list\n```\n\n## List every installed version of Python\n\n```shell\npyenv versions\n```\n",
				"date_published": "2024-02-10T21:04:43-05:00",
				"url": "https://micro.webology.dev/2024/02/10/python-development-on.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/10/emphasis-mine-i.html",
				
				"content_html": "<p>Emphasis mine.</p>\n<blockquote>\n<p>I had no free time, and it was another situation where most members were so incredible and energizing, but the <strong>few focused on taking and demanding became a breaking point. It was too much work for anyone not receiving compensation to keep up with.</strong> As an industry, <strong>I wish we were more mindful of the toll it takes to run communities and open-source projects.</strong> Because when we don‚Äôt have this insight and empathy, we are left with mega-corp-backed events not grounded in the sense of improving the spaces around us.</p>\n</blockquote>\n<p><a href=\"https://www.breakfastletters.com/killing-darlings\">www.breakfastletters.com/killing-d&hellip;</a></p>\n",
				"content_text": "Emphasis mine. \r\n\r\n> I had no free time, and it was another situation where most members were so incredible and energizing, but the **few focused on taking and demanding became a breaking point. It was too much work for anyone not receiving compensation to keep up with.** As an industry, **I wish we were more mindful of the toll it takes to run communities and open-source projects.** Because when we don‚Äôt have this insight and empathy, we are left with mega-corp-backed events not grounded in the sense of improving the spaces around us.\r\n\r\n[www.breakfastletters.com/killing-d...](https://www.breakfastletters.com/killing-darlings)\n",
				"date_published": "2024-02-10T14:20:17-05:00",
				"url": "https://micro.webology.dev/2024/02/10/emphasis-mine-i.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/09/fargo-season-i.html",
				
				"content_html": "<p>üì∫ Fargo Season 5 - I just started the new season this week, and it&rsquo;s already one of my favorite seasons, which is already a huge bar.</p>\n<p><a href=\"https://trakt.tv/shows/fargo/seasons/5\">trakt.tv/shows/far&hellip;</a></p>\n",
				"content_text": "üì∫ Fargo Season 5 - I just started the new season this week, and it's already one of my favorite seasons, which is already a huge bar. \r\n\r\n[trakt.tv/shows/far...](https://trakt.tv/shows/fargo/seasons/5)\n",
				"date_published": "2024-02-09T22:11:46-05:00",
				"url": "https://micro.webology.dev/2024/02/09/fargo-season-i.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/09/my-morning-routine.html",
				"title": "My Daily Routine 2024",
				"content_html": "<p>It&rsquo;s been a while since I wrote about my daily (previously morning) routine, which is fun to reflect on over the years.</p>\n<p>My morning starts around 6:30 am, and I usually sleep until about 6:45 am.</p>\n<ol>\n<li>make my bed</li>\n<li>pick out clothes</li>\n<li>quick shower</li>\n<li>put in my contacts, brush my teeth, comb my hair, and get dressed</li>\n<li>pour some coffee and milk for my daughter (she&rsquo;s two)</li>\n<li>make sure my son is up (he&rsquo;s six), and tell him the weather so he knows how to dress at 7 am</li>\n<li>get my daughter up and get her dressed</li>\n<li>help my daughter with her teeth and both kids with their hair</li>\n<li>hang out and some iPad time (20 to 30 minutes)</li>\n<li>five-minute warning goes off (young kids do well with timers) at 7:40 am</li>\n<li>put our tablets up, put on shoes, feed the dog, put on jackets or coats, get backpacks, and load the kids in the car at 7:45 am</li>\n<li>drop my son off at school</li>\n<li>drop my daughter off at preschool</li>\n<li>drive to the office or back home</li>\n<li>check email, social media, and see what&rsquo;s on deck for the day</li>\n<li>catch up on email or start client work at 8:30 am</li>\n<li>post my daily REVSYS standup update on Slack at 9 am</li>\n<li>twice a week, client standup meeting at 9:30 am,</li>\n<li>grab or make more coffee around 9:30 am,</li>\n<li>order lunch or make lunch plans at 11 am</li>\n<li>pick up lunch and work on something over lunch</li>\n<li>more client work at 12 pm or 12:30 pm</li>\n<li>head home to see my family at 4:30 pm or 5 pm,</li>\n<li>make dinner and eat between 5:15 pm and 6 pm</li>\n<li>family time and get the kids ready for the next day</li>\n<li>daughter&rsquo;s bedtime at 6 pm</li>\n<li>son&rsquo;s bedtime at 8 pm</li>\n<li>watch sports, stream something (normally Netflix), and I&rsquo;ll work on a side project or occasionally client work</li>\n<li>go to bed around 11 pm or midnight</li>\n</ol>\n<p>Previously: <a href=\"https://jefftriplett.com/2020/my-morning-routine/\">2020</a>,  <a href=\"https://jefftriplett.com/2018/my-morning-routine/\">2018</a></p>\n",
				"content_text": "It's been a while since I wrote about my daily (previously morning) routine, which is fun to reflect on over the years. \n\nMy morning starts around 6:30 am, and I usually sleep until about 6:45 am. \n\n1. make my bed\n2. pick out clothes\n3. quick shower\n4. put in my contacts, brush my teeth, comb my hair, and get dressed\n5. pour some coffee and milk for my daughter (she's two)\n6. make sure my son is up (he's six), and tell him the weather so he knows how to dress at 7 am\n7. get my daughter up and get her dressed\n8. help my daughter with her teeth and both kids with their hair\n9. hang out and some iPad time (20 to 30 minutes)\n10. five-minute warning goes off (young kids do well with timers) at 7:40 am \n12. put our tablets up, put on shoes, feed the dog, put on jackets or coats, get backpacks, and load the kids in the car at 7:45 am\n13. drop my son off at school\n14. drop my daughter off at preschool\n15. drive to the office or back home\n16. check email, social media, and see what's on deck for the day\n17. catch up on email or start client work at 8:30 am \n18. post my daily REVSYS standup update on Slack at 9 am\n19. twice a week, client standup meeting at 9:30 am, \n20. grab or make more coffee around 9:30 am, \n21. order lunch or make lunch plans at 11 am\n22. pick up lunch and work on something over lunch\n23. more client work at 12 pm or 12:30 pm\n24. head home to see my family at 4:30 pm or 5 pm, \n25. make dinner and eat between 5:15 pm and 6 pm\n26. family time and get the kids ready for the next day\n27. daughter's bedtime at 6 pm\n28. son's bedtime at 8 pm\n29. watch sports, stream something (normally Netflix), and I'll work on a side project or occasionally client work\n30. go to bed around 11 pm or midnight\n\nPreviously: [2020](https://jefftriplett.com/2020/my-morning-routine/),  [2018](https://jefftriplett.com/2018/my-morning-routine/)\n",
				"date_published": "2024-02-09T22:04:19-05:00",
				"url": "https://micro.webology.dev/2024/02/09/my-morning-routine.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/08/200501.html",
				"title": "Semi-Automate Copy-to-Clipboard Case Study",
				"content_html": "<p>A &ldquo;copy-to-clipboard&rdquo; automation is a web page with many formatted text and links that are easy to copy and paste into another application.</p>\n<p>My list of links will come from a database, CSV file, JSON file, frontmatter, or a third-party API, depending on what kind of project I am building out.\nOnce I have my list of links, my automation builds a nicely formatted message based on my link and a text template.</p>\n<h2 id=\"django-news\">Django News</h2>\n<p>For <a href=\"https://django-news.com\">Django News</a> and <a href=\"https://jobs.django-news.com\">Django News Jobs</a>, I built a few copy-to-clipboard pages to automate writing our weekly tweets for social media and grabbing jobs for our newsletter.</p>\n<p>Each newsletter has a title, issue, and description stored in our database, and I use a template like this snippet to build out our weekly announcements.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-html\" data-lang=\"html\">{% raw %}\nüéâ The Django News Newsletter {{ object.issue }}\n\n{{ object.issue.description }}\n\n[django-news.com/issues/](https://django-news.com/issues/){{ object.issue.number }}#start\n{% endraw %}\n</code></pre></div><p>The result, once published on Mastodon, looks like this: <a href=\"https://mastodon.social/@djangonews/111822690418364462\">mastodon.social/@djangone&hellip;</a></p>\n<h2 id=\"copy-to-clipboard-v2\">Copy-to-Clipboard v2</h2>\n<p>For my copy-to-clipboard v2, I added <a href=\"https://clipboardjs.com/\">clipboard.js</a>, a JavaScript library that can copy text with the click of a button instead of having to select text and then manually copy the text.</p>\n<p>I recently added the <a href=\"https://github.com/cloudfour/elastic-textarea\">elastic-textarea</a> web component, which resized the text box to fit the text and improved the visual appearance of the text areas.</p>\n<h2 id=\"djangocon-us\">DjangoCon US</h2>\n<p>For DjangoCon US, we have a half dozen copy-to-clipboard pages, which build messages to announce talks on <a href=\"https://2023.djangocon.us/speaking/twitter/\">social media</a> and build out the metadata we use in our <a href=\"https://www.youtube.com/playlist?list=PL2NFhrDSOxgX41jqYSi0HmO9Wsf6WDSmf\">YouTube videos</a>.</p>\n",
				"content_text": "A \"copy-to-clipboard\" automation is a web page with many formatted text and links that are easy to copy and paste into another application.\n\nMy list of links will come from a database, CSV file, JSON file, frontmatter, or a third-party API, depending on what kind of project I am building out.\nOnce I have my list of links, my automation builds a nicely formatted message based on my link and a text template. \n\n## Django News\n\nFor [Django News](https://django-news.com) and [Django News Jobs](https://jobs.django-news.com), I built a few copy-to-clipboard pages to automate writing our weekly tweets for social media and grabbing jobs for our newsletter. \n\nEach newsletter has a title, issue, and description stored in our database, and I use a template like this snippet to build out our weekly announcements.\n\n```html\n{% raw %}\nüéâ The Django News Newsletter {{ object.issue }}\n\n{{ object.issue.description }}\n\n[django-news.com/issues/](https://django-news.com/issues/){{ object.issue.number }}#start\n{% endraw %}\n```\n\nThe result, once published on Mastodon, looks like this: [mastodon.social/@djangone...](https://mastodon.social/@djangonews/111822690418364462)\n\n## Copy-to-Clipboard v2\n\nFor my copy-to-clipboard v2, I added [clipboard.js](https://clipboardjs.com/), a JavaScript library that can copy text with the click of a button instead of having to select text and then manually copy the text. \n\nI recently added the [elastic-textarea](https://github.com/cloudfour/elastic-textarea) web component, which resized the text box to fit the text and improved the visual appearance of the text areas. \n\n## DjangoCon US\n\nFor DjangoCon US, we have a half dozen copy-to-clipboard pages, which build messages to announce talks on [social media](https://2023.djangocon.us/speaking/twitter/) and build out the metadata we use in our [YouTube videos](https://www.youtube.com/playlist?list=PL2NFhrDSOxgX41jqYSi0HmO9Wsf6WDSmf). \n",
				"date_published": "2024-02-08T21:05:01-05:00",
				"url": "https://micro.webology.dev/2024/02/08/200501.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/08/semiautomate-copytoclipboard-case.html",
				"title": "Semi-Automate Copy-to-Clipboard Case Study",
				"content_html": "<p>A &ldquo;copy-to-clipboard&rdquo; automation is a web page with many formatted text and links that are easy to copy and paste into another application.</p>\n<p>My list of links will come from a database, CSV file, JSON file, frontmatter, or a third-party API, depending on what kind of project I am building out.\nOnce I have my list of links, my automation builds a nicely formatted message based on my link and a text template I write.</p>\n<p>For <a href=\"https://django-news.com\">Django News</a>, I automate writing our weekly tweets for social media using this technique.\nEach newsletter has a title, issue, and description stored in our database, and I use a template like this snippet to build out our weekly announcements.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-html\" data-lang=\"html\">{% raw %}\nüéâ The Django News Newsletter {{ object.issue }}\n\n{{ object.issue.description }}\n\n[django-news.com/issues/](https://django-news.com/issues/){{ object.issue.number }}#start\n{% endraw %}\n</code></pre></div><p>The result, once published on Mastodon, looks like this: <a href=\"https://mastodon.social/@djangonews/111822690418364462\">mastodon.social/@djangone&hellip;</a></p>\n<h2 id=\"copy-to-clipboard-v2\">Copy-to-Clipboard v2</h2>\n<p>My v2 innovation was adding the <a href=\"https://clipboardjs.com/\">clipboard.js</a> JavaScript library to press a button to copy the formatted text to my clipboard instead of selecting all of the text so that I could then copy all of the text inside the text box.</p>\n<p>I recently added the <a href=\"https://github.com/cloudfour/elastic-textarea\">elastic-textarea</a> web component, which resized the text box to grow or shrink around my formatted messages.</p>\n<h2 id=\"djangocon-us\">DjangoCon US</h2>\n<p>For DjangoCon US, we built several copy-to-clipboard pages, which build messages to announce talks on <a href=\"https://2023.djangocon.us/speaking/twitter/\">social media</a> and later help build the metadata we use in our <a href=\"https://www.youtube.com/playlist?list=PL2NFhrDSOxgX41jqYSi0HmO9Wsf6WDSmf\">YouTube videos</a>.</p>\n",
				"content_text": "A \"copy-to-clipboard\" automation is a web page with many formatted text and links that are easy to copy and paste into another application.\n\nMy list of links will come from a database, CSV file, JSON file, frontmatter, or a third-party API, depending on what kind of project I am building out.\nOnce I have my list of links, my automation builds a nicely formatted message based on my link and a text template I write.\n\nFor [Django News](https://django-news.com), I automate writing our weekly tweets for social media using this technique.\nEach newsletter has a title, issue, and description stored in our database, and I use a template like this snippet to build out our weekly announcements.\n\n```html\n{% raw %}\nüéâ The Django News Newsletter {{ object.issue }}\n\n{{ object.issue.description }}\n\n[django-news.com/issues/](https://django-news.com/issues/){{ object.issue.number }}#start\n{% endraw %}\n```\n\nThe result, once published on Mastodon, looks like this: [mastodon.social/@djangone...](https://mastodon.social/@djangonews/111822690418364462)\n\n## Copy-to-Clipboard v2\n\nMy v2 innovation was adding the [clipboard.js](https://clipboardjs.com/) JavaScript library to press a button to copy the formatted text to my clipboard instead of selecting all of the text so that I could then copy all of the text inside the text box.\n\nI recently added the [elastic-textarea](https://github.com/cloudfour/elastic-textarea) web component, which resized the text box to grow or shrink around my formatted messages.\n\n## DjangoCon US\n\nFor DjangoCon US, we built several copy-to-clipboard pages, which build messages to announce talks on [social media](https://2023.djangocon.us/speaking/twitter/) and later help build the metadata we use in our [YouTube videos](https://www.youtube.com/playlist?list=PL2NFhrDSOxgX41jqYSi0HmO9Wsf6WDSmf). \n",
				"date_published": "2024-02-08T20:26:58-05:00",
				"url": "https://micro.webology.dev/2024/02/08/semiautomate-copytoclipboard-case.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/07/the-power-of.html",
				"title": "The Power of Semi-Automation: Why Less Can Be More",
				"content_html": "<p>According to the <a href=\"https://en.wikipedia.org/wiki/Ninety%E2%80%93ninety_rule\">ninety-ninety rule</a>, the final 10 percent of code needed to automate a task completely can take up 90 percent of the development time. This disproportionate effort is why I recommend that everyone consider semi-automating tasks and skipping the last 10%.</p>\n<h2 id=\"quick-wins\">Quick wins</h2>\n<p>My goal with semi-automating tasks is to reduce the scope of a project to make automating the task easier and quicker.\nThe more mundane and repetitive the task, the more likely I will prioritize automating it.</p>\n<p>My favorite tasks to automate fall are quick wins or redundant processes.\nWe use Toggl at work to log our billable hours and time spent on various projects.\nWe have daily stand-ups in Slack, so everyone can keep up with everyone and be on the same page about vacations or might need another set of eyes on a project.</p>\n<p>Using the Toggl API, I wrote a Python script that exports my notes so I can copy and paste them into Slack.\nI wrote a Python stand-up script that I run daily to see my notes from the previous day or week.</p>\n<p>I could have over-engineered my script to attempt to post to Slack for me, but it turns out that all I needed was a better way to copy and paste from Toggl into Slack.</p>\n<h2 id=\"why-do-i-semi-automate-tasks\">Why do I semi-automate tasks?</h2>\n<p><strong>Semi-automation is easier.</strong> The benefit of semi-automating tasks is to reduce the scope to be a quick, productive win.</p>\n<p><strong>Semi-automation saves time.</strong> I often spend 30 minutes writing a Python script, saving me 15 minutes or more daily.</p>\n<p><strong>Semi-automation saves wasted effort.</strong> For my daily stand-up project, I can use an existing Python library to access the Toggl API and display all my entries for a day or range of dates.\nMost of the time, I will copy these notes as they are and paste them into Slack, or I will summarize them.</p>\n<p><strong>Semi-automation takes less maintenance.</strong> Since my Python script is wrapping an existing API, there is little to no maintenance.\nIf the author decides they don&rsquo;t want to maintain a Toggl library anymore, switching to another library is less effort and much less complex than if I were trying to maintain my library.</p>\n<p><strong>Semi-automation is often good enough.</strong> I thought about writing a Slackbot to post updates for me, but I quickly learned that it would be a bigger hassle and ultimately not worth the effort.\nMy most significant pain point was having to pull up Toggl to get information out of it, and with my stand-up script, I could focus on writing better summaries while logging my hours instead.</p>\n<h2 id=\"types-of-projects-i-like-to-semi-automate\">Types of projects I like to semi-automate</h2>\n<p>The projects I like to semi-automate are repetitive tasks I have to do daily, weekly, and frequent enough to warrant\nThe more repetitive a task is, the more likely I will write a Python script or <a href=\"https://github.com/casey/just\">casey/just</a> justfile recipe to automate it.</p>\n<ul>\n<li>&ldquo;copy to clipboard&rdquo; page</li>\n<li>my daily stand-ups and monthly reports, which I pull from Toggl</li>\n<li>use RSS feeds to help automate the collection of articles to review for a weekly newsletter</li>\n<li>use justfile recipes for every project and even system-level macOS updates, so I don&rsquo;t have to remember how to update or run my projects</li>\n</ul>\n<h2 id=\"migrating-unfinished-projects\">Migrating unfinished projects</h2>\n<p>Once I realized that some of my unfinished projects were too ambitious, I started revisiting them to reduce the scope to something I could semi-automate to complete them.</p>\n",
				"content_text": "According to the [ninety-ninety rule](https://en.wikipedia.org/wiki/Ninety%E2%80%93ninety_rule), the final 10 percent of code needed to automate a task completely can take up 90 percent of the development time. This disproportionate effort is why I recommend that everyone consider semi-automating tasks and skipping the last 10%. \n\n## Quick wins\n\nMy goal with semi-automating tasks is to reduce the scope of a project to make automating the task easier and quicker.\nThe more mundane and repetitive the task, the more likely I will prioritize automating it.\n\nMy favorite tasks to automate fall are quick wins or redundant processes.\nWe use Toggl at work to log our billable hours and time spent on various projects.\nWe have daily stand-ups in Slack, so everyone can keep up with everyone and be on the same page about vacations or might need another set of eyes on a project.\n\nUsing the Toggl API, I wrote a Python script that exports my notes so I can copy and paste them into Slack.\nI wrote a Python stand-up script that I run daily to see my notes from the previous day or week.\n\nI could have over-engineered my script to attempt to post to Slack for me, but it turns out that all I needed was a better way to copy and paste from Toggl into Slack.\n\n## Why do I semi-automate tasks?\n\n**Semi-automation is easier.** The benefit of semi-automating tasks is to reduce the scope to be a quick, productive win.\n\n**Semi-automation saves time.** I often spend 30 minutes writing a Python script, saving me 15 minutes or more daily.\n\n**Semi-automation saves wasted effort.** For my daily stand-up project, I can use an existing Python library to access the Toggl API and display all my entries for a day or range of dates.\nMost of the time, I will copy these notes as they are and paste them into Slack, or I will summarize them.\n\n**Semi-automation takes less maintenance.** Since my Python script is wrapping an existing API, there is little to no maintenance.\nIf the author decides they don't want to maintain a Toggl library anymore, switching to another library is less effort and much less complex than if I were trying to maintain my library.\n\n**Semi-automation is often good enough.** I thought about writing a Slackbot to post updates for me, but I quickly learned that it would be a bigger hassle and ultimately not worth the effort.\nMy most significant pain point was having to pull up Toggl to get information out of it, and with my stand-up script, I could focus on writing better summaries while logging my hours instead.\n\n## Types of projects I like to semi-automate\n\nThe projects I like to semi-automate are repetitive tasks I have to do daily, weekly, and frequent enough to warrant \nThe more repetitive a task is, the more likely I will write a Python script or [casey/just](https://github.com/casey/just) justfile recipe to automate it.\n\n- \"copy to clipboard\" page\n- my daily stand-ups and monthly reports, which I pull from Toggl\n- use RSS feeds to help automate the collection of articles to review for a weekly newsletter\n- use justfile recipes for every project and even system-level macOS updates, so I don't have to remember how to update or run my projects\n\n## Migrating unfinished projects\n\nOnce I realized that some of my unfinished projects were too ambitious, I started revisiting them to reduce the scope to something I could semi-automate to complete them. \n",
				"date_published": "2024-02-08T00:21:58-05:00",
				"url": "https://micro.webology.dev/2024/02/07/the-power-of.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/06/django-queryset-to.html",
				"title": "Django Queryset to Markdown Table",
				"content_html": "<p>Today, I asked on Mastodon if anyone knew of a good solution for generating a Markdown table from a Django queryset. Typically, people want to convert markdown into HTML, but this was a case where I needed to export data from Django to a static website.</p>\n<p>Not missing a beat, <a href=\"https://mastodon.social/@glasnt@cloudisland.nz/111886900012564229\">Katie McLaughlin</a> recommended the <a href=\"https://github.com/astanin/python-tabulate\">python-tabulate</a> library, which is what I was looking for.</p>\n<p>Since I was short on time tonight, I asked ChatGPT to:</p>\n<ol>\n<li>Write a queryset to markdown function using the Python tabulate library.</li>\n<li>Add Python types support (because it&rsquo;s 2024)</li>\n<li>Rewrite the docstring</li>\n</ol>\n<p>Once the code looked right, I loaded up my local copy of <a href=\"https://jobs.django-news.com\">Django News Jobs</a>, and I created a quick Django management command.</p>\n<p><a href=\"https://github.com/GaretJax/django-click\">django-click</a> is my go-to library for quickly writing CLI apps or what Django calls a management command. django-click reduces the boilerplate needed to write a management command down to one import, one decorator, and one function, and you get the best of the Python <a href=\"https://click.palletsprojects.com/en/8.1.x/\">click</a> library with everything Django has to offer.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># management/commands/table.py</span>\n\n<span style=\"color:#f92672\">import</span> djclick <span style=\"color:#66d9ef\">as</span> click\n\n<span style=\"color:#f92672\">from</span> django.db.models.query <span style=\"color:#f92672\">import</span> QuerySet\n<span style=\"color:#f92672\">from</span> tabulate <span style=\"color:#f92672\">import</span> tabulate\n\n<span style=\"color:#f92672\">from</span> jobs.models <span style=\"color:#f92672\">import</span> JobListing\n\n\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">queryset_to_markdown</span>(queryset: QuerySet, fields: list[str] <span style=\"color:#f92672\">|</span> <span style=\"color:#66d9ef\">None</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">None</span>) <span style=\"color:#f92672\">-&gt;</span> str:\n    <span style=\"color:#e6db74\">&#34;&#34;&#34;\n</span><span style=\"color:#e6db74\">    Convert a Django queryset to a markdown table using the tabulate library.\n</span><span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">    Args:\n</span><span style=\"color:#e6db74\">        queryset (QuerySet): The Django queryset to convert into a markdown table.\n</span><span style=\"color:#e6db74\">        fields (list[str] | None, optional): A list of strings specifying the model fields to include in the table.\n</span><span style=\"color:#e6db74\">            If None, all fields from the model will be included. Defaults to None.\n</span><span style=\"color:#e6db74\">\n</span><span style=\"color:#e6db74\">    Returns:\n</span><span style=\"color:#e6db74\">        str: A string representing the markdown table formatted according to GitHub-flavored Markdown.\n</span><span style=\"color:#e6db74\">    &#34;&#34;&#34;</span>\n\n    <span style=\"color:#75715e\"># If fields are not specified, use all fields from the model</span>\n    <span style=\"color:#66d9ef\">if</span> fields <span style=\"color:#f92672\">is</span> <span style=\"color:#66d9ef\">None</span>:\n        fields <span style=\"color:#f92672\">=</span> [field<span style=\"color:#f92672\">.</span>name <span style=\"color:#66d9ef\">for</span> field <span style=\"color:#f92672\">in</span> queryset<span style=\"color:#f92672\">.</span>model<span style=\"color:#f92672\">.</span>_meta<span style=\"color:#f92672\">.</span>fields]\n\n    <span style=\"color:#75715e\"># Prepare data for tabulation</span>\n    data <span style=\"color:#f92672\">=</span> []\n    <span style=\"color:#66d9ef\">for</span> obj <span style=\"color:#f92672\">in</span> queryset:\n        row <span style=\"color:#f92672\">=</span> [getattr(obj, field) <span style=\"color:#66d9ef\">for</span> field <span style=\"color:#f92672\">in</span> fields]\n        data<span style=\"color:#f92672\">.</span>append(row)\n\n    <span style=\"color:#75715e\"># Generate markdown table</span>\n    markdown_table <span style=\"color:#f92672\">=</span> tabulate(data, headers<span style=\"color:#f92672\">=</span>fields, tablefmt<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;github&#34;</span>)\n\n    <span style=\"color:#66d9ef\">return</span> markdown_table\n\n\n<span style=\"color:#a6e22e\">@click</span><span style=\"color:#f92672\">.</span>command()\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">command</span>():\n    job_listings <span style=\"color:#f92672\">=</span> JobListing<span style=\"color:#f92672\">.</span>objects<span style=\"color:#f92672\">.</span>all()<span style=\"color:#f92672\">.</span>active()<span style=\"color:#f92672\">.</span>order_by(<span style=\"color:#e6db74\">&#34;-published&#34;</span>)\n    print(queryset_to_markdown(job_listings, fields<span style=\"color:#f92672\">=</span>[<span style=\"color:#e6db74\">&#34;title&#34;</span>, <span style=\"color:#e6db74\">&#34;employer_name&#34;</span>]))\n</code></pre></div><p>Running <code>python manage.py table</code> gave me the following table. Please note: I removed the <code>employer_name</code> column to fit the output in my article.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Overall, I&rsquo;m happy with this approach. Django is an excellent framework for quickly prototyping and solving these problems.</p>\n<p>I decided to write a management command instead of a view because markdown tables are very readable from the command line. I plan to convert it to a Django view to automate embedding tables like this into other projects.</p>\n",
				"content_text": "Today, I asked on Mastodon if anyone knew of a good solution for generating a Markdown table from a Django queryset. Typically, people want to convert markdown into HTML, but this was a case where I needed to export data from Django to a static website. \n\nNot missing a beat, [Katie McLaughlin](https://mastodon.social/@glasnt@cloudisland.nz/111886900012564229) recommended the [python-tabulate](https://github.com/astanin/python-tabulate) library, which is what I was looking for.\n\nSince I was short on time tonight, I asked ChatGPT to:\n\n1. Write a queryset to markdown function using the Python tabulate library. \n2. Add Python types support (because it's 2024)\n3. Rewrite the docstring\n\nOnce the code looked right, I loaded up my local copy of [Django News Jobs](https://jobs.django-news.com), and I created a quick Django management command. \n\n[django-click](https://github.com/GaretJax/django-click) is my go-to library for quickly writing CLI apps or what Django calls a management command. django-click reduces the boilerplate needed to write a management command down to one import, one decorator, and one function, and you get the best of the Python [click](https://click.palletsprojects.com/en/8.1.x/) library with everything Django has to offer. \n\n```python\n# management/commands/table.py\n\nimport djclick as click\n\nfrom django.db.models.query import QuerySet\nfrom tabulate import tabulate\n\nfrom jobs.models import JobListing\n\n\ndef queryset_to_markdown(queryset: QuerySet, fields: list[str] | None = None) -> str:\n    \"\"\"\n    Convert a Django queryset to a markdown table using the tabulate library.\n\n    Args:\n        queryset (QuerySet): The Django queryset to convert into a markdown table.\n        fields (list[str] | None, optional): A list of strings specifying the model fields to include in the table.\n            If None, all fields from the model will be included. Defaults to None.\n\n    Returns:\n        str: A string representing the markdown table formatted according to GitHub-flavored Markdown.\n    \"\"\"\n\n    # If fields are not specified, use all fields from the model\n    if fields is None:\n        fields = [field.name for field in queryset.model._meta.fields]\n\n    # Prepare data for tabulation\n    data = []\n    for obj in queryset:\n        row = [getattr(obj, field) for field in fields]\n        data.append(row)\n\n    # Generate markdown table\n    markdown_table = tabulate(data, headers=fields, tablefmt=\"github\")\n\n    return markdown_table\n\n\n@click.command()\ndef command():\n    job_listings = JobListing.objects.all().active().order_by(\"-published\")\n    print(queryset_to_markdown(job_listings, fields=[\"title\", \"employer_name\"]))\n```\n\n\nRunning `python manage.py table` gave me the following table. Please note: I removed the `employer_name` column to fit the output in my article. \n\n<pre>\n| title                                               |\n|-----------------------------------------------------|\n| Software Engineer (Terraso)                         |\n| Django Fellow                                       |\n| Senior Django Developer for Boutique Digital Agency |\n| Software Engineer                                   |\n| Business Systems Analyst                            |\n| Python Django E-Commerce Full Stack                 |\n| Principal Software Engineer                         |\n| Michigan Online, Software Engineer                  |\n| Full Stack Python Developer                         |\n| Senior Backend Developer - Supportsite Team         |\n| Python Backend Developer                            |\n| Python / Django Developer (f/m/d)                   |\n| Full Stack Python Developer                         |\n| Software Engineer - Ubuntu Systems Management       |\n| Senior Python/Django Engineer                       |\n</pre>\n\nOverall, I'm happy with this approach. Django is an excellent framework for quickly prototyping and solving these problems. \n\nI decided to write a management command instead of a view because markdown tables are very readable from the command line. I plan to convert it to a Django view to automate embedding tables like this into other projects. \n",
				"date_published": "2024-02-06T22:24:25-05:00",
				"url": "https://micro.webology.dev/2024/02/06/django-queryset-to.html",
				"tags": ["Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/05/how-to-test.html",
				"title": "How to test with Django and pytest fixtures",
				"content_html": "<p>Here are some notes on how I like to write tests for a Django app that tests a model down to a view.</p>\n<h2 id=\"django-model--pytest-fixture\">Django Model + pytest Fixture</h2>\n<p>This part is a mouthful, but I prefer to use the <a href=\"https://github.com/model-bakers/model_bakery\">Model Bakery</a> library to automatically create instances of Django models (aka a fixture) with good test data instead of manually creating them. This approach saves time and adds some variety to my test data.</p>\n<p>We will also use the pytest fixture function to create and return an instance of a Django model using our Model Bakery fixture. This pytest fixture can be used in multiple test cases, ensuring consistency and reducing boilerplate code.</p>\n<p>Every app in my project contains a <code>fixtures.py</code> file. My news app has a <code>Category</code> and a <code>Post</code> model, and my fixture looks like this.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># news/tests/fixtures.py</span>\n\n<span style=\"color:#f92672\">import</span> pytest\n<span style=\"color:#f92672\">from</span> model_bakery <span style=\"color:#f92672\">import</span> baker\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>fixture()\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">category</span>(db):\n    <span style=\"color:#66d9ef\">return</span> baker<span style=\"color:#f92672\">.</span>make(<span style=\"color:#e6db74\">&#34;news.Category&#34;</span>, name<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;Category Name&#34;</span>)\n\n<span style=\"color:#a6e22e\">@pytest</span><span style=\"color:#f92672\">.</span>fixture()\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">post</span>(db, category):\n    <span style=\"color:#66d9ef\">return</span> baker<span style=\"color:#f92672\">.</span>make(<span style=\"color:#e6db74\">&#34;news.Post&#34;</span>, title<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;Post Title&#34;</span>, category<span style=\"color:#f92672\">=</span>category)\n</code></pre></div><p>Please note that a <code>post</code> fixture can accept <code>category</code> fixture as an argument.</p>\n<h2 id=\"configuration\">Configuration</h2>\n<p>At the top of my project, we will have a <code>conftest.py</code> file. This is where we tell pytest to look for our fixtures so they may be automatically loaded.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># conftest.py</span>\npytest_plugins <span style=\"color:#f92672\">=</span> [<span style=\"color:#e6db74\">&#34;news.tests.fixtures&#34;</span>]\n</code></pre></div><h2 id=\"testing-our-models\">Testing our models</h2>\n<p>Next, we write a very basic test to ensure our fixture can create an instance of a model.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># news/tests/test_models.py</span>\n\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">test_get_category</span>(category):\n    <span style=\"color:#66d9ef\">assert</span> category<span style=\"color:#f92672\">.</span>name <span style=\"color:#f92672\">==</span> <span style=\"color:#e6db74\">&#34;Category Name&#34;</span>\n\n\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">test_get_post</span>(post):\n    <span style=\"color:#66d9ef\">assert</span> post<span style=\"color:#f92672\">.</span>title <span style=\"color:#f92672\">==</span> <span style=\"color:#e6db74\">&#34;Post Title&#34;</span>\n</code></pre></div><h2 id=\"testing-our-views\">Testing our views</h2>\n<p>I prefer working with <a href=\"https://github.com/revsys/django-test-plus\"><code>django-test-plus</code></a> because it helps make writing tests cleaner and more straightforward. Then, for every view we have, we will write a test to ensure that our URL patterns match our expected routes and that we return a predicted status code.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#75715e\"># news/tests/test_views.py</span>\n<span style=\"color:#f92672\">import</span> pytest\n\n<span style=\"color:#75715e\"># test that our view resolves to the right uri path</span>\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">test_post_uri</span>(tp):\n    expected_url <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;/&#34;</span>\n    reversed_url <span style=\"color:#f92672\">=</span> tp<span style=\"color:#f92672\">.</span>reverse(<span style=\"color:#e6db74\">&#34;post-list&#34;</span>)\n    <span style=\"color:#66d9ef\">assert</span> expected_url <span style=\"color:#f92672\">==</span> reversed_url\n\n<span style=\"color:#75715e\"># test that our view works</span>\n<span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">test_post_get</span>(db, tp):\n\tresponse <span style=\"color:#f92672\">=</span> tp<span style=\"color:#f92672\">.</span>get(<span style=\"color:#e6db74\">&#34;post-list&#34;</span>)\n    tp<span style=\"color:#f92672\">.</span>assert_http_200_ok(response)\n</code></pre></div><h2 id=\"running-tests\">Running tests</h2>\n<p>To run our tests, we can run pytest.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">pytest\n</code></pre></div>",
				"content_text": "Here are some notes on how I like to write tests for a Django app that tests a model down to a view. \n\n## Django Model + pytest Fixture\n\nThis part is a mouthful, but I prefer to use the [Model Bakery](https://github.com/model-bakers/model_bakery) library to automatically create instances of Django models (aka a fixture) with good test data instead of manually creating them. This approach saves time and adds some variety to my test data. \n\nWe will also use the pytest fixture function to create and return an instance of a Django model using our Model Bakery fixture. This pytest fixture can be used in multiple test cases, ensuring consistency and reducing boilerplate code. \n\nEvery app in my project contains a `fixtures.py` file. My news app has a `Category` and a `Post` model, and my fixture looks like this. \n\n```python\n# news/tests/fixtures.py\n\nimport pytest\nfrom model_bakery import baker\n\n@pytest.fixture()\ndef category(db):\n    return baker.make(\"news.Category\", name=\"Category Name\")\n\n@pytest.fixture()\ndef post(db, category):\n    return baker.make(\"news.Post\", title=\"Post Title\", category=category)\n```\n\nPlease note that a `post` fixture can accept `category` fixture as an argument.\n\n## Configuration \n\nAt the top of my project, we will have a `conftest.py` file. This is where we tell pytest to look for our fixtures so they may be automatically loaded.\n\n```python\n# conftest.py\npytest_plugins = [\"news.tests.fixtures\"]\n```\n\n## Testing our models\n\nNext, we write a very basic test to ensure our fixture can create an instance of a model. \n\n```python\n# news/tests/test_models.py\n\ndef test_get_category(category):\n    assert category.name == \"Category Name\"\n\n\ndef test_get_post(post):\n    assert post.title == \"Post Title\"\n```\n\n## Testing our views\n\nI prefer working with [`django-test-plus`](https://github.com/revsys/django-test-plus) because it helps make writing tests cleaner and more straightforward. Then, for every view we have, we will write a test to ensure that our URL patterns match our expected routes and that we return a predicted status code. \n\n```python\n# news/tests/test_views.py\nimport pytest\n\n# test that our view resolves to the right uri path\ndef test_post_uri(tp):\n    expected_url = \"/\"\n    reversed_url = tp.reverse(\"post-list\")\n    assert expected_url == reversed_url\n\n# test that our view works\ndef test_post_get(db, tp):\n\tresponse = tp.get(\"post-list\")\n    tp.assert_http_200_ok(response)\n```\n\n## Running tests\n\nTo run our tests, we can run pytest. \n\n```shell\npytest\n```\n  \n",
				"date_published": "2024-02-05T23:57:33-05:00",
				"url": "https://micro.webology.dev/2024/02/05/how-to-test.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/04/the-django-apps.html",
				"title": "The Django apps I actually use (rough cut)",
				"content_html": "<p>This is an updated version of my response to the <a href=\"https://forum.djangoproject.com/t/top-5-3rd-party-packages/391\">Top 5 3rd party packages</a> from the Django Forum.</p>\n<p>I plan on writing something more in-depth, but life, family, and getting the kids ready for the week got away from me today. Here is my list in case anyone finds them to be helpful.</p>\n<ul>\n<li><code>django-allauth</code></li>\n<li><code>django-click</code></li>\n<li><code>django-htmx</code></li>\n<li><code>django-q2</code></li>\n<li><code>django-test-plus</code></li>\n<li><code>django-tailwind-cli</code></li>\n<li><code>django-template-partials</code></li>\n<li><code>environs[django]</code></li>\n<li><code>heroicons[django]</code></li>\n<li><code>neapolitan</code></li>\n<li><code>python-slugify</code></li>\n<li><code>ruff</code> via <code>pre-commit</code> but previously was <code>black</code></li>\n<li><code>whitenoise</code></li>\n</ul>\n<h2 id=\"projects-i-no-longer-use\">Projects I no longer use</h2>\n<ul>\n<li><code>django-dbbackup</code> I dropped this app for <code>DSLR</code> and then I more recently dropped I dropped them both because I didn&rsquo;t want to install the extra Postgres files in my containers. I use <code>pg_backup</code>, <code>pg_restore</code>, and <code>psql</code> via the official</li>\n</ul>\n",
				"content_text": "This is an updated version of my response to the [Top 5 3rd party packages](https://forum.djangoproject.com/t/top-5-3rd-party-packages/391) from the Django Forum. \n\nI plan on writing something more in-depth, but life, family, and getting the kids ready for the week got away from me today. Here is my list in case anyone finds them to be helpful. \n\n- `django-allauth`\n- `django-click` \n- `django-htmx`\n- `django-q2`\n- `django-test-plus`\n- `django-tailwind-cli`\n- `django-template-partials`\n- `environs[django]`\n- `heroicons[django]`\n- `neapolitan`\n- `python-slugify`\n- `ruff` via `pre-commit` but previously was `black`\n- `whitenoise`\n\n## Projects I no longer use\n\n- `django-dbbackup` I dropped this app for `DSLR` and then I more recently dropped I dropped them both because I didn't want to install the extra Postgres files in my containers. I use `pg_backup`, `pg_restore`, and `psql` via the official \n",
				"date_published": "2024-02-05T00:20:30-05:00",
				"url": "https://micro.webology.dev/2024/02/04/the-django-apps.html",
				"tags": ["Django"]
			},
			{
				"id": "http://webology.micro.blog/2024/02/03/whats-your-goto.html",
				"title": "What‚Äôs Your Go-to Comfort Media? [rough cut]",
				"content_html": "<p>Everyone has unique ways of unwinding and finding comfort after a long day. My comfort media spans a wide range, from the passive consumption of TV shows to more engaging activities like gaming and listening to podcasts. Here&rsquo;s a glimpse into my go-to sources for comfort and relaxation.</p>\n<h2 id=\"screen-time-netflix-and-more\">Screen Time: Netflix and More</h2>\n<p>My comfort viewing typically involves having a series playing in the background from Netflix or another streaming platform. It&rsquo;s a form of passive binge-watching where my eyes might not always be on the screen, but my ears are tuned in, ready to engage fully when something catches my interest. Unlike music I can listen to on repeat, I rarely rewatch anything, seeking instead the familiar background noise of new episodes.</p>\n<h2 id=\"music-and-podcasts\">Music and Podcasts</h2>\n<p>Music has always been a constant companion for me. From the days in college when I discovered, I could write a paper while listening to <em>August and Everything After</em> by Counting Crows to now, having playlists and new artists filling a similar role. My music consumption is repetitive, often sticking to the same album or playlist for weeks.</p>\n<p>Podcasts also significantly influence my daily routine, offering various content from daily updates to weekly deep dives into fascinating subjects. They provide a mix of entertainment and information that fits perfectly into my schedule.</p>\n<h2 id=\"books-and-audiobooks\">Books and Audiobooks</h2>\n<p>Despite wishing I had spent more time reading books, my day is often consumed by reading code, documentation, and messages for work. By the evening, I find my brain craves less intense engagement, making it hard to commit to reading. However, audiobooks have found their place in my routine, especially during tasks like mowing the lawn or doing yard work, where they can offer a narrative escape.</p>\n<h2 id=\"gaming\">Gaming</h2>\n<p>Gaming, particularly on my Switch, offers a unique escapism that lets me shut off my brain from the day&rsquo;s worries. Over the holidays, diving into games like <em>Dave the Diver</em> provides a personal retreat and bonding activity with my son, exploring and completing tasks together.</p>\n<h2 id=\"sports\">Sports</h2>\n<p>Sports, especially basketball and football, serve as another layer of comfort media for me. There&rsquo;s something incredibly soothing about taking a Sunday nap with a football game playing in the background, providing a familiar, comforting backdrop to rest.</p>\n<hr>\n<p>This article was inspired by a post on <a href=\"https://kottke.org/24/01/whats-your-go-to-comfort-media\">Kottke.org</a>.</p>\n",
				"content_text": "Everyone has unique ways of unwinding and finding comfort after a long day. My comfort media spans a wide range, from the passive consumption of TV shows to more engaging activities like gaming and listening to podcasts. Here's a glimpse into my go-to sources for comfort and relaxation.\r\n\r\n## Screen Time: Netflix and More\r\n\r\nMy comfort viewing typically involves having a series playing in the background from Netflix or another streaming platform. It's a form of passive binge-watching where my eyes might not always be on the screen, but my ears are tuned in, ready to engage fully when something catches my interest. Unlike music I can listen to on repeat, I rarely rewatch anything, seeking instead the familiar background noise of new episodes.\r\n\r\n## Music and Podcasts\r\n\r\nMusic has always been a constant companion for me. From the days in college when I discovered, I could write a paper while listening to *August and Everything After* by Counting Crows to now, having playlists and new artists filling a similar role. My music consumption is repetitive, often sticking to the same album or playlist for weeks. \r\n\r\nPodcasts also significantly influence my daily routine, offering various content from daily updates to weekly deep dives into fascinating subjects. They provide a mix of entertainment and information that fits perfectly into my schedule.\r\n\r\n## Books and Audiobooks\r\n\r\nDespite wishing I had spent more time reading books, my day is often consumed by reading code, documentation, and messages for work. By the evening, I find my brain craves less intense engagement, making it hard to commit to reading. However, audiobooks have found their place in my routine, especially during tasks like mowing the lawn or doing yard work, where they can offer a narrative escape.\r\n\r\n## Gaming\r\n\r\nGaming, particularly on my Switch, offers a unique escapism that lets me shut off my brain from the day's worries. Over the holidays, diving into games like *Dave the Diver* provides a personal retreat and bonding activity with my son, exploring and completing tasks together. \r\n\r\n## Sports\r\n\r\nSports, especially basketball and football, serve as another layer of comfort media for me. There's something incredibly soothing about taking a Sunday nap with a football game playing in the background, providing a familiar, comforting backdrop to rest.\r\n\r\n---\r\n\r\nThis article was inspired by a post on [Kottke.org](https://kottke.org/24/01/whats-your-go-to-comfort-media).\n",
				"date_published": "2024-02-04T00:17:54-05:00",
				"url": "https://micro.webology.dev/2024/02/03/whats-your-goto.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/02/my-first-mac.html",
				"title": "My First Mac",
				"content_html": "<p>I saw <a href=\"https://daringfireball.net/linked/2024/01/22/upgrade-mac-40\">Jon Gruber&rsquo;s 40th Anniversary of the Macintosh</a> topic list last week, and I decided to share my own.</p>\n<h2 id=\"first-mac-owned\">First Mac owned</h2>\n<p>My first Mac was a 2005 Mac Mini G4.</p>\n<h2 id=\"favoritebest-mac\">Favorite/best Mac</h2>\n<p>I have always had good luck with my MacBook Pros, but my latest Mac Studio is my favorite. It&rsquo;s low/no-frills but has many ports, CPU cores, memory, and a headphone jack. It&rsquo;s a powerful and fast joy to use.</p>\n<h2 id=\"favoritebest-mac-software-ever\">Favorite/best Mac software ever</h2>\n<p><a href=\"https://www.macbartender.com\">Bartender</a> and <a href=\"https://www.alfredapp.com\">Alfred</a> are two of my favorite Mac apps. Both address shortcomings in macOS.</p>\n<p>The overall quality of most Mac apps is what won me over. My <a href=\"https://jefftriplett.com/2023/default-apps-2023/\">Default Apps 2023</a> article contains many of my favorite apps.</p>\n<h2 id=\"favoritebest-mac-accessory-or-hardware\">Favorite/best Mac accessory or hardware</h2>\n<p>Apple&rsquo;s Magic Keyboards are great. The iPad is a close second because it doubles as an external display.</p>\n<h2 id=\"hall-of-shame-worst-accessory-mac-or-moment\">Hall of Shame: worst accessory, Mac, or moment</h2>\n<p>Hand down my 2005 Mac Mini G4 shipped with Bluetooth support, which meant a Bluetooth keyboard and mouse would be with them. Not so much. I even paid way too much money for Apple&rsquo;s keyboard and mouse.</p>\n<p>My keyboards were PS2 then, so I had to travel to Best Buy to pick one up. Even once I had them working, the Bluetooth input lag was so slow and unresponsive that neither input device was stable. I still hate Apple mice to this day.</p>\n<p>I can&rsquo;t wholly blame the Mac Mini&rsquo;s Bluetooth support because that Mac Mini was so underpowered and had such a slow hard drive that it was barely usable. I wanted to use TextMate on it and have a decent development machine, but that was a challenge.</p>\n",
				"content_text": "I saw [Jon Gruber's 40th Anniversary of the Macintosh](https://daringfireball.net/linked/2024/01/22/upgrade-mac-40) topic list last week, and I decided to share my own. \r\n\r\n## First Mac owned\r\n\r\nMy first Mac was a 2005 Mac Mini G4. \r\n\r\n## Favorite/best Mac\r\n\r\nI have always had good luck with my MacBook Pros, but my latest Mac Studio is my favorite. It's low/no-frills but has many ports, CPU cores, memory, and a headphone jack. It's a powerful and fast joy to use. \r\n\r\n## Favorite/best Mac software ever\r\n\r\n[Bartender](https://www.macbartender.com) and [Alfred](https://www.alfredapp.com) are two of my favorite Mac apps. Both address shortcomings in macOS. \r\n\r\nThe overall quality of most Mac apps is what won me over. My [Default Apps 2023](https://jefftriplett.com/2023/default-apps-2023/) article contains many of my favorite apps. \r\n\r\n## Favorite/best Mac accessory or hardware\r\n\r\nApple's Magic Keyboards are great. The iPad is a close second because it doubles as an external display. \r\n\r\n## Hall of Shame: worst accessory, Mac, or moment\r\n\r\nHand down my 2005 Mac Mini G4 shipped with Bluetooth support, which meant a Bluetooth keyboard and mouse would be with them. Not so much. I even paid way too much money for Apple's keyboard and mouse. \r\n\r\nMy keyboards were PS2 then, so I had to travel to Best Buy to pick one up. Even once I had them working, the Bluetooth input lag was so slow and unresponsive that neither input device was stable. I still hate Apple mice to this day. \r\n\r\nI can't wholly blame the Mac Mini's Bluetooth support because that Mac Mini was so underpowered and had such a slow hard drive that it was barely usable. I wanted to use TextMate on it and have a decent development machine, but that was a challenge. \n",
				"date_published": "2024-02-02T22:56:07-05:00",
				"url": "https://micro.webology.dev/2024/02/02/my-first-mac.html"
			},
			{
				"id": "http://webology.micro.blog/2024/02/01/choosing-the-right.html",
				"title": "Choosing the Right Python and Django Versions for Your Projects",
				"content_html": "<p>When deciding when to adopt a new <em>major</em> or <em>minor</em> Python or Django version, I prefer to wait until the 3rd or 4th patch release because reliability significantly improves.</p>\n<p>Python and Django <code>{major}.{minor}.{patch&gt;2}</code> releases are always more stable than <code>{patch&lt;3}</code> releases.</p>\n<h3 id=\"understanding-version-numbers\">Understanding Version Numbers</h3>\n<p>Version numbers typically follow a <code>{major}.{minor}.{patch}</code> format. For instance, in Django 5.0.2, &ldquo;5&rdquo; is the major version, &ldquo;0&rdquo; the minor, and &ldquo;2&rdquo; the patch. I&rsquo;ve found that a version reaching its <code>.2</code> or <code>.3</code> patch release (like Django 5.0.2 or 5.0.3) is generally a reliable indicator of stability.</p>\n<h3 id=\"why-wait-for-the-3rd-or-4th-patch-release\">Why Wait for the 3rd or 4th Patch Release?</h3>\n<p>The early releases of any major software version can be unpredictable. Despite Python and Django&rsquo;s commendable track record for quality, the broader ecosystem of packages and tools that integrate with them often requires time to catch up. This adjustment period is critical for ensuring compatibility and stability, reducing the risk of unexpected issues in production environments.</p>\n<h3 id=\"my-experience\">My Experience</h3>\n<p>Through trial and error, I&rsquo;ve observed that holding off until at least the 2nd patch release mitigates around 90% of potential issues. However, waiting for the 3rd or 4th patch guarantees that most significant bugs have been fixed.</p>\n<h3 id=\"recommendations-for-implementation\">Recommendations for Implementation:</h3>\n<ul>\n<li>\n<p><strong>Stay Informed</strong>: Regularly review the release notes for Python and Django. This will help you understand the scope of changes and the introduction of any new features or critical fixes.</p>\n</li>\n<li>\n<p><strong>Use a Testing Matrix</strong>: If your project employs Continuous Integration (CI), include the latest versions of Python and Django in your testing matrix sooner rather than later. This proactive measure can help identify compatibility issues early, saving you time and reducing the risk of deploying unstable code to production.</p>\n</li>\n<li>\n<p><strong>Community Feedback</strong>: Pay attention to feedback from the Python and Django communities. I keep a good feel of the pulse by checking social media to see what developers are having issues with. I also like to check open and recently closed GitHub Issues and Pull Requests for packages I use to see what was broken by a new release and how to fix it.</p>\n</li>\n</ul>\n",
				"content_text": "When deciding when to adopt a new *major* or *minor* Python or Django version, I prefer to wait until the 3rd or 4th patch release because reliability significantly improves. \n\nPython and Django `{major}.{minor}.{patch>2}` releases are always more stable than `{patch<3}` releases. \n\n### Understanding Version Numbers\n\nVersion numbers typically follow a `{major}.{minor}.{patch}` format. For instance, in Django 5.0.2, \"5\" is the major version, \"0\" the minor, and \"2\" the patch. I've found that a version reaching its `.2` or `.3` patch release (like Django 5.0.2 or 5.0.3) is generally a reliable indicator of stability.\n\n### Why Wait for the 3rd or 4th Patch Release?\n\nThe early releases of any major software version can be unpredictable. Despite Python and Django's commendable track record for quality, the broader ecosystem of packages and tools that integrate with them often requires time to catch up. This adjustment period is critical for ensuring compatibility and stability, reducing the risk of unexpected issues in production environments.\n\n### My Experience\n\nThrough trial and error, I've observed that holding off until at least the 2nd patch release mitigates around 90% of potential issues. However, waiting for the 3rd or 4th patch guarantees that most significant bugs have been fixed. \n\n### Recommendations for Implementation:\n\n- **Stay Informed**: Regularly review the release notes for Python and Django. This will help you understand the scope of changes and the introduction of any new features or critical fixes.\n\n- **Use a Testing Matrix**: If your project employs Continuous Integration (CI), include the latest versions of Python and Django in your testing matrix sooner rather than later. This proactive measure can help identify compatibility issues early, saving you time and reducing the risk of deploying unstable code to production.\n\n- **Community Feedback**: Pay attention to feedback from the Python and Django communities. I keep a good feel of the pulse by checking social media to see what developers are having issues with. I also like to check open and recently closed GitHub Issues and Pull Requests for packages I use to see what was broken by a new release and how to fix it. \n",
				"date_published": "2024-02-02T00:32:08-05:00",
				"url": "https://micro.webology.dev/2024/02/01/choosing-the-right.html",
				"tags": ["Django","Python"]
			},
			{
				"id": "http://webology.micro.blog/2024/01/12/for-my-email.html",
				
				"content_html": "<p>üì´ For my email sanity, I just ran &ldquo;label:inbox before:2024/01/01&rdquo; and archived everything.</p>\n<p>‚úã If you emailed me and were expecting a reply, please ping me again.</p>\n<p>üî• This was unsustainable otherwise. üî•</p>\n",
				"content_text": "üì´ For my email sanity, I just ran \"label:inbox before:2024/01/01\" and archived everything. \r\n\r\n‚úã If you emailed me and were expecting a reply, please ping me again. \r\n\r\nüî• This was unsustainable otherwise. üî•\r\n",
				"date_published": "2024-01-12T14:09:51-05:00",
				"url": "https://micro.webology.dev/2024/01/12/for-my-email.html"
			},
			{
				"id": "http://webology.micro.blog/2024/01/07/for-anyone-who.html",
				
				"content_html": "<p>For anyone who is not prepared for our upcoming USB-C standardization, I had to pick up one of these USB-C cable testers last year to figure out why half of my cables don&rsquo;t work with specific devices despite everything being USB-C.</p>\n<p><a href=\"https://www.tindie.com/products/petl/usb-c-cable-tester-c2c-caberqu/\">www.tindie.com/products/&hellip;</a></p>\n",
				"content_text": "For anyone who is not prepared for our upcoming USB-C standardization, I had to pick up one of these USB-C cable testers last year to figure out why half of my cables don't work with specific devices despite everything being USB-C.\r\n\r\n[www.tindie.com/products/...](https://www.tindie.com/products/petl/usb-c-cable-tester-c2c-caberqu/)\n",
				"date_published": "2024-01-07T21:06:29-05:00",
				"url": "https://micro.webology.dev/2024/01/07/for-anyone-who.html"
			},
			{
				"id": "http://webology.micro.blog/2024/01/06/barbie-i-had.html",
				
				"content_html": "<p>üì∫ Barbie - I had no idea what this movie was about and yet it&rsquo;s been a total surprise at every step so far.</p>\n<p><a href=\"https://trakt.tv/movies/barbie-2023\">trakt.tv/movies/ba&hellip;</a></p>\n",
				"content_text": "üì∫ Barbie - I had no idea what this movie was about and yet it's been a total surprise at every step so far. \r\n\r\n[trakt.tv/movies/ba...](https://trakt.tv/movies/barbie-2023)\n",
				"date_published": "2024-01-06T21:48:26-05:00",
				"url": "https://micro.webology.dev/2024/01/06/barbie-i-had.html"
			},
			{
				"id": "http://webology.micro.blog/2024/01/02/this-morning-i.html",
				
				"content_html": "<p>‚úèÔ∏è This morning, I updated my Rustywind pre-commit hook to use the <code>latest</code> tag.</p>\n<p>üôè Thank you to <a href=\"https://micro.blog/danjac@masto.ai\">@danjac@masto.ai</a> for the mention, which prompted me to update it.</p>\n<p><a href=\"https://jefftriplett.com/2023/rustywind-pre-commit-hook/\">https://jefftriplett.com/2023/rustywind-pre-commit-hook/</a></p>\n",
				"content_text": "‚úèÔ∏è This morning, I updated my Rustywind pre-commit hook to use the `latest` tag. \r\n\r\nüôè Thank you to [@danjac@masto.ai](https://micro.blog/danjac@masto.ai) for the mention, which prompted me to update it. \r\n\r\nhttps://jefftriplett.com/2023/rustywind-pre-commit-hook/\n",
				"date_published": "2024-01-02T10:19:20-05:00",
				"url": "https://micro.webology.dev/2024/01/02/this-morning-i.html"
			},
			{
				"id": "http://webology.micro.blog/2024/01/01/rebel-moon-part.html",
				
				"content_html": "<p>üì∫ Rebel Moon - Part One: A Child of Fire - Ya, this is pretty bad, but not 23% Tomatometer bad, but we are definitely in that ballpark.</p>\n<p><a href=\"https://trakt.tv/movies/rebel-moon-part-one-a-child-of-fire-2023\">trakt.tv/movies/re&hellip;</a></p>\n",
				"content_text": "üì∫ Rebel Moon - Part One: A Child of Fire - Ya, this is pretty bad, but not 23% Tomatometer bad, but we are definitely in that ballpark. \n\n[trakt.tv/movies/re...](https://trakt.tv/movies/rebel-moon-part-one-a-child-of-fire-2023) \n",
				"date_published": "2024-01-02T00:36:19-05:00",
				"url": "https://micro.webology.dev/2024/01/01/rebel-moon-part.html",
				"tags": ["Movies"]
			},
			{
				"id": "http://webology.micro.blog/2024/01/01/the-last-of.html",
				
				"content_html": "<p>üì∫ The Last of Us - I finished Season 1 tonight, and I was expecting that. I will admit to being a little tired of the zombie series genre, but this is the most un-zombie series I have ever seen. I now understand how the video game was such a hit.</p>\n<p><a href=\"https://trakt.tv/shows/the-last-of-us/seasons/1\">trakt.tv/shows/the&hellip;</a></p>\n",
				"content_text": "üì∫ The Last of Us - I finished Season 1 tonight, and I was expecting that. I will admit to being a little tired of the zombie series genre, but this is the most un-zombie series I have ever seen. I now understand how the video game was such a hit.\n\n[trakt.tv/shows/the...](https://trakt.tv/shows/the-last-of-us/seasons/1)\n",
				"date_published": "2024-01-01T23:34:02-05:00",
				"url": "https://micro.webology.dev/2024/01/01/the-last-of.html",
				"tags": ["Shows"]
			},
			{
				"id": "http://webology.micro.blog/2023/12/31/testing-out-my.html",
				
				"content_html": "<p>Testing out my new micro-blog: <a href=\"https://webology.micro.blog\">webology.micro.blog</a>, which I&rsquo;m planning on using to cross-post more. The verdict is still out after a really rocky start, but I&rsquo;m hopeful ü§û</p>\n",
				"content_text": "Testing out my new micro-blog: [webology.micro.blog](https://webology.micro.blog), which I'm planning on using to cross-post more. The verdict is still out after a really rocky start, but I'm hopeful ü§û \n",
				"date_published": "2023-12-31T16:27:25-05:00",
				"url": "https://micro.webology.dev/2023/12/31/testing-out-my.html"
			},
			{
				"id": "http://webology.micro.blog/2023/12/31/commander-mark-taught.html",
				
				"content_html": "<p>Commander Mark taught me how to draw with perspective to create 3d drawings as a kid. I used to watch him on PBS as a kid. I didn&rsquo;t know he had a documentary coming out, but I am here for it.</p>\n<p><a href=\"https://www.npr.org/2023/12/28/1217590736/mark-kistler-secret-city\">www.npr.org/2023/12/2&hellip;</a></p>\n",
				"content_text": "Commander Mark taught me how to draw with perspective to create 3d drawings as a kid. I used to watch him on PBS as a kid. I didn't know he had a documentary coming out, but I am here for it. \r\n\r\n[www.npr.org/2023/12/2...](https://www.npr.org/2023/12/28/1217590736/mark-kistler-secret-city) \n",
				"date_published": "2023-12-31T16:22:22-05:00",
				"url": "https://micro.webology.dev/2023/12/31/commander-mark-taught.html"
			},
			{
				"id": "http://webology.micro.blog/2023/12/29/im-unsure-if.html",
				
				"content_html": "<p>ü§î I&rsquo;m unsure if or how long I will keep this up in 2024, but I thought I&rsquo;d end my week/year by publishing some Weeknotes.</p>\n<p><a href=\"https://jefftriplett.com/2023/weeknotes-2023-w52/\">jefftriplett.com/2023/week&hellip;</a></p>\n",
				"content_text": "ü§î I'm unsure if or how long I will keep this up in 2024, but I thought I'd end my week/year by publishing some Weeknotes. \n\n[jefftriplett.com/2023/week...](https://jefftriplett.com/2023/weeknotes-2023-w52/)\n",
				"date_published": "2023-12-29T15:29:46-05:00",
				"url": "https://micro.webology.dev/2023/12/29/im-unsure-if.html",
				"tags": ["Weeknotes"]
			}
	]
}
